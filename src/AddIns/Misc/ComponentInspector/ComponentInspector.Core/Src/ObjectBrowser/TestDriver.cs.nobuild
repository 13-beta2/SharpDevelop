using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;

using NoGoop.win32;
using Access;

namespace NoGoop.objb
{


    public class FormInfo
    {
        public Access.Form		Form;
        public int				WindowHandle;
        public string			WindowName;

        public override String ToString()
        {
            return Form.Name + " win: 0x" 
                + WindowHandle.ToString("X") + ":" + WindowName;  
        }
    }


	public class TestDriver
	{

        private Access.Application 		AccessApp;

        private static ArrayList 			WindowList;

        // For locking at the class level
        private static Object			Lock;

        static TestDriver()
		{
			Lock = new Object();
		}


        public TestDriver()
		{
		}

        public IList GetForms()
		{
			ArrayList forms = new ArrayList();
			IEnumerator en = AccessApp.Forms.GetEnumerator();

			while (en.MoveNext())
			{
				forms.Add(System.Runtime.InteropServices.Marshal.
						  CreateWrapperOfType(en.Current, typeof(Access.Form)));
                //				forms.Add(en.Current);
			}
			return forms;
		}

        public IList GetFormInfoList()
		{
			ArrayList forms = new ArrayList();
			IEnumerator en = GetForms().GetEnumerator();

			while (en.MoveNext())
			{
				FormInfo fi = new FormInfo();
				fi.Form = (Access.Form)en.Current;
				fi.WindowHandle = fi.Form.Hwnd;
				fi.WindowName = Windows.GetWindowText(fi.WindowHandle);
				forms.Add(fi);
			}
			return forms;
		}

        public int GetTopWindow()
		{
			return AccessApp.hWndAccessApp();
		}


        public Object GetTopObject()
		{
			return AccessApp;
		}

        public IList GetChildWindows()
		{
			return GetChildWindows(GetTopWindow());
		}


        public IList GetChildWindows(int hWnd)
		{
			ArrayList winList = new ArrayList();
			GetChildWindows(hWnd, winList);
			return winList;
		}


        public void GetChildWindows(int hWnd, ArrayList winList)
		{
			ArrayList SaveList = WindowList;

			// Since WindowList is an class variable, required because
			// its updated with a callback
			lock (Lock) 				
				{
					WindowList = winList;
					EnumChildProc callback = new EnumChildProc(TestDriver.ChildWindow);
					Windows.EnumChildWindows(hWnd, callback, 0);

					WindowList.Sort(null);
					
					// Now get all of the children
					foreach (Windows.WindowInfo wi in winList)
						{
							wi.Children = new ArrayList();
							GetChildWindows(wi.hWnd, wi.Children);
						}

					WindowList = SaveList;
				}
		}

        // This is the callback function, called by windows for each child
        private static bool ChildWindow(int hwnd, int lParam)
		{
			WindowList.Add(Windows.GetWindowInfo(hwnd));
			return true;
		}


        public bool CheckIfRunning()
		{
			try
			{
                
				// This is the same as a VB GetObject, more or less
                /***
				Object o = 
					System.Runtime.InteropServices.Marshal.GetActiveObject("Access.Application.9");
				AccessApp = (Access.Application)
					System.Runtime.InteropServices.Marshal.
					CreateWrapperOfType(o, typeof(Access.Application));

				Console.WriteLine("Found current access: " + AccessApp);

                ****/
				return true;
			}
			catch (Exception)
			{
				Console.WriteLine("No current access running");
				AccessApp = null;
				return false;
			}
		}


        public void CreateNewAccess(string fileName)
		{
			AccessApp = new Access.Application();
			AccessApp.OpenCurrentDatabase(fileName, false);
			AccessApp.Visible = true;
			AccessApp.DoCmd.OpenForm("People",
									 Access.AcFormView.acNormal, 
									 null,
									 null, 
									 Access.AcFormOpenDataMode.acFormEdit, 
									 Access.AcWindowMode.acWindowNormal, "");
		}

        [STAThread] 
            public static void Main(string[] args) 
		{
			TestDriver td = new TestDriver();
			td.CheckIfRunning();
		}
	}
}

