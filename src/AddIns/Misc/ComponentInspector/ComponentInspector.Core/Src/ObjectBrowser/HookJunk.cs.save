			// Button for adding a hook to the selected form
			Button b1 = new Button();
			b1.Location = new Point(400, 200);
			b1.Text = "Add Hook";
			b1.Click += new System.EventHandler(this.AddHookButton_Click);
			this.Controls.Add(b1);




            //			CallWndProc callback = new CallWndProc(HookProc);
            //			GetMsgProc callback = new GetMsgProc(HookProc);
			MessageProc callback = new MessageProc(HookProc);
			int modHandle = Windows.GetModuleHandle(null);
			DebugMessage("Module handle: " + modHandle);
            //			int ret = Windows.SetWindowsHookEx(Windows.WH_CALLWNDPROC, callback, 
            //			int ret = Windows.SetWindowsHookEx(Windows.WH_GETMESSAGE, callback, 
			int ret = Windows.SetWindowsHookEx(Windows.WH_MSGFILTER, callback, 
											   modHandle, 0);
			if (ret == 0)
				DebugMessage("Error adding hook: " + Windows.GetLastErrorText());
			else
				DebugMessage("Added hook " + ret);
		}


        //	public int HookProc(int nCode, int wParam, Windows.CWPSTRUCT lParam)
        public int HookProc(int nCode, int wParam, int lParam)
		{
            //			for (int i = 0; i < HookedWindows.Count; i++)
            {
                //					if ((int)HookedWindows[i] == lParam.hWnd)
                {
                    //HookedMessages.Enqueue(lParam);
                    //							DebugMessage("Hook Called: hWnd: " + lParam.hWnd
                    DebugMessage("Hook Called: hWnd: " 
                                 + " code: " + nCode 
                                 + " wParam: " + wParam 
                                 + " lParam: " + lParam);
                }
            }

			if (nCode < 0)
				return Windows.CallNextHookEx(0, nCode, wParam, lParam);
			return 0;
		}


        protected void AddHookButton_Click (object sender, System.EventArgs e)
		{
			MainTreeNode node = (MainTreeNode)this.MainTree.SelectedNode;

			DebugMessage("add hook " + node);

			HookedMessages = new Queue();
			if (node.WindowInfo != null)
            {
                HookedWindows.Add(node.WindowInfo.hWnd);
            }

		}

