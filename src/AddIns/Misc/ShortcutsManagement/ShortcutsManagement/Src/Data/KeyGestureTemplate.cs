using System;
using System.Text;
using System.Windows.Input;

namespace ICSharpCode.ShortcutsManagement
{
    /// <summary>
    /// Describes full key gesture or part of key gesture
    /// </summary>
    public class KeyGestureTemplate
    {
        /// <summary>
        /// Gets the key associated with key gesture template
        /// </summary>
        public Key Key
        {
            get; 
            private set;
        }

        /// <summary>
        /// Get modifier keys associated with key gesture template
        /// </summary>
        public ModifierKeys Modifiers
        {
            get;
            private set;
        }

        /// <summary>
        /// Create new instance of <see cref="KeyGestureTemplate"/> from <see cref="KeyEventArgs"/>
        /// </summary>
        /// <param name="keyEventArgs">Arguments generated by key event</param>
        public KeyGestureTemplate(KeyEventArgs keyEventArgs)
        {
            var keyboardDevice = (KeyboardDevice)keyEventArgs.Device;

            Key = keyEventArgs.Key;
            Modifiers = keyboardDevice.Modifiers;
        }

        /// <summary>
        /// Create new instance of key gesture template from key gesture
        /// </summary>
        /// <param name="gesture">Key gesture</param>
        public KeyGestureTemplate(KeyGesture gesture)
        {
            Key = gesture.Key;
            Modifiers = gesture.Modifiers;
        }

        /// <summary>
        /// Create new instance of key gesture template from key and modifiers
        /// </summary>
        /// <param name="key">The key associated with key gesture template</param>
        /// <param name="modifiers">Modifier keys associated with key gesture template</param>
        public KeyGestureTemplate(Key key, ModifierKeys modifiers)
        {
            Key = key;
            Modifiers = modifiers;
        }

        /// <summary>
        /// Create key gesture template from key only (without modifiers)
        /// </summary>
        /// <param name="key">The key associated with key gesture template</param>
        public KeyGestureTemplate(Key key)
        {
            Key = key;
            Modifiers = ModifierKeys.None;
        }

        /// <summary>
        /// Determines whether key gesture matches this key gesture template
        /// </summary>
        /// <param name="gesture">Key gesture</param>
        /// <param name="strictMatch">If true both modifiers and key should match. Otherwice gesture matches to template if template describe only part of shortcut</param>
        /// <returns></returns>
        public bool Matches(KeyGesture gesture, bool strictMatch)
        {
            if(strictMatch) {
                return Key == gesture.Key && Modifiers == gesture.Modifiers;
            }

            var keyMatches = Key == gesture.Key;
            
            // Determine whether template contains only part of modifier keys contained in
            // gesture. For example if template contains Control modifier, but gesture contains
            // Control and Alt true will be returned
            var modifierMatches = gesture.Modifiers - (gesture.Modifiers ^ Modifiers) >= 0;
            
            // Template contains no modifiers compare only keys
            if (Modifiers == ModifierKeys.None) {
                return keyMatches;
            }

            // If template has modifiers but key is one of modifier keys return true if
            // modifiers match. This is used because when user presses modifier key it is 
            // presented in Key property and Modifiers property
            if (Array.IndexOf(new[] { Key.LeftAlt, Key.RightAlt, 
                                       Key.LeftShift, Key.RightShift,
                                       Key.LeftCtrl, Key.RightCtrl,
                                       Key.LWin, Key.RWin,
                                       Key.System}, Key) >= 0) {
                return modifierMatches;
            }
            
            return modifierMatches && keyMatches;
        }

        /// <summary>
        /// Returns string that represents <see cref="KeyGestureTemplate"/>
        /// </summary>
        /// <returns>String</returns>
        public override string ToString()
        {
            var pressedButton = new StringBuilder();

            // Display modifier
            if ((Modifiers & ModifierKeys.Control) > 0)
            {
                pressedButton.Append("Ctrl + ");
            }
            if ((Modifiers & ModifierKeys.Windows) > 0)
            {
                pressedButton.Append("Windows + ");
            }
            if ((Modifiers & ModifierKeys.Alt) > 0)
            {
                pressedButton.Append("Alt + ");
            }
            if ((Modifiers & ModifierKeys.Shift) > 0)
            {
                pressedButton.Append("Shift + ");
            }

            // Filter modifier keys from being displayed twice (example: Control + LeftCtrl)
            if (Array.IndexOf(new[] { Key.LeftAlt, Key.RightAlt, 
                                       Key.LeftShift, Key.RightShift,
                                       Key.LeftCtrl, Key.RightCtrl,
                                       Key.LWin, Key.RWin,
                                       Key.System}, Key) < 0)
            {
                pressedButton.Append(new KeyConverter().ConvertToInvariantString(Key));
            }

            return pressedButton.ToString();
        }
    }
}
