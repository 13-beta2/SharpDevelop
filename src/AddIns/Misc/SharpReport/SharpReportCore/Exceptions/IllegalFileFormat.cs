//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;
using System.Security.Permissions;

	/// <summary>
	/// This exception is throw'n when something is wrong with the File Format
	/// </summary>
	/// <remarks>
	/// 	created by - Forstmeier Peter
	/// 	created on - 25.04.2005 14:29:20
	/// </remarks>
namespace SharpReportCore {	
	[Serializable()]
	public class IllegalFileFormatException : System.Exception {
		
		static string errorMessage = "<aus code> Could not read file , file corrupt (SharpReportFile is improperly formatted)";
		private string localisedMessage = String.Empty;
		
		public IllegalFileFormatException():base (errorMessage){
		}
		
		public IllegalFileFormatException(string errorMessage,
		                            Exception exception):base (errorMessage,exception){
			
		}
		public IllegalFileFormatException(string localisedMessage):base(localisedMessage)
		{
			this.localisedMessage = localisedMessage;
		}
		
		
		protected IllegalFileFormatException(SerializationInfo info, 
         StreamingContext context) : base(info, context){
         // Implement type-specific serialization constructor logic.
      	}

		
		public string LocalisedMessage {
			get {
				return localisedMessage;
			}
		}
		
		
		public static string ErrorMessage {
			get {
				return errorMessage;
			}
		}
 		[SecurityPermissionAttribute(SecurityAction.Demand, 
          SerializationFormatter = true)]

		public override void GetObjectData(SerializationInfo info, StreamingContext context){
			if (info == null) {
				throw new ArgumentNullException("info");
			}
			info.AddValue("errorMessage", IllegalFileFormatException.errorMessage);
			info.AddValue("localisedMessage", this.localisedMessage);
			base.GetObjectData(info, context);
		}
	}
}
