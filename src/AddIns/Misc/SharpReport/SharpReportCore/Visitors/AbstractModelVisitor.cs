//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Xml;
/// <summary>
/// Base Class for ModelVisitor
/// </summary>
/// <remarks>
/// 	created by - Forstmeier Peter
/// 	created on - 03.03.2005 17:01:23
/// </remarks>
namespace SharpReportCore {	
	public class AbstractModelVisitor : object, SharpReportCore.IModelVisitor {
		private readonly string nodesQuery = "controls/control";
		private SharpReportCore.XmlFormReader xmlFormReader;
		private string fileName;
//		private GenericFactory genericFactory;
		
		/// <summary>
		/// Default constructor - initializes all fields to default values
		/// </summary>

		
		public AbstractModelVisitor(string fileName){
			this.fileName = fileName;
			xmlFormReader = new XmlFormReader() ;
		}
		
		protected XmlNodeList MakeSection (XmlElement sectionElem,BaseSection baseSection) {
			if (baseSection == null) {
				throw new MissingSectionException();
			}
			baseSection.SuspendLayout();
			XmlHelper.SetSectionValues (xmlFormReader,sectionElem,baseSection);
			baseSection.ResumeLayout();
			return BuildControlList(sectionElem);
		}
		
		
		protected BaseReportItem MakeItem (XmlElement elem,IContainerItem parent,
		                                  BaseSection section,IItemRenderer itemRenderer) {
			
			if (section == null) {
				throw new ArgumentNullException("section");
			}
			BaseReportItem item = (BaseReportItem)itemRenderer;
			item.SuspendLayout();
			XmlHelper.SetReportItemValues (xmlFormReader,elem,item);
			if (parent == null) {
				item.Parent = section;
				section.Items.Add (item);
			} else {
				item.Parent = parent;
				parent.Items.Add(item);
			}
			item.ResumeLayout();
			return item;
		}
		
		protected XmlNodeList BuildControlList(XmlElement section) {
			if (section == null) {
				throw new ArgumentNullException("section");
			}
			return section.SelectNodes (this.nodesQuery);
		}
		
		protected string NodesQuery {
			get {
				return nodesQuery;
			}
		}
		
		protected XmlFormReader XmlFormReader {
			get {
				return xmlFormReader;
			}
		}
		
		
		protected string FileName {
			get {
				return fileName;
			}
		}
	

		#region SharpReport.DelegatesInterfaces.IModelVisitor interface implementation
		public virtual void Visit(SharpReportCore.ReportModel reportModel) {
			throw new NotImplementedException();
		}
		public virtual void Visit (System.Windows.Forms.Control designer){
			throw new NotImplementedException();
		}
		#endregion
		
	}
}
