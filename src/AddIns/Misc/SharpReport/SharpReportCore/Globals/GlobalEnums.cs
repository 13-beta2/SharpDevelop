//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Windows.Forms;
	
	/// <summary>
	/// Global used Enumerations
	/// </summary>
	/// <remarks>
	/// 	created by - Forstmeier Peter
	/// 	created on - 13.12.2004 09:39:14
	/// </remarks>
	/// 
namespace SharpReportCore {	
	public class GlobalEnums : object {
			
		///<summary>Technics to get the data
		/// Push : report get'S a ready filld dataset
		/// Pull : report has to fill data by themself
		/// FormSheet : FormSheet report
		/// </summary>
		public enum enmPushPullModel {
			PushData,
			PullData,
			FormSheet
		}
		
		/// <summary>
		/// All available ReportItems
		/// </summary>
		public enum ReportItemType {
			ReportTextItem,
			ReportDataItem,
			ReportRectangleItem,
			ReportImageItem,
			ReportLineItem,
			ReportCircleItem,
			PageNumber,
			TodaysDate
		}
		/// <summary>
		/// FormSheet means a blank form with Labels, Lines and Checkboxes
		/// DataReport handles all Reports with Data
		/// </summary>
		public enum enmReportType {
			FormSheet,
			DataReport,
		}
		
		/// <summary>
		/// Type of Sections used
		/// </summary>
		public enum enmSection {
			ReportHeader,
			ReportPageHeader,
			ReportDetail,
			ReportPageFooter,
			ReportFooter
		}
		/// <summary>
		/// Output Format
		/// </summary>
		public enum enmRenderTo {
			Text,
			Pdf
		}
		
		public enum ItemHorizontalAlign {
			Left,
			Center,
			Right
		}
		
		///<summary>
		///Names of the different collections like Sorting,grouping etc
		/// </summary>
		
		public enum enmParamCollectionName{
			AvailableColumns,
			SqlParams,
			Sortings,
			Groupings
		}
		
		///
  		/// Convert any possible string-Value of a given enumeration
  		/// type to its internal representation.
   
  		public static object StringToEnum( Type type, string value ) {
  			foreach ( FieldInfo fi in type.GetFields() )
  				if ( fi.Name == value )
  				return fi.GetValue( null );    // We use null because
  			
  			throw new Exception( string.Format(CultureInfo.CurrentCulture,
  			                                   "Can't convert {0} to {1}",
  			                                   value,
  			                                   type.ToString()) );
  		}
	}
}
