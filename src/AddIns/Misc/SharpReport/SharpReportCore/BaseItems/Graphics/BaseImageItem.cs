//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Drawing;
using System.Globalization;

/// <summary>
/// Handles the drawing of Images like Bitmap's and so on
/// </summary>
/// <remarks>
/// 	created by - Forstmeier Peter
/// 	created on - 04.10.2005 11:17:29
/// </remarks>

namespace SharpReportCore {
	
	
	public class BaseImageItem : SharpReportCore.BaseGraphicItem {
		
		/// <summary>
		/// Default constructor 
		/// </summary>
		
		string fileName;
		Image image;
		bool scaleImageToSize;
		GlobalEnums.ImageSource imageSource;
		
		public BaseImageItem():base() {
		}
		
		private void LoadImage (string fileName) {
			if (String.IsNullOrEmpty(fileName)) {
				throw new ArgumentNullException("fileName");
			}
			try {
				this.image = null;
				this.image = Image.FromFile (fileName);
				if (image == null) {
					string str = String.Format(CultureInfo.InvariantCulture,
					                           "Unable to Load {0}",fileName);
					throw new SharpReportException(str);
				}
				
			} catch (System.OutOfMemoryException) {
				throw;
			} catch (System.IO.FileNotFoundException) {
				throw;
			}
			
		}
		
		/// <summary>
		/// ToolboxIcon for ReportRectangle
		/// </summary>
		/// <returns>Bitmap</returns>
		
		private static Bitmap ErrorBitmap(Rectangle rect) {
			Bitmap b = new Bitmap (rect.Width,rect.Height);
			using (Graphics g = Graphics.FromImage (b)){
				g.DrawRectangle (new Pen(Color.Black, 1),
				                 1,1,rect.Width -2,rect.Height -2);
				g.DrawString("Image",new Font("Microsoft Sans Serif",
				                              8),
				             new SolidBrush(Color.Gray),
				             new RectangleF(1,1,rect.Width,rect.Height) );
				
			}
			return b;
		}
		
		#region overrides
		
		public override void Render(ReportPageEventArgs rpea) {
			if (rpea == null) {
				throw new ArgumentNullException("rpea");
			}
			base.Render(rpea);
			Graphics g = rpea.PrintPageEventArgs.Graphics;
			
			if (this.scaleImageToSize) {
				g.DrawImageUnscaled(this.Image,0,0);
				rpea.LocationAfterDraw = new Point (this.Location.X + this.Image.Width,
				                                    this.Location.Y + this.Image.Height);
			} else {
				SizeF measureSize = BaseGraphicItem.MeasureReportItem (this);
				RectangleF rect =  base.DrawingRectangle (measureSize);
				g.DrawImage(this.Image,
				            rect);
				rpea.LocationAfterDraw = new Point (this.Location.X + (int)rect.Width,
				                                    this.Location.Y + (int)rect.Height);
			}
		}
		
//		public override void Dispose() {
//			base.Dispose();
//			this.image = null;
//		}
		
		public override string ToString() {
			return "BaseImageItem";
		}
		#endregion
		
		
		
		#region properties

		public virtual string FileName {
			get {
				return fileName;
			}
			set {
				fileName = value;
				this.image = null;
				this.imageSource = GlobalEnums.ImageSource.File;
				LoadImage (fileName);
				base.NotifyPropertyChanged("FileName");
			}
		}
		
		/// <summary>
		/// The Image
		/// </summary>
		public  virtual Image Image {
			get {
				if (this.image != null) {
					return image;
				} else {
					return BaseImageItem.ErrorBitmap(new Rectangle(0,0,this.Size.Width,this.Size.Height));
				}
				
			}
			set {
				this.fileName = String.Empty;
				this.image = value;
				this.imageSource = GlobalEnums.ImageSource.External;
				base.NotifyPropertyChanged("Image");
			}
		}
		
		/// <summary>
		/// Where did the image come from
		/// </summary>
		/// 
		public GlobalEnums.ImageSource ImageSource {
			get {
				return imageSource;
			}
		}
		
		///<summary>
		/// enlarge / Shrink the Controls Size
		/// </summary>
		public bool ScaleImageToSize {
			get {
				return scaleImageToSize;
			}
			set {
				scaleImageToSize = value;
				base.NotifyPropertyChanged("ScaleImageToSize");
			}
		}
		
		#endregion
		
		
		
	}
}
