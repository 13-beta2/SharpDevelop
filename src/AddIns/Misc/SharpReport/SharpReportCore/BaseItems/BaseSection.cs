//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;

using System.Xml.Serialization;

/// <summary>
/// This Class is the BaseClass for <see cref="ReportSection"></see>
/// </summary>


namespace SharpReportCore {
	public class BaseSection : SharpReportCore.BaseReportObject {
		
		private int sectionMargin;
		
		private ReportItemCollection items;
		
		public event EventHandler<SectionPrintingEventArgs> SectionPrinting;
		public event EventHandler<SectionPrintingEventArgs> SectionPrinted;
		
		
		#region Constructors
		
		public BaseSection(): base() {
			this.Name = String.Empty;
		}
		
		public BaseSection (string sectionName) :base(){
			this.Name = sectionName;
		}
		
		#endregion
		
		public override void Render(ReportPageEventArgs rpea){
			this.NotifyPrinting();
			base.Render(rpea);
			this.NotifyPrinted();
		}
		
		
		#region properties
		public void NotifyPrinting () {
			if (this.SectionPrinting != null) {
				SectionPrintingEventArgs ea = new SectionPrintingEventArgs (this);
				SectionPrinting (this,ea);
			}
		}
		
		public void NotifyPrinted () {
			if (this.SectionPrinted != null) {
				SectionPrintingEventArgs ea = new SectionPrintingEventArgs (this);
				SectionPrinted (this,ea);
			}
		}
		
		public  int SectionMargin {
			get {
				return this.sectionMargin;
			}
			set {
				this.sectionMargin = value;
			}
		}
	
		
	
		[Browsable(false)]
		public ReportItemCollection Items{
			get {
				if (this.items == null) {
					items = new ReportItemCollection();
				}
				return items;
			}
		}
		#endregion
		
		#region System.IDisposable interface implementation
		public override void Dispose () {
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		~BaseSection(){
			Dispose(false);
		}
		
		protected override void Dispose(bool disposing) {
			try {
				if (disposing){
					if (this.items != null) {
						this.items.Clear();
						this.items = null;
					}
				}
			} finally {
				base.Dispose(disposing);
			}
		}
		
		#endregion
	}
}
