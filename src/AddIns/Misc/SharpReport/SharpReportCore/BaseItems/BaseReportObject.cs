//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------


using System;
using System.Xml.Serialization;
	
using System.ComponentModel;
using System.Drawing;
	
/// <summary>
/// This is the BaseClass for <see cref="ReportSection"></see>
/// and <see cref="ReportItem"></see> 
/// </summary>
/// <remarks>
/// 	created by - Forstmeier Peter
/// 	created on - 18.08.2005 13:59:11
/// </remarks>
	
namespace SharpReportCore {	
	public class BaseReportObject : ISectionRenderer,INotifyPropertyChanged {
		
		private string name;
		private object parent = null;
		private bool visible = true;
		private bool  canGrow = false;
		private bool canShrink = false;
		private bool pageBreakBefore = false;
		private bool pageBreakAfter = false;
		private bool suspend = true;
		private Size size;
		private Point location;
		
		private Color backColor;
		private int  sectionOffset = 0;
		private int sectionMargin = 0;

		public event EventHandler<EventArgs> BeforePrint;
		public event EventHandler<AfterPrintEventArgs> AfterPrint;
		
		
		#region SharpReportCore.IPropertyChange interface implementation
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		public BaseReportObject() {
			suspend = false;
		}
	
		
		protected void NotifyPropertyChanged(string property) {
			if (!suspend) {
				if (this.PropertyChanged != null) {
					this.PropertyChanged(this,new PropertyChangedEventArgs (property));
				}
			}
		}
		public void SuspendLayout () {
			suspend = true;
		}

		public void ResumeLayout () {
			suspend = false;
		}
		public virtual bool Visible {
			get {
				return visible;
			}
			set {
				visible = value;
			}
		}
		
		public virtual bool CanGrow {
			get {
				return canGrow;
			}
			set {
				canGrow = value;
			}
		}
		public virtual bool CanShrink {
			get {
				return canShrink;
			}
			set {
				canShrink = value;
			}
		}
		
		[XmlIgnoreAttribute]
		[Browsable(false)]
		public bool Suspend {
			get {
				return suspend;
			}
		}
		
		public virtual string Name {
			get {
				return name;
			}
			set {
				name = value;
			}
		}
		
		public virtual bool PageBreakAfter {
			get {
				return pageBreakAfter;
			}
			set {
				pageBreakAfter = value;
			}
		}
		public virtual bool PageBreakBefore {
			get {
				return pageBreakBefore;
			}
			set {
				pageBreakBefore = value;
			}
		}
		[Browsable(false)]
		[XmlIgnoreAttribute]
		public virtual object Parent {
			get {
				return parent;
			}
			set {
				parent = value;
			}
		}
		
		[XmlIgnoreAttribute]
		[Browsable(false)]
		public virtual int SectionMargin {
			get {
				return sectionMargin;
			}
			set {
				sectionMargin = value;
			}
		}
		
		[XmlIgnoreAttribute]
		[Browsable(false)]
		public virtual int SectionOffset {
			get {
				return sectionOffset;
			}
			set {
				sectionOffset = value;
			}
		}
		
		public virtual Size Size {
			get {
				return size;
			}
			set {
				size = value;
//				NotifyPropertyChanged ("Size",true);
				NotifyPropertyChanged ("Size");
			}
		}
		
		public virtual Point Location {
			get {
				return location;
			}
			set {
				location = value;
				NotifyPropertyChanged ("Location");
			}
		}
		
		public virtual Color BackColor {
			get {
				return backColor;
			}
			set {
				backColor = value;
				NotifyPropertyChanged ("BackColor");
			}
		}
		
		public void OnAfterPrint (PointF afterPrint) {
			if (this.AfterPrint != null) {
				AfterPrintEventArgs rea = new AfterPrintEventArgs (afterPrint);
				AfterPrint(this, rea);
			}
		}
		
		public void OnBeforePrint () {
			if (this.BeforePrint != null) {
				BeforePrint (this,EventArgs.Empty);
			}
		}
		
		
		
		#region SharpReportCore.IBaseRenderer interface implementation
		public virtual void  Render(ReportPageEventArgs rpea) {
			
		}
		#endregion
		
	}
}
