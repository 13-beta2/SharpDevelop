//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------


using System;
using System.Drawing;
using System.ComponentModel;
using System.Xml.Serialization;

using SharpReportCore;
	
	
/// <summary>
/// This Class is used for Databased items
/// </summary>
/// <remarks>
/// 	created by - Forstmeier Peter
/// 	created on - 22.08.2005 00:12:59
/// </remarks>
namespace SharpReportCore {	
	public class BaseDataItem : SharpReportCore.BaseTextItem,IItemRenderer {
		
		
		private const string unbound = "(unbound)";
		private string columnName = String.Empty;
		private string baseTableName = String.Empty;
		private string dbValue = String.Empty;
		private string dataType = String.Empty;
		/// <summary>
		/// Default constructor - initializes all fields to default values
		/// </summary>
		public BaseDataItem() {
		}
		
		public BaseDataItem(string columnName){
			this.columnName = columnName;
		}
		
		public override void Render(SharpReportCore.ReportPageEventArgs e) {
			// this.DbValue is formatted in the BeforePrintEvent catched in AbstractRenderer
			string formattedString = base.FireFormatOutput(this.dbValue,this.FormatString,"");
			RectangleF rect = base.PrepareRectangle (e,formattedString);
			base.PrintTheStuff (e,formattedString,rect);
			base.NotiyfyAfterPrint (e.LocationAfterDraw);
		}
		
		public override string ToString() {
			return "BaseDataItem";
		}
		
		[XmlIgnoreAttribute]
		[Browsable(false)]
		public virtual string DbValue {
			get {
				return dbValue;
			}
			set {
				dbValue = value;
			}
		}
		
		[Browsable(true),
		 Category("Databinding"),
		 Description("Datatype of the underlying Column")]
		
		public virtual string ColumnName {
			get {
				return columnName;
			}
			set {
				columnName = value;
			}
		}
		
		
		[Browsable(true),
		 Category("Databinding"),
		 Description("Datatype of the underlying Column")]
		public string DataType {
			get {
				return dataType;
			}
			set {
				dataType = value;
			}
		}
		
		///<summary>
		/// Mappingname to Datasource
		/// </summary>
		/// 
		[Browsable(true),
		 Category("Databinding"),
		 Description("Mapping Name to DataTable")]
		[XmlIgnoreAttribute]
		public string MappingName {
			get {
				return baseTableName + "." + columnName;
			} 
		}
		
		
		[Browsable(true),
		 Category("Databinding"),
		 Description("TableName")]
		public string BaseTableName {
			get {
				return baseTableName;
			}
			set {
				baseTableName = value;
			}
		}
		[XmlIgnoreAttribute]
		[Browsable(false)]
		public string UnboundText {
			get {
				return unbound;
			}
		}
	}
}
