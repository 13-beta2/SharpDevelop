//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Drawing;	
using System.Globalization;
	/// <summary>
	/// BaseClass for Today's Date
	/// </summary>
	/// <remarks>
	/// 	created by - Forstmeier Peter
	/// 	created on - 12.09.2005 22:48:04
	/// </remarks>
	
namespace SharpReportCore {
	public class BaseToday : BaseFunction {
		
		public BaseToday() {
		}
		
		public override void Render(ReportPageEventArgs e) {
			base.Render(e);
		
			string formattedString = FormatAsDate(System.DateTime.Now.ToString(),base.FormatString);
			
			RectangleF rect = base.PrepareRectangle (e,formattedString);

			//Printout the textPart
			base.PrintTheStuff (e,this.Text,rect);

			//here we print the functionpart allway's with Stringalignment.Far
			StringFormat fmt = StandartStringFormat;
			fmt.Alignment = StringAlignment.Far;
			fmt.LineAlignment = StringAlignment.Near;
			
			e.PrintPageEventArgs.Graphics.DrawString(formattedString,
			                                         this.Font,
			                                         Brushes.Black,
			                                         rect,
			                                         fmt);
			
			// goon 
			base.NotiyfyAfterPrint (e.LocationAfterDraw);
		}
		
		public override string ToString() {
			return "BaseToday";
		}
			
			
		#region privates
		private string FormatAsDate (string toFormat,string formatWith) {
			if (toFormat.Length == 0) {
				return String.Empty;
			}
			if (formatWith.Length == 0) {
				return toFormat;
			}
			try {
				DateTime date = DateTime.Parse (toFormat.Trim(),
				                                CultureInfo.CurrentCulture.DateTimeFormat);
				string str = date.ToString(formatWith,
				                           DateTimeFormatInfo.CurrentInfo);
			    return str;
			} catch (Exception) {
				throw;
			}
			
		}
		#endregion
	}
}
