//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SharpReportCore {
	using System;
	using System.Data;
	using System.Globalization;
	
	using SharpReportCore;
	
	/// <summary>
	/// According to the definition in
	/// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/rsrdl/htm/rsp_ref_rdl_elements_qz_629g.asp
	/// 
	/// This Class definies a Reportparameter
	/// </summary>
	/// <remarks>
	/// 	created by - Forstmeier Peter
	/// 	created on - 30.05.2005 22:20:41
	/// </remarks>
	public class SqlParameter : AbstractParameter {
	
		DbType	dataType;
		object parameterValue;

		ParameterDirection  parameterDirection = ParameterDirection.InputOutput;
	
		#region Constructor
		
		public SqlParameter():base() {
		}
		

		
		public SqlParameter(string parameterName,
		                    DbType dataType,
		                    object parameterValue)
			:this(parameterName,dataType,parameterValue,ParameterDirection.Input){
			
		}
		
		
		public SqlParameter(string parameterName,
		                    DbType dataType,
		                    object parameterValue,
		                    ParameterDirection parameterDirection):base(){
			
			base.ParameterName = parameterName;
			this.DataType = dataType;
			this.parameterValue = parameterValue;

			this.parameterDirection = parameterDirection;
		}
		
		#endregion
	
		private void SetValue (string value) {
			switch( this.DataType )
			{
					//string type
				case DbType.Object					:
				case DbType.Binary					:
				case DbType.AnsiString				:
				case DbType.AnsiStringFixedLength	:
				case DbType.String					:
				case DbType.StringFixedLength		: this.parameterValue = value; break;
					
				case DbType.Boolean					: {
					
					this.parameterValue = bool.Parse( value);
					break;
					}
				                                                      
					
				case DbType.SByte					: {
					this.parameterValue = sbyte.Parse( value,
					                                CultureInfo.CurrentCulture );
					break;
				}
				case DbType.Byte					:{
						this.parameterValue = byte.Parse( value ,
					                               CultureInfo.CurrentCulture );
					break;
				}
				case DbType.Int16					: {
					this.parameterValue = short.Parse( value,CultureInfo.CurrentCulture  ); break;
				}
				case DbType.Int32					: {
					this.parameterValue = int.Parse( value,CultureInfo.CurrentCulture  ); 
					break;
				}
				case DbType.Int64					: {
					this.parameterValue = long.Parse( value,CultureInfo.CurrentCulture  );
					break;
				}
				case DbType.UInt16				: this.parameterValue = ushort.Parse( value,CultureInfo.CurrentCulture  ); break;
				case DbType.UInt32				: this.parameterValue = uint.Parse( value,CultureInfo.CurrentCulture  ); break;
				case DbType.UInt64				: this.parameterValue = long.Parse( value,CultureInfo.CurrentCulture  ); break;
					
				case DbType.Date					:
				case DbType.DateTime				:
				case DbType.Time					: this.parameterValue = DateTime.Parse( value,CultureInfo.CurrentCulture  ); break;
					
				case DbType.Decimal				: this.parameterValue = decimal.Parse( value ,CultureInfo.CurrentCulture ); break;
				case DbType.Currency				:
				case DbType.VarNumeric			:
				case DbType.Double				: this.parameterValue = double.Parse( value ,CultureInfo.CurrentCulture ); break;
				case DbType.Single				: this.parameterValue = float.Parse( value,CultureInfo.CurrentCulture  );  break;
					
				case DbType.Guid					: this.parameterValue = new Guid( value ); break;
				default								: {
					throw new ArgumentOutOfRangeException("value");
				}
			}
		}
		
		
		
		/// <summary>
		/// DataType of the Parameter
		/// <see cref="System.Data.DbType">DbType</see>
		/// </summary>
		public DbType DataType {
			get {
				return dataType;
			}
			set {
				
				dataType = value;
			
				switch( value ){
						//string type
					case DbType.AnsiString				:
					case DbType.AnsiStringFixedLength	:
					case DbType.String					:
					case DbType.StringFixedLength		:{
							this.parameterValue = new string( (char[])null );
							break;
					}
						//array type
					case DbType.Binary				: this.parameterValue = new byte[8000]; break;
						//bool type
					case DbType.Boolean				: this.parameterValue = new bool(); break;
						//interger type
					case DbType.SByte					: this.parameterValue = new sbyte(); break;
					case DbType.Byte					: this.parameterValue = new byte(); break;
					case DbType.Int16					: this.parameterValue = new short(); break;
					case DbType.Int32					: this.parameterValue = new int(); break;
					case DbType.Int64					: this.parameterValue = new long(); break;
					case DbType.UInt16				: this.parameterValue = new ushort(); break;
					case DbType.UInt32				: this.parameterValue = new uint(); break;
					case DbType.UInt64				: this.parameterValue = new long(); break;
						//Date type
					case DbType.Date					:
					case DbType.DateTime				:
					case DbType.Time					:{
							this.parameterValue = new DateTime();
							break;
						}
						//float type
					case DbType.Decimal				: this.parameterValue = new decimal(); break;
					case DbType.Currency				:
					case DbType.VarNumeric			:
					case DbType.Double				: this.parameterValue = new double(); break;
					case DbType.Single				: this.parameterValue = new float(); break;
						//user defined
					case DbType.Object				: this.parameterValue = new object(); break;
						//Guid
					case DbType.Guid					: this.parameterValue = new Guid(); break;
					default								: throw new ArgumentOutOfRangeException("value");
				}
				
			}
		}

	
		public object ParameterValue {
			get {
				return parameterValue;
			}
			set{
				SetValue (value.ToString());
			}
		}
		
		///<summary>
		/// Direction of Parameter 
		/// <see cref="System.Data.ParameterDirection">ParameterDirection</see>
		///</summary>
		
		public ParameterDirection ParameterDirection {
			get {
				return parameterDirection;
			}
			set {
				parameterDirection = value;
			}
		}
		
	}
}
