//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------


	using System;
	using System.Data;
	
	using ICSharpCode.Core;
	
	using SharpReportCore;
	/// <summary>
	/// This class is used to AutoGenerate a (PullData) Report
	/// (Reports, that grap the Data by themselve)
	/// </summary>
	/// <remarks>
	/// 	created by - Forstmeier Peter
	/// 	created on - 07.09.2005 13:23:14
	/// </remarks>
	
namespace ReportGenerator {	
	public class GeneratePullDataReport : AbstractReportGenerator {
		
		public GeneratePullDataReport(Properties customizer,
			                              ReportModel reportModel):base(customizer,reportModel){

			if (base.ReportModel.ReportSettings.DataModel != GlobalEnums.enmPushPullModel.PullData) {
				throw new ArgumentException ("Wrong DataModel in GeneratePullDataReport");
			}
		}
		
		
		
		#region ReportGenerator.IReportGenerator interface implementation
		public override void GenerateReport() {
			try {
				base.ReportModel.ReportSettings.ReportType = GlobalEnums.enmReportType.DataReport;
				DataTable tableFields = null;
				if (base.ReportGenerator.CommandType == CommandType.StoredProcedure) {
					// we have Storedprocedure
					if (base.ReportGenerator.SharpQueryProcedure.GetSchemaParameters() != null &&
					    base.ReportGenerator.SharpQueryProcedure.GetSchemaParameters().Count > 0) {
						// with parameters so we have prepare build the ParametersCollection here
						base.ReportModel.ReportSettings.SqlParametersCollection = base.ReportGenerator.BuildSqlParameterList();
						tableFields = base.GenerateFieldsTable (base.ReportModel);
					} else {
						// no params, just run
						tableFields = base.GenerateFieldsTable (base.ReportModel);
					}
				} else {
					// just run
					tableFields = base.GenerateFieldsTable (base.ReportModel);
				}
				
				BuildStandartSections();
				base.Manager.CreatePageHeader (base.ReportModel);
				
				base.Manager.CreateColumnHeadersFromTable(base.ReportModel,
				                                          base.ReportModel.PageHeader,
				                                          tableFields);
			
				base.Manager.CreateColumnsFromTable (base.ReportModel,
				                                     tableFields);
				base.Manager.CreatePageNumber(base.ReportModel);
				
				using (TableLayout layout = new TableLayout(base.ReportModel)){
					layout.BuildLayout();
				}
				base.Manager.AdjustNames(base.ReportModel);
			} catch (Exception e) {
				throw e;
			}
		
		}
		#endregion
	}
}
