<gui:AbstractInlineRefactorDialog x:Class="SharpRefactoring.Gui.CreatePropertiesDialog"
	Header="Create Properties"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:gui="clr-namespace:SharpRefactoring.Gui"
	xmlns:sd="http://icsharpcode.net/sharpdevelop/core"
	xmlns:widgets="http://icsharpcode.net/sharpdevelop/widgets"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Grid Cursor="Arrow" KeyboardNavigation.TabNavigation="Cycle">
		<Grid.Resources>
			<Style x:Key="ListBoxItemFocusHighlight" TargetType="{x:Type ListBoxItem}">
				<!-- This style replaces the default ListBoxItem template with one that highlights the focused item instead of the selected item -->
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Border Name="Bd"
							        Background="{TemplateBinding Background}"
							        BorderBrush="{TemplateBinding BorderBrush}"
							        BorderThickness="{TemplateBinding BorderThickness}"
							        Padding="{TemplateBinding Padding}"
							        SnapsToDevicePixels="true">
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocusWithin"
								         Value="true">
									<Setter TargetName="Bd"
									        Property="Background"
									        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
									<Setter Property="Foreground"
									        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Grid.Resources>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<TextBlock Margin="3"
		           Text="{sd:Localize AddIns.SharpRefactoring.OverrideToStringMethod.Description}"
		           TextWrapping="Wrap" />
		<CheckBox x:Name="implementInterface" Margin="3" Grid.Row="1" Content="Implement INotifyPropertyChanged" />
		<ListBox Margin="4" Grid.Row="2" SelectionMode="Multiple" ItemContainerStyle="{StaticResource ListBoxItemFocusHighlight}" x:Name="listBox">
			<ListBox.ItemTemplate>
				<DataTemplate>
					<!-- The checkbox is toggling the actual IsSelected property on the container (ListBoxItem), so it'll update ListBox.SelectedItems -->
					<!-- Focusable=false because the ListViewItem is already focusable -->
					<CheckBox Content="{Binding Text}"
					          IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListBoxItem}},Path=IsSelected}" />
				</DataTemplate>
			</ListBox.ItemTemplate>
		</ListBox>
		<widgets:UniformGridWithSpacing Columns="3" Margin="3" Grid.Row="3" HorizontalAlignment="Center">
			<Button Content="{sd:Localize Global.OKButtonText}" Click="OKButtonClick" Style="{x:Static sd:GlobalStyles.ButtonStyle}" />
			<Button Content="{sd:Localize Global.CancelButtonText}" Click="CancelButtonClick" Style="{x:Static sd:GlobalStyles.ButtonStyle}" />
			<ToggleButton x:Name="selectAll" Content="{sd:Localize Global.SelectAllButtonText}" IsChecked="{Binding AllSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type gui:CreatePropertiesDialog}}, Mode=TwoWay}" Checked="SelectAllChecked" Unchecked="SelectAllUnchecked" />
		</widgets:UniformGridWithSpacing>
	</Grid>
</gui:AbstractInlineRefactorDialog>