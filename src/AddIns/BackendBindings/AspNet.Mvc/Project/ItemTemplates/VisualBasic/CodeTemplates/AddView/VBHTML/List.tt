<#@ template language="VB" HostSpecific="true" #>
<#@ import namespace="ICSharpCode.AspNet.Mvc" #>
<#@ import namespace="Microsoft.VisualBasic.Constants" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".vbhtml" #>
<#= GetModelDirective() #>

<# 
	If MvcHost.IsPartialView Then
		' Do nothing.
	ElseIf MvcHost.IsContentPage Then
#>
@Code
	ViewData("Title") = "<#= MvcHost.ViewName #>"
	Layout = "<#= MvcHost.MasterPageFile #>"
End Code

<h2><#= MvcHost.ViewName #></h2>

<#
	Else
#>
<!DOCTYPE html>
<html>
	<head runat="server">
		<title><#= MvcHost.ViewName #></title>
	</head>
	<body>
<#
		PushIndent(vbTab & vbTab)
	End If
#>
<p>
	@Html.ActionLink("Create", "Create")
</p>
<table>
<#
	If ModelHasProperties Then
		For Each modelProperty As ModelProperty in ModelProperties
#>
	<tr>
		<th>
			@Html.LabelFor(Function(model) model.<#= modelProperty.Name #>)
		</th>
		<th></th>
	</tr>
	
<#
		Next
	End If 
#>
@For Each item in Model
	@<tr>
<#
	If ModelHasProperties Then
		For Each modelProperty As ModelProperty in ModelProperties
#>
		<td>
			@Html.DisplayFor(model => model.<#= modelProperty.Name #>)
		</td>
<#
		Next
	End If
#>
		<td>
			@Html.ActionLink("Edit", "Edit") |
			@Html.ActionLink("Details", "Details") |
			@Html.ActionLink("Delete", "Delete")
		</td>
	</tr>
Next
</table>
<# 
	If MvcHost.IsPartialView Then
		' Do nothing.
	ElseIf Not MvcHost.IsContentPage Then
		PopIndent()
#>
	</body>
</html>
<# End If #>
<#+
	ReadOnly Property MvcHost As MvcTextTemplateHost
		Get
			Return DirectCast(Host, MvcTextTemplateHost)
		End Get
	End Property
	
	Public Class ModelProperty
		Public Property Name As String
	End Class
	
	Function GetModelDirective() As String
		Dim viewDataTypeName As String = MvcHost.ViewDataTypeName
		If Not String.IsNullOrEmpty(viewDataTypeName) Then
			Return String.Format("@ModelType IEnumerable(Of {0})", viewDataTypeName)
		End If
		Return String.Empty
	End Function
	
	Private modelPropertiesList As List(Of ModelProperty)
	
	ReadOnly Property ModelProperties As List(Of ModelProperty)
		Get
			If modelPropertiesList Is Nothing Then
				modelPropertiesList = New List(Of ModelProperty)(GetModelProperties())
			End If
			Return modelPropertiesList
		End Get
	End Property
	
	ReadOnly Property ModelHasProperties As Integer
		Get
			Return ModelProperties.Count > 0
		End Get
	End Property
	
	Public Function GetModelProperties() As IEnumerable(Of ModelProperty)
		Dim properties = New List(Of ModelProperty)()
		For Each propertyInfo As PropertyInfo In MvcHost.GetViewDataTypeProperties()
			properties.Add(CreateModelProperty(propertyInfo))
		Next
		Return properties
	End Function
	
	Function CreateModelProperty(ByVal propertyInfo As PropertyInfo) As ModelProperty
		Return New ModelProperty() With { .Name = propertyInfo.Name }
	End Function
#>