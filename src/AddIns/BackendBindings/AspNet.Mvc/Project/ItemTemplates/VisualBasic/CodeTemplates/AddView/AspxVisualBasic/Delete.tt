<#@ template language="VB" HostSpecific="true" #>
<#@ import namespace="ICSharpCode.AspNet.Mvc" #>
<#@ import namespace="Microsoft.VisualBasic.Constants" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<# If MvcHost.IsPartialView Then #>
<%@ Control Language="VB" Inherits="System.Web.Mvc.ViewUserControl<#= GetViewPageType() #>" %>

<# ElseIf MvcHost.IsContentPage Then #>
<%@ Page Language="VB" MasterPageFile="<#= MvcHost.MasterPageFile #>" Inherits="System.Web.Mvc.ViewPage<#= GetViewPageType() #>" %>

<asp:Content ID="Content1" ContentPlaceHolderID="Title" runat="server">
<#= MvcHost.ViewName #>
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="<#= MvcHost.PrimaryContentPlaceHolderID #>" runat="server">
<#
		PushIndent(vbTab)
	Else
#>
<%@ Page Language="VB" Inherits="System.Web.Mvc.ViewPage<#= GetViewPageType() #>" %>

<!DOCTYPE html>
<html>
	<head runat="server">
		<title><#= MvcHost.ViewName #></title>
	</head>
	<body>
<# 
		PushIndent(vbTab & vbTab)
	End If
#>
<fieldset>
	<legend><#= MvcHost.ViewDataType.Name #></legend>
<# For Each modelProperty As ModelProperty in GetModelProperties() #>
	
	<div class="display-label">
		<%: Html.LabelFor(Function(model) model.<#= modelProperty.Name #>) %>
	</div>
	<div class="display-field">
		<%: Html.DisplayFor(Function(model) model.<#= modelProperty.Name #>) %>
	</div>
<# Next #>
</fieldset>
<% Using Html.BeginForm() %>
	<p>
		<input type="submit" value="Delete"/> |
		<%: Html.ActionLink("Back", "Index") %>
	</p>
<% End Using %>
<#
	If MvcHost.IsPartialView Then
		' Do nothing.
	ElseIf MvcHost.IsContentPage Then
		PopIndent()
#>
</asp:Content>
<#
	Else
		PopIndent()
#>
	</body>
</html>
<# End If #>
<#+
	ReadOnly Property MvcHost As MvcTextTemplateHost
		Get
			Return DirectCast(Host, MvcTextTemplateHost)
		End Get
	End Property
	
	Public Class ModelProperty
		Public Property Name As String
	End Class
	
	Public Function GetViewPageType() As String
		Dim viewDataTypeName As String = MvcHost.ViewDataTypeName
		If Not String.IsNullOrEmpty(viewDataTypeName) Then
			Return String.Format("(Of {0})", viewDataTypeName)
		End If
		Return String.Empty
	End Function
	
	Public Function GetModelProperties() As IEnumerable(Of ModelProperty)
		Dim properties = New List(Of ModelProperty)()
		For Each propertyInfo As PropertyInfo In MvcHost.GetViewDataTypeProperties()
			properties.Add(CreateModelProperty(propertyInfo))
		Next
		Return properties
	End Function
	
	Function CreateModelProperty(ByVal propertyInfo As PropertyInfo) As ModelProperty
		Return New ModelProperty() With { .Name = propertyInfo.Name }
	End Function
#>