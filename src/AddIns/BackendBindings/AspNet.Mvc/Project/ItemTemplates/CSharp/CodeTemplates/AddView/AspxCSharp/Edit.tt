<#@ template language="C#" HostSpecific="true" #>
<#@ import namespace="ICSharpCode.AspNet.Mvc" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<# if (MvcHost.IsPartialView) { #>
<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<#= GetViewPageType() #>" %>

<# } else if (MvcHost.IsContentPage) { #>
<%@ Page Language="C#" MasterPageFile="<#= MvcHost.MasterPageFile #>" Inherits="System.Web.Mvc.ViewPage<#= GetViewPageType() #>" %>

<asp:Content ID="Content1" ContentPlaceHolderID="Title" runat="server">
<#= MvcHost.ViewName #>
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="<#= MvcHost.PrimaryContentPlaceHolderID #>" runat="server">
<#
		PushIndent("\t");
	} else {
#>
<%@ Page Language="C#" Inherits="System.Web.Mvc.ViewPage<#= GetViewPageType() #>" %>

<!DOCTYPE html>
<html>
	<head runat="server">
		<title><#= MvcHost.ViewName #></title>
	</head>
	<body>
<# 
		PushIndent("\t\t");
	} 
#>
<% using (Html.BeginForm()) { %>
	<%: Html.ValidationSummary(true) %>
	<fieldset>
		<legend><#= MvcHost.ViewDataType.Name #></legend>
<# foreach (ModelProperty modelProperty in GetModelProperties()) { #>
		
		<div class="editor-label">
			<%: Html.LabelFor(model => model.<#= modelProperty.Name#>) %>
		</div>
		<div class="editor-field">
			<%: Html.EditorFor(model => model.<#= modelProperty.Name#>) %>
			<%: Html.ValidationMessageFor(model => model.<#= modelProperty.Name#>) %>
		</div>
<# } #>
		
		<p>
			<input type="submit" value="Save"/>
		</p>
	</fieldset>
<% } %>
<div>
	<%: Html.ActionLink("Back", "Index") %>
</div>
<#
	if (MvcHost.IsPartialView) {
		// Do nothing.
	} else if (MvcHost.IsContentPage) {
		PopIndent();
#>
</asp:Content>
<#
	} else { 
		PopIndent();
#>
	</body>
</html>
<# } #>
<#+
	MvcTextTemplateHost MvcHost {
		get { return (MvcTextTemplateHost)Host; }
	}
	
	public class ModelProperty
	{
		public string Name { get; set; }
	}
	
	public string GetViewPageType()
	{
		string viewDataTypeName = MvcHost.ViewDataTypeName;
		if (!String.IsNullOrEmpty(viewDataTypeName)) {
			return String.Format("<{0}>", viewDataTypeName);
		}
		return String.Empty;
	}
	
	public IEnumerable<ModelProperty> GetModelProperties()
	{
		var properties = new List<ModelProperty>();
		foreach (PropertyInfo propertyInfo in MvcHost.GetViewDataTypeProperties()) {
			properties.Add(CreateModelProperty(propertyInfo));
		}
		return properties;
	}
	
	ModelProperty CreateModelProperty(PropertyInfo propertyInfo)
	{
		return new ModelProperty() { Name = propertyInfo.Name };
	}
#>