<#@ template language="C#" HostSpecific="true" #>
<#@ import namespace="ICSharpCode.AspNet.Mvc" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<# if (MvcHost.IsPartialView) { #>
<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<IEnumerable<#= GetViewPageType() #>>" %>

<# } else if (MvcHost.IsContentPage) { #>
<%@ Page Language="C#" MasterPageFile="<#= MvcHost.MasterPageFile #>" Inherits="System.Web.Mvc.ViewPage<IEnumerable<#= GetViewPageType() #>>" %>

<asp:Content ID="Content1" ContentPlaceHolderID="Title" runat="server">
<#= MvcHost.ViewName #>
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="<#= MvcHost.PrimaryContentPlaceHolderID #>" runat="server">
<#
		PushIndent("\t");
	} else {
#>
<%@ Page Language="C#" Inherits="System.Web.Mvc.ViewPage<IEnumerable<#= GetViewPageType() #>>" %>

<!DOCTYPE html>
<html>
	<head runat="server">
		<title><#= MvcHost.ViewName #></title>
	</head>
	<body>
<# 
		PushIndent("\t\t");
	} 
#>
<p>
	<%: Html.ActionLink("Create", "Create") %>
</p>
<table>
<#
	if (ModelHasProperties) {
#>
	<tr>
<#
		foreach (ModelProperty modelProperty in ModelProperties) {
#>
		<th>
			<%: Html.LabelFor(model => model.<#= modelProperty.Name #>) %>
		</th>
<#
		}
#>
		<th></th>
	</tr>
	
<#
	} 
#>
<% foreach (var item in Model) { %>
	<tr>
<#
	if (ModelHasProperties) {
		foreach (ModelProperty modelProperty in ModelProperties) {
#>
		<td>
			<%: Html.DisplayFor(model => model.<#= modelProperty.Name #>) %>
		</td>
<#
		}
	}
#>
		<td>
			<%: Html.ActionLink("Edit", "Edit") %> |
			<%: Html.ActionLink("Details", "Details") %> |
			<%: Html.ActionLink("Delete", "Delete") %>
		</td>
	</tr>
<% } %>
</table>
<#
	if (MvcHost.IsPartialView) {
		// Do nothing.
	} else if (MvcHost.IsContentPage) {
		PopIndent();
#>
</asp:Content>
<#
	} else { 
		PopIndent();
#>
	</body>
</html>
<# } #>
<#+
	MvcTextTemplateHost MvcHost {
		get { return (MvcTextTemplateHost)Host; }
	}
	
	public class ModelProperty
	{
		public string Name { get; set; }
	}
	
	public string GetViewPageType()
	{
		string viewDataTypeName = MvcHost.ViewDataTypeName;
		if (!String.IsNullOrEmpty(viewDataTypeName)) {
			return String.Format("<{0}>", viewDataTypeName);
		}
		return String.Empty;
	}
	
	List<ModelProperty> modelProperties;
	
	List<ModelProperty> ModelProperties {
		get {
			if (modelProperties == null) {
				modelProperties = new List<ModelProperty>(GetModelProperties());
			}
			return modelProperties;
		}
	}
	
	bool ModelHasProperties {
		get { return ModelProperties.Count > 0; }
	}
	
	public IEnumerable<ModelProperty> GetModelProperties()
	{
		var properties = new List<ModelProperty>();
		foreach (PropertyInfo propertyInfo in MvcHost.GetViewDataTypeProperties()) {
			properties.Add(CreateModelProperty(propertyInfo));
		}
		return properties;
	}
	
	ModelProperty CreateModelProperty(PropertyInfo propertyInfo)
	{
		return new ModelProperty() { Name = propertyInfo.Name };
	}
#>