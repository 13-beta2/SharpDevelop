<AddIn name        = "C# Binding"
       author      = "Mike Krueger"
       copyright   = "prj:///doc/copyright.txt"
       description = "Backing binding for C#"
       addInManagerHidden = "preinstalled">
	
	<Manifest>
		<Identity name = "ICSharpCode.CSharpBinding"/>
		<!-- The AvalonEdit dependency is necessary for the context action option page -->
		<Dependency addin = "ICSharpCode.AvalonEdit" />
	</Manifest>
	
	<Runtime>
		<Import assembly = "CSharpBinding.dll">
			<Doozer name="CSharpCodeActionProvider" class="CSharpBinding.Refactoring.CSharpCodeActionProviderDoozer"/>
		</Import>
		<Import assembly = ":ICSharpCode.SharpDevelop"/>
		<Import assembly = ":ICSharpCode.NRefactory.CSharp"/>
	</Runtime>
	
	<Path name = "/SharpDevelop/Workbench/Ambiences">
		<Class id    = "C#"
		       class = "ICSharpCode.SharpDevelop.CSharpAmbience"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions/Convert">
		<Condition name = "ProjectActive" activeproject="VBNet">
			<MenuItem id = "VBToCSharpConverter"
			          label = "${res:ICSharpCode.SharpDevelop.Commands.VBConvertProjectToCSharp}"
			          class = "CSharpBinding.VBNetToCSharpConverter"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/MSBuildEngine/CompileTaskNames">
		<!-- Makes SharpDevelop show the text 'Compiling ProjectName...' when the task is started -->
		<String id="csc" text = "csc"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/FileFilter">
		<FileFilter id = "C#"
		            insertbefore="AllFiles"
		            name = "${res:SharpDevelop.FileFilter.CSharpFiles}"
		            extensions = "*.cs"
		            mimeType = "text/plain"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/Combine/FileFilter">
		<FileFilter id         = "CSharpProject"
		            insertbefore="AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.CSharpPrjFiles} (*.csproj)"
		            class      = "ICSharpCode.SharpDevelop.Project.LoadProject"
		            extensions = "*.csproj"/>
	</Path>
	
	<Path name = "/Workspace/Parser">
		<Parser id    = "C#"
		        supportedextensions  = ".cs"
		        projectfileextension = ".csproj"
		        class = "CSharpBinding.Parser.TParser"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/TextEditor/CodeCompletion">
		<CodeCompletionBinding id = "CSharp" extensions = ".cs" class = "CSharpBinding.Completion.CSharpCompletionBinding"/>
	</Path>
	
	<Path name="/SharpDevelop/Workbench/LanguageBindings">
		<LanguageBinding
			id="CSharp"
			class="CSharpBinding.CSharpLanguageBinding"
			extensions=".cs" />
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/AvalonEdit/SyntaxModes">
		<SyntaxMode id="C#" name="C#" extensions=".cs" resource="CSharpBinding.Resources.CSharp-Semantic.xshd" />
	</Path>
	
	<Path path = "/SharpDevelop/BackendBindings/ProjectOptions/C#">
		<OptionPanel id    = "Application"
		             label = "${res:Dialog.ProjectOptions.ApplicationSettings}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ApplicationSettings"/>
		<OptionPanel id    = "ReferencePaths"
		             label = "${res:Dialog.ProjectOptions.ReferencePaths}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ReferencePaths"/>
		<OptionPanel id    = "Signing"
		             label = "${res:Dialog.ProjectOptions.Signing}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.Signing"/>
		<OptionPanel id    = "BuildEvents"
		             label = "${res:Dialog.ProjectOptions.BuildEvents}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.BuildEvents"/>
		<OptionPanel id    = "BuildOptions"
		             label = "${res:Dialog.ProjectOptions.BuildOptions}"
		             class = "CSharpBinding.OptionPanels.BuildOptions"/>
		<OptionPanel id    = "DebugOptions"
		             label = "${res:Dialog.ProjectOptions.DebugOptions}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.DebugOptions"/>
		<!--<OptionPanel id    = "Publish"
		             label = "${res:Dialog.ProjectOptions.Publish}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.Publish"/>-->
		<Include id = "AllManaged" path="/SharpDevelop/BackendBindings/ProjectOptions/AllManaged"/>
	</Path>
	
	<Path name = "/Workspace/Icons">
		<!-- C# -->
		<Icon id         = "C#Prj"
		      language   = "C#"
		      resource   = "C#.ProjectIcon"/>
		
		<Icon id         = "C#File"
		      extensions = ".cs"
		      resource   = "C#.FileIcon"/>
	</Path>
	
	<Path path = "/SharpDevelop/Workbench/ProjectBindings">
		<ProjectBinding id                   = "C#"
		                guid                 = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"
		                supportedextensions  = ".cs"
		                projectfileextension = ".csproj"
		                class                = "CSharpBinding.CSharpProjectBinding" />
	</Path>
	
	<Path path = "/SharpDevelop/Dialogs/OptionsDialog/CodingOptions">
		<OptionPanel id    = "C#"
		             insertafter = "Highlighting"
		             label = "C#">
			<OptionPanel id="Issues"
			             label="Code inspection"
			             class="CSharpBinding.Refactoring.IssueOptions"/>
			<ContextActionOptionPanel id="ContextActions" path="/SharpDevelop/ViewContent/TextEditor/C#/ContextActions"/>
		</OptionPanel>
	</Path>
	
	<Path path = "/SharpDevelop/ViewContent/TextEditor/C#/IssueProviders">
		<Class id    = "ConditionalToNullCoalescingInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConditionalToNullCoalescingInspector" />
		<Class id    = "NotImplementedExceptionInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.NotImplementedExceptionInspector" />
		<Class id    = "RedundantInternalInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantInternalInspector" />
		<Class id    = "RedundantNamespaceUsageInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantNamespaceUsageInspector" />
		<Class id    = "RedundantPrivateInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantPrivateInspector" />
		<Class id    = "RedundantThisInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantThisInspector" />
		<Class id    = "RedundantUsingInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantUsingInspector" />
		<Class id    = "StringIsNullOrEmptyInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.StringIsNullOrEmptyInspector" />
		<Class id    = "UseVarKeywordInspector"
		       class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseVarKeywordInspector" />
	</Path>
	
	<Path path = "/SharpDevelop/ViewContent/TextEditor/C#/ContextActions">
		<!-- In this path, you can add SD context action providers using <Class>,
		     or you can add NR5 code action providers using <CSharpCodeActionProvider> -->
		<CSharpCodeActionProvider id = "AddAnotherAccessor"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.AddAnotherAccessor" />
		<CSharpCodeActionProvider id = "CheckIfParameterIsNull"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.CheckIfParameterIsNull" />
		<CSharpCodeActionProvider id = "ConvertDecToHex"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertDecToHex" />
		<CSharpCodeActionProvider id = "ConvertHexToDec"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertHexToDec" />
		<CSharpCodeActionProvider id = "ConvertForeachToFor"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertForeachToFor" />
		<CSharpCodeActionProvider id = "CreateBackingStore"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateBackingStore" />
		<CSharpCodeActionProvider id = "CreateEventInvocator"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateEventInvocator" />
		<CSharpCodeActionProvider id = "CreateField"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateField" />
		<CSharpCodeActionProvider id = "CreateLocalVariable"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateLocalVariable" />
		<CSharpCodeActionProvider id = "CreateProperty"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateProperty" />
		<CSharpCodeActionProvider id = "FlipOperatorArguments"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.FlipOperatorArguments" />
		<CSharpCodeActionProvider id = "GenerateGetter"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.GenerateGetter" />
		<CSharpCodeActionProvider id = "GenerateProperty"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.GenerateProperty" />
		<CSharpCodeActionProvider id = "GenerateSwitchLabels"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.GenerateSwitchLabels" />
		<CSharpCodeActionProvider id = "InsertAnonymousMethodSignature"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.InsertAnonymousMethodSignature" />
		<CSharpCodeActionProvider id = "IntroduceFormatItem"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.IntroduceFormatItem" />
		<CSharpCodeActionProvider id = "InvertIf"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.InvertIf" />
		<CSharpCodeActionProvider id = "RemoveBackingStore"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveBackingStore" />
		<CSharpCodeActionProvider id = "RemoveBraces"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveBraces" />
		<CSharpCodeActionProvider id = "RemoveRegion"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveRegion" />
		<CSharpCodeActionProvider id = "ReplaceEmptyString"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.ReplaceEmptyString" />
		<CSharpCodeActionProvider id = "SplitDeclarationAndAssignment"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.SplitDeclarationAndAssignment" />
		<CSharpCodeActionProvider id = "SplitString"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.SplitString" />
		<CSharpCodeActionProvider id = "UseExplicitType"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseExplicitType" />
		<CSharpCodeActionProvider id = "UseVarKeyword"
			class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseVarKeyword" />
	</Path>
</AddIn>
