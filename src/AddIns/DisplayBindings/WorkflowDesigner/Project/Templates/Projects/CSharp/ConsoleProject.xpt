<?xml version="1.0"?>
<Template author="Russell Wilkins">
	<!-- Template Header -->
	<TemplateConfiguration>
		<Name>Sequential workflow console project</Name>
		<Category>Workflow</Category>
		<Subcategory>C#</Subcategory>
		<Icon>C#.Project.EmptyProject</Icon>
		<Description>A project for creating a sequential workflow console application</Description>
		  
	</TemplateConfiguration>
	
	<Actions>
		<Open filename="Main.cs" />
	</Actions>
	
	<Project language="C#">
		<Imports>
			<Import Project="$(MSBuildExtensionsPath)\Microsoft\Windows Workflow Foundation\v3.0\Workflow.Targets" />
		</Imports>
		<ProjectItems>
			<Reference Include="System" />
			<Reference Include="System.Xml" />
			<Reference Include="System.Workflow.Activities" />
			<Reference Include="System.Workflow.ComponentModel" />
			<Reference Include="System.Workflow.Runtime" />
		</ProjectItems>
		
		
		<Files>
			<!-- Main -->
			<File name="Main.cs">
				<![CDATA[${StandardHeader.C#}
using System;
using System.Threading;
using System.Workflow.Runtime;
using System.Workflow.Runtime.Hosting;

namespace ${StandardNamespace}
{
	class MainClass
	{
		public static void Main(string[] args)
		{
            using(WorkflowRuntime workflowRuntime = new WorkflowRuntime()) {

                AutoResetEvent waitEvent = new AutoResetEvent(false);

                workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e) {
					waitEvent.Set();
				};

                workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e) {
                    Console.WriteLine(e.Exception.Message);
                    waitEvent.Set();
                };

                WorkflowInstance workflowInstance = workflowRuntime.CreateWorkflow(typeof(${StandardNamespace}.Workflow1));
                workflowInstance.Start();

                waitEvent.WaitOne();
            }            
		}
	}
}]]>
			</File>
			
			<!-- Assembly -->
			<File name="Configuration\AssemblyInfo.cs">
				<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// Information about this assembly is defined by the following
// attributes.
//
// change them to the information which is associated with the assembly
// you compile.

[assembly: AssemblyTitle("${ProjectName}")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("${ProjectName}")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// This sets the default COM visibility of types in the assembly to invisible.
// If you need to expose a type to COM, use [ComVisible(true)] on that type.
[assembly: ComVisible(false)]

// The assembly version has following format :
//
// Major.Minor.Build.Revision
//
// You can specify all values by your own or you can build default build and revision
// numbers with the '*' character (the default):

[assembly: AssemblyVersion("1.0.0.0")]

]]>
			</File>
			
			<!-- Workflow Code -->
			<File name="Workflows\Workflow1.xoml.cs" DependentUpon="Workflow1.xoml" language="C#">
				<![CDATA[${StandardHeader.C#}

using System;
using System.Workflow.Activities;

namespace ${StandardNamespace}
{
	partial class Workflow1 : SequentialWorkflowActivity
	{
	}
}]]>
			</File>
			
			<!-- Workflow -->
			<File name="Workflows\Workflow1.xoml" language="Xoml" buildAction="Content" SubType="Component">
				<![CDATA[<SequentialWorkflowActivity
	x:Class="${StandardNamespace}.Workflow1" 
	x:Name="Workflow1" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow" >
</SequentialWorkflowActivity>
]]>
			</File>
		</Files>
	</Project>
</Template>
