<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AvalonDock</name>
    </assembly>
    <members>
        <member name="T:AvalonDock.IDropSurface">
            <summary>
            Defines an interface that must be implemented by objects that can host dragged panes
            </summary>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDragEnter(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user dragged pane enter this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDragOver(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user dragged pane is over this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDragLeave(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user dragged pane leave this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="M:AvalonDock.IDropSurface.OnDrop(System.Windows.Point)">
            <summary>
            Called by <see cref="!:DragPaneService"/> when user drops a pane to this surface
            </summary>
            <param name="point">Location of the mouse</param>
        </member>
        <member name="P:AvalonDock.IDropSurface.IsSurfaceVisible">
            <summary>
            Gets a value indicating if this area is avilable for drop a dockable pane
            </summary>
        </member>
        <member name="P:AvalonDock.IDropSurface.SurfaceRectangle">
            <summary>
            Gets the sensible area for drop a pane
            </summary>
        </member>
        <member name="T:AvalonDock.ContextMenuElement">
            <summary>
            Defines a list of context menu resources
            </summary>
        </member>
        <member name="F:AvalonDock.ContextMenuElement.DockablePane">
            <summary>
            Context menu related to a <see cref="F:AvalonDock.ContextMenuElement.DockablePane"/>
            </summary>
        </member>
        <member name="F:AvalonDock.ContextMenuElement.FloatingWindow">
            <summary>
            Context menu related to a <see cref="F:AvalonDock.ContextMenuElement.FloatingWindow"/>
            </summary>
        </member>
        <member name="T:AvalonDock.WpfApplication">
            <summary>
            Designates a Windows Presentation Foundation application model with added functionalities.
            </summary>
        </member>
        <member name="M:AvalonDock.WpfApplication.DoEvents">
            <summary>
            Processes all UI messages currently in the message queue.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AvalonDock.DockablePaneAnchorTabGroup" -->
        <!-- Badly formed XML comment ignored for member "T:AvalonDock.ResizingPanelSplitter" -->
        <member name="F:AvalonDock.ResizingPanel.OrientationProperty">
            <summary>
            Give access to Orientation attached property
            </summary>
            <remarks>If horizontal oriented children are positioned from left to right and width of each child is computed according to <see cref="!:ResizingWidth"/> attached property value. When vertical oriented children are arranged from top to bottom, according to <see cref="!:ResizingHeight"/> of each child.</remarks>
        </member>
        <member name="M:AvalonDock.ResizingPanel.NextChildIsVisible(System.Int32)">
            <summary>
            Checks if next child starting from a given index is visible.
            </summary>
            <param name="iChild">Starting child index.</param>
            <returns>Returns true if next child is visible.</returns>
            <remarks>This method takes in count the flow <see cref="!:ResizingDirection"/> of the children.</remarks>
        </member>
        <member name="M:AvalonDock.ResizingPanel.PrevChildIsVisible(System.Int32)">
            <summary>
            Checks if previous child starting from a given index is visible.
            </summary>
            <param name="iChild">Starting child index.</param>
            <returns>Returns true if previous child is visible.</returns>
            <remarks>This method takes in count the flow <see cref="!:ResizingDirection"/> of the children.</remarks>
        </member>
        <member name="M:AvalonDock.ResizingPanel.RemoveChild(System.Windows.FrameworkElement)">
            <summary>
            Remove a child from children collection
            </summary>
            <param name="childToRemove"></param>
        </member>
        <member name="M:AvalonDock.ResizingPanel.InsertChildRelativeTo(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Insert a new child element into the children collection.
            </summary>
            <param name="childToInsert">New child element to insert.</param>
            <param name="relativeChild">Child after or before which <see cref="!:childToInsert"/> element must be insert.</param>
            <param name="next">True if new child must be insert after the <see cref="!:relativeChild"/> element. False otherwise.</param>
        </member>
        <member name="P:AvalonDock.ResizingPanel.Orientation">
            <summary>
            Gets or sets the orientation of the panel
            </summary>
            <remarks>If horizontal oriented children are positioned from left to right and width of each child is computed according to <see cref="!:ResizingWidth"/> attached property value. When vertical oriented children are arranged from top to bottom, according to <see cref="!:ResizingHeight"/> of each child.</remarks>
        </member>
        <member name="M:AvalonDock.DockablePane.ToggleAutoHide">
            <summary>
            Show/Hide a flyout window containing this pane
            </summary>
        </member>
        <member name="M:AvalonDock.DockablePane.Close">
            <summary>
            Close current content
            </summary>
        </member>
        <member name="T:AvalonDock.AnchorStyle">
            <summary>
            Anchor types
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Top">
            <summary>
            Top border anchor
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Left">
            <summary>
            Left border anchor
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Bottom">
            <summary>
            Bottom border anchor
            </summary>
        </member>
        <member name="F:AvalonDock.AnchorStyle.Right">
            <summary>
            Right border anchor
            </summary>
        </member>
        <member name="T:AvalonDock.DragPaneServices">
            <summary>
            Provides drag-drop functionalities for dockable panes
            </summary>
        </member>
        <member name="M:AvalonDock.OverlayWindow.OnDragEnter(AvalonDock.OverlayWindowDockingButton,System.Windows.Point)">
            <summary>
            Shows a highlighting rectangle
            </summary>
            <param name="overlayWindowDockingButton"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.OverlayWindow.OnDragLeave(AvalonDock.OverlayWindowDockingButton,System.Windows.Point)">
            <summary>
            Hides the highlighting rectangle
            </summary>
            <param name="overlayWindowDockingButton"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AvalonDock.FlyoutPaneWindow" -->
        <!-- Badly formed XML comment ignored for member "T:AvalonDock.DockingManager" -->
        <member name="M:AvalonDock.DockingManager.Dispose">
            <summary>
            Call this function if you want to deallocate external floating windows, that otherwise are closed when main window is closed.
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.Pane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane to a border
            </summary>
            <param name="paneToAnchor"></param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.Pane,AvalonDock.Pane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane (<see cref="T:AvalonDock.DockablePane"/>) to a border of a docked pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DockablePane,AvalonDock.DocumentPane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane (<see cref="T:AvalonDock.DockablePane"/>) to a border of a document pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DocumentPane,AvalonDock.DocumentPane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a document pane (<see cref="T:AvalonDock.DockablePane"/>) to a border of an other document pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Anchor(AvalonDock.DockablePane,AvalonDock.DockablePane,AvalonDock.AnchorStyle)">
            <summary>
            Anchor a dockable pane (<see cref="T:AvalonDock.DockablePane"/>) to a border of an other dockable pane
            </summary>
            <param name="paneToAnchor">Pane to anchor</param>
            <param name="relativePane">Pane relative</param>
            <param name="anchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.RemovePaneFromTabGroups(AvalonDock.DockablePane)">
            <summary>
            Remove a pane from border tab groups
            </summary>
            <param name="pane">Pane to remove</param>
            <returns>True if pane was removed, false otherwise</returns>
        </member>
        <member name="M:AvalonDock.DockingManager.ToggleAutoHide(AvalonDock.DockablePane)">
            <summary>
            Autohides/redock a dockable pane
            </summary>
            <param name="pane">Pane to auto hide/redock</param>
        </member>
        <member name="M:AvalonDock.DockingManager.UpdateAnchorStyle(AvalonDock.ResizingPanel)">
            <summary>
            Update the <see cref="P:AvalonDock.DockablePane.Anchor"/> property relative to the <see cref="T:AvalonDock.DocumentContent"/> object
            </summary>
            <param name="panel"></param>
            <returns></returns>
            <remarks>Traverse the logical tree starting from root <see cref="T:AvalonDock.ResizingPanel"/> and set property <see cref="P:AvalonDock.DockablePane.Anchor"/> of dockable pane found.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.ForceAnchorStyle(AvalonDock.ResizingPanel,AvalonDock.AnchorStyle)">
            <summary>
            Called by <see cref="M:AvalonDock.DockingManager.UpdateAnchorStyle"/> whene a <see cref="T:AvalonDock.DocumentContent"/> object has been found
            </summary>
            <param name="panel"></param>
            <param name="forcedAnchor"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.Drag(AvalonDock.FloatingWindow,System.Windows.Point,System.Windows.Point)">
            <summary>
            Begins dragging operations
            </summary>
            <param name="floatingWindow">Floating window containing pane which is dragged by user</param>
            <param name="point">Current mouse position</param>
            <param name="offset">Offset to be use to set floating window screen position</param>
            <returns>Retruns True is drag is completed, false otherwise</returns>
        </member>
        <member name="F:AvalonDock.DockingManager._overlayWindow">
            <summary>
            Overlay window which shows docking placeholders
            </summary>
        </member>
        <member name="M:AvalonDock.DockingManager.OnDragEnter(System.Windows.Point)">
            <summary>
            Handles this sourface mouse entering (show current overlay window)
            </summary>
            <param name="point">Current mouse position</param>
        </member>
        <member name="M:AvalonDock.DockingManager.OnDragOver(System.Windows.Point)">
            <summary>
            Handles mouse overing this surface
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.OnDragLeave(System.Windows.Point)">
            <summary>
            Handles mouse leave event during drag (hide overlay window)
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:AvalonDock.DockingManager.OnDrop(System.Windows.Point)">
            <summary>
            Handler drop events
            </summary>
            <param name="point">Current mouse position</param>
            <returns>Returns alwasy false because this surface doesn't support direct drop</returns>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.IO.TextWriter)">
            <summary>
            Save layout as xml to a <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="textWriter">Text writter object which receive the xml text</param>
            <remarks>The writer is not closed.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.IO.Stream)">
            <summary>
            Save layout as xml to generic stream
            </summary>
            <param name="backendStream">Stream receiving the xml string</param>
            <remarks>The stream is not closed</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.String)">
            <summary>
            Save layout as xml text into a file
            </summary>
            <param name="filename">Path to the file</param>
            <remarks>The file is created as new or overwritten is already exist a file with same name.</remarks>
        </member>
        <member name="M:AvalonDock.DockingManager.SaveLayout(System.Xml.XmlWriter)">
            <summary>
            Send layout configuration to a <see cref="T:System.Xml.XmlTextWriter"/> object
            </summary>
            <param name="sw">Object which stores the xml</param>
            <remarks>The writer is not closed.</remarks>
        </member>
        <member name="P:AvalonDock.DockingManager.SurfaceRectangle">
            <summary>
            Returns a rectangle where this surface is active
            </summary>
        </member>
        <member name="P:AvalonDock.DockingManager.OverlayWindow">
            <summary>
            Returns current overlay window
            </summary>
        </member>
        <member name="M:AvalonDock.ManagedContent.SetAsActive">
            <summary>
            Set the content as the active content
            </summary>
            <remarks>After this method returns property <see cref="P:AvalonDock.ManagedContent.IsActiveContent"/> returns true.</remarks>
        </member>
        <member name="P:AvalonDock.ManagedContent.IsActiveContent">
            <summary>
            Returns true if the content is the currently active content.
            </summary>
            <remarks>Use <see cref="M:AvalonDock.ManagedContent.SetAsActive"/> method to set a content as active.</remarks>
        </member>
        <member name="P:AvalonDock.ManagedContent.IsActiveDocument">
            <summary>
            Returns true if the document is the currently active document.
            </summary>
            <remarks>Use <see cref="M:AvalonDock.ManagedContent.SetAsActive"/> method to set a content as active.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AvalonDock.DockablePaneAnchorTab" -->
        <member name="T:AvalonDock.DockableContentState">
            <summary>
            Enumerates all the possible states of <see cref="T:AvalonDock.DockableContent"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.Docked">
            <summary>
            Content is docked to a border of a <see cref="T:AvalonDock.ResizingPanel"/> within as <see cref="T:AvalonDock.DockingManager"/> control
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.AutoHide">
            <summary>
            Content is hosted by a flyout window and is visible only when user move mouse over an anchor thumb located to a <see cref="T:AvalonDock.DockingManager"/> controlo border
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.DockableWindow">
            <summary>
            Content is hosted by a floating window and user can redock is on its <see cref="T:AvalonDock.DockingManager"/> container control
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.FloatingWindow">
            <summary>
            Content is hosted by a floating window that can't be docked to a its <see cref="T:AvalonDock.DockingManager"/> container control
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.Document">
            <summary>
            Content is hosted by <see cref="!:DocmumentContent"/> object
            </summary>
        </member>
        <member name="F:AvalonDock.DockableContentState.Hidden">
            <summary>
            Content is hidden
            </summary>
        </member>
        <member name="T:AvalonDock.DockableStyle">
            <summary>
            Defines how a dockable content can be dragged over a docking manager
            </summary>
            <remarks>This style can be composed with the 'or' operator.</remarks>
        </member>
        <member name="F:AvalonDock.DockableStyle.None">
            <summary>
            Content is not dockable at all
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Document">
            <summary>
            Dockable as document
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.LeftBorder">
            <summary>
            Dockable to the left border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.RightBorder">
            <summary>
            Dockable to the right border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.TopBorder">
            <summary>
            Dockable to the top border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.BottomBorder">
            <summary>
            Dockable to the bottom border of <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Floating">
            <summary>
            A <see cref="T:AvalonDock.DockableContent"/> with this style can be hosted in a <see cref="T:AvalonDock.FloatingWindow"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Single">
            <summary>
            A <see cref="T:AvalonDock.DockableContent"/> with this style can be the only one content in a <see cref="T:AvalonDock.DockablePane"/> pane (NOT YET SUPPORTED)
            </summary>
            <remarks>This style is not compatible with <see cref="F:AvalonDock.DockableStyle.Document"/> style</remarks>
        </member>
        <member name="F:AvalonDock.DockableStyle.AutoHide">
            <summary>
            A <see cref="!:DockableContet"/> with this style can be autohidden.
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.DockableToBorders">
            <summary>
            Dockable only to a border of a <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.Dockable">
            <summary>
            Dockable to a border of a <see cref="T:AvalonDock.DockingManager"/> and into a <see cref="T:AvalonDock.DocumentPane"/>
            </summary>
        </member>
        <member name="F:AvalonDock.DockableStyle.DockableButNotAutoHidden">
            <summary>
            Dockable to a border of a <see cref="T:AvalonDock.DockingManager"/> and into a <see cref="T:AvalonDock.DocumentPane"/> but not in autohidden mode (WinForms controls)
            </summary>
        </member>
        <member name="T:AvalonDock.DockableContentStateAndPosition">
            <summary>
            Represent a state of a dockable content that can be used to restore it after it's hidden
            </summary>
        </member>
        <member name="T:AvalonDock.DockableContent">
            <summary>
            Identifies a content that can be drag over a <see cref="T:AvalonDock.DockingManager"/> control or hosted by a floating window over it (<see cref="T:AvalonDock.FloatingWindow"/>).
            </summary>
        </member>
        <member name="M:AvalonDock.DockableContent.DetachFromContainerPane">
            <summary>
            Remove this content from its parent container pane
            </summary>
            <returns></returns>
        </member>
        <member name="M:AvalonDock.DockableContent.ResetSavedStateAndPosition">
            <summary>
            Reset internal state and position of the content
            </summary>
            <remarks>After a <see cref="T:AvalonDock.DockableContent"/> is hidden AvalonDock save its state and position in order to
            restore it correctly when user wants to reshow it calling <see cref="M:AvalonDock.DockingManager.Show(AvalonDock.ManagedContent)"/> function. Call this method
            if you want to reset these data and provide your state and anchor style calling one of the overloads of the function
            <see cref="M:AvalonDock.DockingManager.Show(AvalonDock.ManagedContent)"/>.</remarks>
        </member>
        <member name="M:AvalonDock.DockableContent.SaveLayout(System.Xml.XmlWriter)">
            <summary>
            Save content specific layout settings
            </summary>
            <param name="storeWriter">Backend store writer</param>
            <remarks>Custom derived class can overloads this method to handle custom layout persistence</remarks>
        </member>
        <member name="M:AvalonDock.DockableContent.RestoreLayout(System.Xml.XmlElement)">
            <summary>
            Restore content specific layout settings
            </summary>
            <param name="storeReader">Saved xml element containg content layout settings</param>
            <remarks>Custom derived class must overload this method to restore custom layout settings previously saved trought <see cref="M:AvalonDock.DockableContent.SaveLayout(System.Xml.XmlWriter)"/></remarks>
        </member>
        <member name="P:AvalonDock.DockableContent.DockableStyle">
            <summary>
            Get or sets a value that indicates how a dockable content can be dragged over and docked to a <see cref="T:AvalonDock.DockingManager"/>
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Ovveride this method to handle <see cref="M:AvalonDock.DocumentContent.OnClosing(System.ComponentModel.CancelEventArgs)"/> event.
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.OnClosed">
            <summary>
            Ovveride this method to handle <see cref="!:DocumentContent.OnClose"/> event.
            </summary>
        </member>
        <member name="M:AvalonDock.DocumentContent.Close">
            <summary>
            Close this document removing it from its parent container
            </summary>
            <remarks>Use this function to close a document and remove it from its parent container. Please note
            that if simply remove it from its parent <see cref="T:AvalonDock.DocumentPane"/> without call this method, events like
            <see cref="M:AvalonDock.DocumentContent.OnClosing(System.ComponentModel.CancelEventArgs)"/>/<see cref="M:AvalonDock.DocumentContent.OnClosed"/> are not called.
            <para>
            Note:<see cref="T:AvalonDock.DockableContent"/> cannot be closed: AvalonDock simply hide a <see cref="T:AvalonDock.DockableContent"/> removing all the reference to it.
            </para>
            </remarks>
        </member>
        <member name="P:AvalonDock.DocumentContent.InfoTip">
            <summary>
            Gets or sets the information text attached to the document content.
            </summary>
            <remarks>This text is usually displayed when users switch between documents and helps them to choose the right one.</remarks>
        </member>
        <member name="P:AvalonDock.DocumentContent.ContentTypeDescription">
            <summary>
            Gets or sets a text which describes the type of content contained in this document.
            </summary>
        </member>
        <member name="E:AvalonDock.DocumentContent.Closing">
            <summary>
            Event fired when the document is about to be closed
            </summary>
        </member>
        <member name="E:AvalonDock.DocumentContent.Closed">
            <summary>
            Event fired when the document has been closed
            </summary>
            <remarks>Note that when a document is closed property like <see cref="P:AvalonDock.ManagedContent.ContainerPane"/> or <see cref="P:AvalonDock.ManagedContent.Manager"/> returns null.</remarks>
        </member>
        <member name="T:AvalonDock.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AvalonDock.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:AvalonDock.AvalonDockBrushes">
            <summary>
            Defines a list of brushes used by AvalonDock templates
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleBackground">
            <summary>
            Brush used for the title background of a <see cref="T:AvalonDock.DockablePane"/>.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleBackgroundSelected">
            <summary>
            Brush used for the title background of a <see cref="T:AvalonDock.DockablePane"/> when is focused.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleForeground">
            <summary>
            Brush used for the title foreground of a <see cref="T:AvalonDock.DockablePane"/>.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DockablePaneTitleForegroundSelected">
            <summary>
            Brush used for the title foreground of a <see cref="T:AvalonDock.DockablePane"/> when is focused.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.PaneHeaderCommandBackground">
            <summary>
            Brush used for the background of the pane command pins.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.PaneHeaderCommandBorderBrush">
            <summary>
            Brush used for the border of the pane command pins.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackground">
            <summary>
            Brush used for the background of a document header.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderForeground">
            <summary>
            Brush used for the foreground of a document header.
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackgroundSelected">
            <summary>
            Brush used for the background of a document header when active (<see cref="P:AvalonDock.ManagedContent.IsActiveDocument"/>).
            </summary>
        </member>
        <member name="F:AvalonDock.AvalonDockBrushes.DocumentHeaderBackgroundMouseOver">
            <summary>
            Brush used for the background of a document header when mouse is over it.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
