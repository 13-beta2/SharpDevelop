using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using ICSharpCode.NRefactory.Ast;
using ICSharpCode.NRefactory.Parser.VB;
using ASTAttribute = ICSharpCode.NRefactory.Ast.Attribute;

PUSHCOMPILER ParserHelper

/* START AUTOGENERATED TOKENS SECTION */
TOKENS
	/* ----- terminal classes ----- */
	/* EOF is 0 */
	EOL
	ident
	LiteralString
	LiteralCharacter
	LiteralInteger
	LiteralDouble
	LiteralSingle
	LiteralDecimal
	LiteralDate

	/* ----- special character ----- */
	"="
	":"
	","
	"&"
	"/"
	"\\"
	"."
	"!"
	"-"
	"+"
	"^"
	"?"
	"*"
	"{"
	"}"
	"("
	")"
	">"
	"<"
	"<>"
	">="
	"<="
	"<<"
	">>"
	"+="
	"^="
	"-="
	"*="
	"/="
	"\\="
	"<<="
	">>="
	"&="

	/* ----- keywords ----- */
	"AddHandler"
	"AddressOf"
	"Aggregate"
	"Alias"
	"And"
	"AndAlso"
	"Ansi"
	"As"
	"Ascending"
	"Assembly"
	"Auto"
	"Binary"
	"Boolean"
	"ByRef"
	"By"
	"Byte"
	"ByVal"
	"Call"
	"Case"
	"Catch"
	"CBool"
	"CByte"
	"CChar"
	"CDate"
	"CDbl"
	"CDec"
	"Char"
	"CInt"
	"Class"
	"CLng"
	"CObj"
	"Compare"
	"Const"
	"Continue"
	"CSByte"
	"CShort"
	"CSng"
	"CStr"
	"CType"
	"CUInt"
	"CULng"
	"CUShort"
	"Custom"
	"Date"
	"Decimal"
	"Declare"
	"Default"
	"Delegate"
	"Descending"
	"Dim"
	"DirectCast"
	"Distinct"
	"Do"
	"Double"
	"Each"
	"Else"
	"ElseIf"
	"End"
	"EndIf"
	"Enum"
	"Equals"
	"Erase"
	"Error"
	"Event"
	"Exit"
	"Explicit"
	"False"
	"Finally"
	"For"
	"Friend"
	"From"
	"Function"
	"Get"
	"GetType"
	"Global"
	"GoSub"
	"GoTo"
	"Group"
	"Handles"
	"If"
	"Implements"
	"Imports"
	"In"
	"Infer"
	"Inherits"
	"Integer"
	"Interface"
	"Into"
	"Is"
	"IsNot"
	"Join"
	"Let"
	"Lib"
	"Like"
	"Long"
	"Loop"
	"Me"
	"Mod"
	"Module"
	"MustInherit"
	"MustOverride"
	"MyBase"
	"MyClass"
	"Namespace"
	"Narrowing"
	"New"
	"Next"
	"Not"
	"Nothing"
	"NotInheritable"
	"NotOverridable"
	"Object"
	"Of"
	"Off"
	"On"
	"Operator"
	"Option"
	"Optional"
	"Or"
	"Order"
	"OrElse"
	"Overloads"
	"Overridable"
	"Overrides"
	"ParamArray"
	"Partial"
	"Preserve"
	"Private"
	"Property"
	"Protected"
	"Public"
	"RaiseEvent"
	"ReadOnly"
	"ReDim"
	"Rem"
	"RemoveHandler"
	"Resume"
	"Return"
	"SByte"
	"Select"
	"Set"
	"Shadows"
	"Shared"
	"Short"
	"Single"
	"Skip"
	"Static"
	"Step"
	"Stop"
	"Strict"
	"String"
	"Structure"
	"Sub"
	"SyncLock"
	"Take"
	"Text"
	"Then"
	"Throw"
	"To"
	"True"
	"Try"
	"TryCast"
	"TypeOf"
	"UInteger"
	"ULong"
	"Unicode"
	"Until"
	"UShort"
	"Using"
	"Variant"
	"Wend"
	"When"
	"Where"
	"While"
	"Widening"
	"With"
	"WithEvents"
	"WriteOnly"
	"Xor"
/* END AUTOGENERATED TOKENS SECTION */

PRODUCTIONS
/*------------------------------------------------------------------------*/
ParserHelper =
	(. PushContext(Context.Global); .)
	{ OptionStatement }
	{ ImportsStatement }
	{ AttributeBlock }
	{ NamespaceMemberDeclaration }
	(. PopContext(); .)
.

StatementTerminator = EOL | ":" .

OptionStatement = 
	"Option" { ANY } StatementTerminator
.

ImportsStatement = 
	"Imports" { ANY } StatementTerminator
.

AttributeBlock =
	"<" { ANY } ">" [ EOL ]
.

NamespaceMemberDeclaration =
	NamespaceDeclaration | TypeDeclaration
.

NamespaceDeclaration =
	"Namespace" { ANY } StatementTerminator
	{ NamespaceMemberDeclaration }
	"End" "Namespace" StatementTerminator
.

TypeDeclaration =
	{ AttributeBlock }
	{ TypeModifier }
	"Module" { ANY } StatementTerminator
	(. PushContext(Context.Type); .)
	{ MemberDeclaration }
	"End" "Module" StatementTerminator
	(. PopContext(); .)
.

MemberDeclaration =
	(. PushContext(Context.Member); .)
	(
		SubOrFunctionDeclaration
	)
	(. PopContext(); .)
.

SubOrFunctionDeclaration = 
	{ AttributeBlock } { MemberModifier } ("Sub" | "Function")
	(. PushContext(Context.IdentifierExpected); .) ANY (. PopContext(); .)
	[ "(" [ ParameterList ] ")" ] [ "As" TypeName ] EOL
	[ Block ]
	"End" ("Sub" | "Function") StatementTerminator
.

ParameterList =
	Parameter { "," Parameter }
.

Parameter =
	{ AttributeBlock } { ParameterModifier } Identifier [ "As" TypeName ] [ "=" Expression ] 
.

Block =
	EOL
.

Expression =
	Literal |
	( "(" Expression ")" ) |
	( Identifier [ "(" "Of" TypeName { "," TypeName } ")" ] ) |
	"AddressOf" Expression |
	
.

PrimitiveTypeName = 
	"Byte" |
    "SByte" |
    "UShort" |
    "Short" |
    "UInteger" |
    "Integer" |
    "ULong" |
    "Long" |
	"Single" |
	"Double" |
	"Decimal" |
	"Boolean" |
	"Date" |
	"Char" |
	"String" |
	"Object"
.
	
TypeName = ( "Global" | Identifier | PrimitiveTypeName ) { TypeSuffix } { "." IdentifierOrKeyword { TypeSuffix } } .

TypeSuffix = "(" ( "Of" TypeName { "," TypeName } | { "," /*[ EOL ]*/ } ) ")" .

IdentifierOrKeyword = ANY .

Literal = LiteralString |
	LiteralCharacter |
	LiteralInteger |
	LiteralDouble |
	LiteralSingle |
	LiteralDecimal |
	LiteralDate |
	"True" |
	"False" |
	"Nothing" |
	/* from InstanceExpression */
	"Me" |
	"MyBase" |
	"MyClass"
.

/* This production handles pseudo keywords that are needed in the grammar */
Identifier
	(. PushContext(Context.IdentifierExpected); .)
=
	(
		IdentifierForFieldDeclaration
	|
		"Custom"
	)
	(. PopContext(); .)
.

IdentifierForFieldDeclaration =
	ident
	| "Aggregate"
	| "Ansi"
	| "Ascending"
	| "Assembly"
	| "Auto"
	| "Binary"
	| "By"
	| "Compare"
	| "Descending"
	| "Distinct"
	| "Equals"
	| "Explicit"
	| "From"
	| "Group"
	| "Infer"
	| "Into"
	| "Join"
	| "Off"
	| "Order"
	| "Preserve"
	| "Skip"
	| "Take"
	| "Text"
	| "Unicode"
	| "Until"
	| "Where"
.

AccessModifier =
	"Public" |
	"Friend" |
	"Protected" |
	"Private"
.

TypeModifier =
	AccessModifier |
	"Shadows"
.

MemberModifier =
	AccessModifier |
	"Shadows" |
	"Shared" |
	"Overridable" |
	"NotOverridable" |
	"Overrides" |
	"Overloads" |
	"Partial"
.

ParameterModifier =
	"ByVal" |
	"ByRef" |
    "Optional" |
    "ParamArray"
.


END ParserHelper.

