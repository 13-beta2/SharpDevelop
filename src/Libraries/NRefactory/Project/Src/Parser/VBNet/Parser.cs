
#line  1 "VBNET.ATG" 
using System.Drawing;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using ICSharpCode.NRefactory.Parser.AST;
using ICSharpCode.NRefactory.Parser.VB;
using ASTAttribute = ICSharpCode.NRefactory.Parser.AST.Attribute;
/*
  Parser.frame file for NRefactory.
 */
using System;
using System.Reflection;

namespace ICSharpCode.NRefactory.Parser.VB {



internal class Parser : AbstractParser
{
	const int maxT = 200;

	const  bool   T            = true;
	const  bool   x            = false;
	

#line  12 "VBNET.ATG" 
private string assemblyName = null;
private Stack withStatements;
private StringBuilder qualidentBuilder = new StringBuilder();

public string ContainingAssembly
{
	set { assemblyName = value; }
}
Token t
{
	get {
		return lexer.Token;
	}
}
Token la
{
	get {
		return lexer.LookAhead;
	}
}

/* Return the n-th token after the current lookahead token */
void StartPeek()
{
	lexer.StartPeek();
}

Token Peek()
{
	return lexer.Peek();
}

Token Peek (int n)
{
	lexer.StartPeek();
	Token x = la;
	while (n > 0) {
		x = lexer.Peek();
		n--;
	}
	return x;
}

public void Error(string s)
{
	if (errDist >= minErrDist) {
		errors.Error(la.line, la.col, s);
	}
	errDist = 0;
}

public override Expression ParseExpression()
{
	Expression expr;
	Expr(out expr);
	return expr;
}

bool LeaveBlock()
{
  int peek = Peek(1).kind;
  return Tokens.BlockSucc[la.kind] && (la.kind != Tokens.End || peek == Tokens.EOL || peek == Tokens.Colon);
}

/* True, if "." is followed by an ident */
bool DotAndIdentOrKw () {
	int peek = Peek(1).kind;
	return la.kind == Tokens.Dot && (peek == Tokens.Identifier || peek >= Tokens.AddHandler);
}

bool IsEndStmtAhead()
{
	int peek = Peek(1).kind;
	return la.kind == Tokens.End && (peek == Tokens.EOL || peek == Tokens.Colon);
}

bool IsNotClosingParenthesis() {
	return la.kind != Tokens.CloseParenthesis;
}

/*
	True, if ident is followed by "="
*/
bool IdentAndAsgn () {
	if(la.kind == Tokens.Identifier) {
		if(Peek(1).kind == Tokens.Assign) return true;
		if(Peek(1).kind == Tokens.Colon && Peek(2).kind == Tokens.Assign) return true;
	}
	return false;
}

/*
	True, if ident is followed by "=" or by ":" and "="
*/
bool IsNamedAssign() {
//	if(Peek(1).kind == Tokens.Assign) return true; // removed: not in the lang spec
	if(Peek(1).kind == Tokens.Colon && Peek(2).kind == Tokens.Assign) return true;
	return false;
}

bool IsObjectCreation() {
	return la.kind == Tokens.As && Peek(1).kind == Tokens.New;
}

/*
	True, if "<" is followed by the ident "assembly" or "module"
*/
bool IsGlobalAttrTarget () {
	Token pt = Peek(1);
	return la.kind == Tokens.LessThan && ( pt.val.ToLower() == "assembly" || pt.val.ToLower() == "module");
}

/*
	True if the next token is a "(" and is followed by "," or ")"
*/
bool IsDims()
{
	int peek = Peek(1).kind;
	return la.kind == Tokens.OpenParenthesis
						&& (peek == Tokens.Comma || peek == Tokens.CloseParenthesis);
}

bool IsSize()
{
	return la.kind == Tokens.OpenParenthesis;
}

/*
	True, if the comma is not a trailing one,
	like the last one in: a, b, c,
*/
bool NotFinalComma() {
	int peek = Peek(1).kind;
	return la.kind == Tokens.Comma &&
		   peek != Tokens.CloseCurlyBrace;
}

/*
	True, if the next token is "Else" and this one
	if followed by "If"
*/
bool IsElseIf()
{
	int peek = Peek(1).kind;
	return la.kind == Tokens.Else && peek == Tokens.If;
}

/*
	True if the next token is goto and this one is
	followed by minus ("-") (this is allowd in in
	error clauses)
*/
bool IsNegativeLabelName()
{
	int peek = Peek(1).kind;
	return la.kind == Tokens.GoTo && peek == Tokens.Minus;
}

/*
	True if the next statement is a "Resume next" statement
*/
bool IsResumeNext()
{
	int peek = Peek(1).kind;
	return la.kind == Tokens.Resume && peek == Tokens.Next;
}

/*
	True, if ident/literal integer is followed by ":"
*/
bool IsLabel()
{
	return (la.kind == Tokens.Identifier || la.kind == Tokens.LiteralInteger)
			&& Peek(1).kind == Tokens.Colon;
}

bool IsNotStatementSeparator()
{
	return la.kind == Tokens.Colon && Peek(1).kind == Tokens.EOL;
}

bool IsAssignment ()
{
	return IdentAndAsgn();
}

bool IsMustOverride(Modifiers m)
{
	return m.Contains(Modifier.Abstract);
}

/*
	True, if lookahead is a local attribute target specifier,
	i.e. one of "event", "return", "field", "method",
	"module", "param", "property", or "type"
*/
bool IsLocalAttrTarget() {
	// TODO
	return false;
}

/* START AUTOGENERATED TOKENS SECTION */


/*

*/

	void VBNET() {

#line  426 "VBNET.ATG" 
		compilationUnit = new CompilationUnit();
		withStatements = new Stack();
		
		while (la.kind == 1) {
			lexer.NextToken();
		}
		while (la.kind == 135) {
			OptionStmt();
		}
		while (la.kind == 107) {
			ImportsStmt();
		}
		while (
#line  432 "VBNET.ATG" 
IsGlobalAttrTarget()) {
			GlobalAttributeSection();
		}
		while (StartOf(1)) {
			NamespaceMemberDecl();
		}
		Expect(0);
	}

	void OptionStmt() {

#line  437 "VBNET.ATG" 
		INode node = null; bool val = true; 
		Expect(135);

#line  438 "VBNET.ATG" 
		Point startPos = t.Location; 
		if (la.kind == 94) {
			lexer.NextToken();
			if (la.kind == 133 || la.kind == 134) {
				OptionValue(
#line  440 "VBNET.ATG" 
ref val);
			}

#line  441 "VBNET.ATG" 
			node = new OptionDeclaration(OptionType.Explicit, val); 
		} else if (la.kind == 164) {
			lexer.NextToken();
			if (la.kind == 133 || la.kind == 134) {
				OptionValue(
#line  443 "VBNET.ATG" 
ref val);
			}

#line  444 "VBNET.ATG" 
			node = new OptionDeclaration(OptionType.Strict, val); 
		} else if (la.kind == 69) {
			lexer.NextToken();
			if (la.kind == 50) {
				lexer.NextToken();

#line  446 "VBNET.ATG" 
				node = new OptionDeclaration(OptionType.CompareBinary, val); 
			} else if (la.kind == 169) {
				lexer.NextToken();

#line  447 "VBNET.ATG" 
				node = new OptionDeclaration(OptionType.CompareText, val); 
			} else SynErr(201);
		} else SynErr(202);
		EndOfStmt();

#line  452 "VBNET.ATG" 
		node.StartLocation = startPos;
		node.EndLocation   = t.Location;
		compilationUnit.AddChild(node);
		
	}

	void ImportsStmt() {

#line  473 "VBNET.ATG" 
		ArrayList usings = new ArrayList();
		
		Expect(107);

#line  477 "VBNET.ATG" 
		Point startPos = t.Location;
		Using u;
		
		ImportClause(
#line  480 "VBNET.ATG" 
out u);

#line  480 "VBNET.ATG" 
		usings.Add(u); 
		while (la.kind == 12) {
			lexer.NextToken();
			ImportClause(
#line  482 "VBNET.ATG" 
out u);

#line  482 "VBNET.ATG" 
			usings.Add(u); 
		}
		EndOfStmt();

#line  486 "VBNET.ATG" 
		UsingDeclaration usingDeclaration = new UsingDeclaration(usings);
		usingDeclaration.StartLocation = startPos;
		usingDeclaration.EndLocation   = t.Location;
		compilationUnit.AddChild(usingDeclaration);
		
	}

	void GlobalAttributeSection() {

#line  1813 "VBNET.ATG" 
		Point startPos = t.Location; 
		Expect(26);
		if (la.kind == 48) {
			lexer.NextToken();
		} else if (la.kind == 120) {
			lexer.NextToken();
		} else SynErr(203);

#line  1815 "VBNET.ATG" 
		string attributeTarget = t.val.ToLower();
		List<ASTAttribute> attributes = new List<ASTAttribute>();
		ASTAttribute attribute;
		
		Expect(13);
		Attribute(
#line  1819 "VBNET.ATG" 
out attribute);

#line  1819 "VBNET.ATG" 
		attributes.Add(attribute); 
		while (
#line  1820 "VBNET.ATG" 
NotFinalComma()) {
			if (la.kind == 12) {
				lexer.NextToken();
				if (la.kind == 48) {
					lexer.NextToken();
				} else if (la.kind == 120) {
					lexer.NextToken();
				} else SynErr(204);
				Expect(13);
			}
			Attribute(
#line  1820 "VBNET.ATG" 
out attribute);

#line  1820 "VBNET.ATG" 
			attributes.Add(attribute); 
		}
		if (la.kind == 12) {
			lexer.NextToken();
		}
		Expect(25);
		EndOfStmt();

#line  1825 "VBNET.ATG" 
		AttributeSection section = new AttributeSection(attributeTarget, attributes);
		section.StartLocation = startPos;
		section.EndLocation = t.EndLocation;
		compilationUnit.AddChild(section);
		
	}

	void NamespaceMemberDecl() {

#line  515 "VBNET.ATG" 
		Modifiers m = new Modifiers();
		AttributeSection section;List<AttributeSection> attributes = new List<AttributeSection>();
		string qualident;
		
		if (la.kind == 125) {
			lexer.NextToken();

#line  521 "VBNET.ATG" 
			Point startPos = t.Location;
			
			Qualident(
#line  523 "VBNET.ATG" 
out qualident);

#line  525 "VBNET.ATG" 
			INode node =  new NamespaceDeclaration(qualident);
			node.StartLocation = startPos;
			compilationUnit.AddChild(node);
			compilationUnit.BlockStart(node);
			
			Expect(1);
			NamespaceBody();

#line  533 "VBNET.ATG" 
			node.EndLocation = t.Location;
			compilationUnit.BlockEnd();
			
		} else if (StartOf(2)) {
			while (la.kind == 26) {
				AttributeSection(
#line  537 "VBNET.ATG" 
out section);

#line  537 "VBNET.ATG" 
				attributes.Add(section); 
			}
			while (StartOf(3)) {
				TypeModifier(
#line  538 "VBNET.ATG" 
m);
			}
			NonModuleDeclaration(
#line  538 "VBNET.ATG" 
m, attributes);
		} else SynErr(205);
	}

	void OptionValue(
#line  458 "VBNET.ATG" 
ref bool val) {
		if (la.kind == 134) {
			lexer.NextToken();

#line  460 "VBNET.ATG" 
			val = true; 
		} else if (la.kind == 133) {
			lexer.NextToken();

#line  462 "VBNET.ATG" 
			val = false; 
		} else SynErr(206);
	}

	void EndOfStmt() {
		if (la.kind == 1) {
			lexer.NextToken();
		} else if (la.kind == 13) {
			lexer.NextToken();
			if (la.kind == 1) {
				lexer.NextToken();
			}
		} else SynErr(207);
	}

	void ImportClause(
#line  493 "VBNET.ATG" 
out Using u) {

#line  495 "VBNET.ATG" 
		string qualident  = null;
		string aliasident = null;
		u = null;
		
		if (
#line  499 "VBNET.ATG" 
IsAssignment()) {
			Identifier();

#line  499 "VBNET.ATG" 
			aliasident = t.val;  
			Expect(11);
		}
		Qualident(
#line  500 "VBNET.ATG" 
out qualident);

#line  502 "VBNET.ATG" 
		if (qualident != null && qualident.Length > 0) {
		if (aliasident != null) {
			u = new Using(aliasident, qualident);
		} else {
			u = new Using(qualident);
		}
		}
		
	}

	void Identifier() {
		if (la.kind == 2) {
			lexer.NextToken();
		} else if (la.kind == 169) {
			lexer.NextToken();
		} else if (la.kind == 50) {
			lexer.NextToken();
		} else if (la.kind == 69) {
			lexer.NextToken();
		} else SynErr(208);
	}

	void Qualident(
#line  2537 "VBNET.ATG" 
out string qualident) {

#line  2539 "VBNET.ATG" 
		string name;
		qualidentBuilder.Length = 0; 
		
		Identifier();

#line  2543 "VBNET.ATG" 
		qualidentBuilder.Append(t.val); 
		while (
#line  2544 "VBNET.ATG" 
DotAndIdentOrKw()) {
			Expect(10);
			IdentifierOrKeyword(
#line  2544 "VBNET.ATG" 
out name);

#line  2544 "VBNET.ATG" 
			qualidentBuilder.Append('.'); qualidentBuilder.Append(name); 
		}

#line  2546 "VBNET.ATG" 
		qualident = qualidentBuilder.ToString(); 
	}

	void NamespaceBody() {
		while (StartOf(1)) {
			NamespaceMemberDecl();
		}
		Expect(87);
		Expect(125);
		Expect(1);
	}

	void AttributeSection(
#line  1883 "VBNET.ATG" 
out AttributeSection section) {

#line  1885 "VBNET.ATG" 
		string attributeTarget = "";List<ASTAttribute> attributes = new List<ASTAttribute>();
		ASTAttribute attribute;
		
		
		Expect(26);

#line  1889 "VBNET.ATG" 
		Point startPos = t.Location; 
		if (
#line  1890 "VBNET.ATG" 
IsLocalAttrTarget()) {
			if (la.kind == 92) {
				lexer.NextToken();

#line  1891 "VBNET.ATG" 
				attributeTarget = "event";
			} else if (la.kind == 154) {
				lexer.NextToken();

#line  1892 "VBNET.ATG" 
				attributeTarget = "return";
			} else {
				Identifier();

#line  1895 "VBNET.ATG" 
				string val = t.val.ToLower();
				if (val != "field"	|| val != "method" ||
					val != "module" || val != "param"  ||
					val != "property" || val != "type")
				Error("attribute target specifier (event, return, field," +
						"method, module, param, property, or type) expected");
				attributeTarget = t.val;
				
			}
			Expect(13);
		}
		Attribute(
#line  1905 "VBNET.ATG" 
out attribute);

#line  1905 "VBNET.ATG" 
		attributes.Add(attribute); 
		while (
#line  1906 "VBNET.ATG" 
NotFinalComma()) {
			Expect(12);
			Attribute(
#line  1906 "VBNET.ATG" 
out attribute);

#line  1906 "VBNET.ATG" 
			attributes.Add(attribute); 
		}
		if (la.kind == 12) {
			lexer.NextToken();
		}
		Expect(25);

#line  1910 "VBNET.ATG" 
		section = new AttributeSection(attributeTarget, attributes);
		section.StartLocation = startPos;
		section.EndLocation = t.EndLocation;
		
	}

	void TypeModifier(
#line  2746 "VBNET.ATG" 
Modifiers m) {
		switch (la.kind) {
		case 148: {
			lexer.NextToken();

#line  2747 "VBNET.ATG" 
			m.Add(Modifier.Public); 
			break;
		}
		case 147: {
			lexer.NextToken();

#line  2748 "VBNET.ATG" 
			m.Add(Modifier.Protected); 
			break;
		}
		case 98: {
			lexer.NextToken();

#line  2749 "VBNET.ATG" 
			m.Add(Modifier.Internal); 
			break;
		}
		case 145: {
			lexer.NextToken();

#line  2750 "VBNET.ATG" 
			m.Add(Modifier.Private); 
			break;
		}
		case 158: {
			lexer.NextToken();

#line  2751 "VBNET.ATG" 
			m.Add(Modifier.Static); 
			break;
		}
		case 157: {
			lexer.NextToken();

#line  2752 "VBNET.ATG" 
			m.Add(Modifier.New); 
			break;
		}
		case 121: {
			lexer.NextToken();

#line  2753 "VBNET.ATG" 
			m.Add(Modifier.Abstract); 
			break;
		}
		case 130: {
			lexer.NextToken();

#line  2754 "VBNET.ATG" 
			m.Add(Modifier.Sealed); 
			break;
		}
		default: SynErr(209); break;
		}
	}

	void NonModuleDeclaration(
#line  589 "VBNET.ATG" 
Modifiers m, List<AttributeSection> attributes) {

#line  591 "VBNET.ATG" 
		string name = null;
		TypeReference typeRef = null;
		List<TypeReference> baseInterfaces = null;
		
		switch (la.kind) {
		case 66: case 199: {

#line  595 "VBNET.ATG" 
			m.Check(Modifier.Classes); 
			if (la.kind == 199) {
				lexer.NextToken();

#line  597 "VBNET.ATG" 
				m.Add(Modifier.Partial); 
			}
			Expect(66);

#line  599 "VBNET.ATG" 
			TypeDeclaration newType = new TypeDeclaration(m.Modifier, attributes);
								compilationUnit.AddChild(newType);
			compilationUnit.BlockStart(newType);
			
			newType.Type       = Types.Class;
			
			Identifier();

#line  606 "VBNET.ATG" 
			newType.Name = t.val; newType.StartLocation = t.EndLocation; 
			TypeParameterList(
#line  607 "VBNET.ATG" 
newType.Templates);
			EndOfStmt();
			if (la.kind == 109) {
				ClassBaseType(
#line  609 "VBNET.ATG" 
out typeRef);

#line  609 "VBNET.ATG" 
				newType.BaseTypes.Add(typeRef); 
			}
			while (la.kind == 106) {
				TypeImplementsClause(
#line  610 "VBNET.ATG" 
out baseInterfaces);

#line  610 "VBNET.ATG" 
				newType.BaseTypes.AddRange(baseInterfaces); 
			}
			ClassBody(
#line  611 "VBNET.ATG" 
newType);

#line  613 "VBNET.ATG" 
			compilationUnit.BlockEnd();
			
			break;
		}
		case 120: {
			lexer.NextToken();

#line  617 "VBNET.ATG" 
			m.Check(Modifier.VBModules);
			TypeDeclaration newType = new TypeDeclaration(m.Modifier, attributes);
			compilationUnit.AddChild(newType);
			compilationUnit.BlockStart(newType);
			newType.StartLocation = t.Location;
			newType.Type = Types.Module;
			
			Identifier();

#line  624 "VBNET.ATG" 
			newType.Name = t.val; newType.StartLocation = t.EndLocation;  
			Expect(1);
			ModuleBody(
#line  626 "VBNET.ATG" 
newType);

#line  628 "VBNET.ATG" 
			newType.EndLocation = t.Location;
			compilationUnit.BlockEnd();
			
			break;
		}
		case 166: {
			lexer.NextToken();

#line  633 "VBNET.ATG" 
			m.Check(Modifier.VBStructures);
			TypeDeclaration newType = new TypeDeclaration(m.Modifier, attributes);
			compilationUnit.AddChild(newType);
			compilationUnit.BlockStart(newType);
			newType.StartLocation = t.Location;
			newType.Type = Types.Struct;
			
			Identifier();

#line  640 "VBNET.ATG" 
			newType.Name = t.val; newType.StartLocation = t.EndLocation; 
			TypeParameterList(
#line  641 "VBNET.ATG" 
newType.Templates);
			Expect(1);
			while (la.kind == 106) {
				TypeImplementsClause(
#line  642 "VBNET.ATG" 
out baseInterfaces);

#line  642 "VBNET.ATG" 
				newType.BaseTypes.AddRange(baseInterfaces);
			}
			StructureBody(
#line  643 "VBNET.ATG" 
newType);

#line  645 "VBNET.ATG" 
			newType.EndLocation = t.Location;
			compilationUnit.BlockEnd();
			
			break;
		}
		case 89: {
			lexer.NextToken();

#line  651 "VBNET.ATG" 
			m.Check(Modifier.VBEnums);
			TypeDeclaration newType = new TypeDeclaration(m.Modifier, attributes);
			
			compilationUnit.AddChild(newType);
			compilationUnit.BlockStart(newType);
			
			newType.Type = Types.Enum;
			
			Identifier();

#line  659 "VBNET.ATG" 
			newType.Name = t.val; newType.StartLocation = t.EndLocation; 
			if (la.kind == 47) {
				lexer.NextToken();
				PrimitiveTypeName(
#line  660 "VBNET.ATG" 
out name);

#line  660 "VBNET.ATG" 
				newType.BaseTypes.Add(new TypeReference(name)); 
			}
			Expect(1);
			EnumBody(
#line  662 "VBNET.ATG" 
newType);

#line  664 "VBNET.ATG" 
			newType.EndLocation = t.Location;
			compilationUnit.BlockEnd();
			
			break;
		}
		case 111: {
			lexer.NextToken();

#line  670 "VBNET.ATG" 
			m.Check(Modifier.VBInterfacs);
			TypeDeclaration newType = new TypeDeclaration(m.Modifier, attributes);
			compilationUnit.AddChild(newType);
			compilationUnit.BlockStart(newType);
			newType.Type = Types.Interface;
			
			Identifier();

#line  676 "VBNET.ATG" 
			newType.Name = t.val; newType.StartLocation = t.EndLocation; 
			TypeParameterList(
#line  677 "VBNET.ATG" 
newType.Templates);
			EndOfStmt();
			while (la.kind == 109) {
				InterfaceBase(
#line  678 "VBNET.ATG" 
out baseInterfaces);

#line  678 "VBNET.ATG" 
				newType.BaseTypes.AddRange(baseInterfaces); 
			}
			InterfaceBody(
#line  679 "VBNET.ATG" 
newType);

#line  681 "VBNET.ATG" 
			newType.EndLocation = t.Location;
			compilationUnit.BlockEnd();
			
			break;
		}
		case 79: {
			lexer.NextToken();

#line  687 "VBNET.ATG" 
			m.Check(Modifier.VBDelegates);
			DelegateDeclaration delegateDeclr = new DelegateDeclaration(m.Modifier, attributes);
			delegateDeclr.ReturnType = new TypeReference("", "System.Void");
			delegateDeclr.StartLocation = t.Location;
			List<ParameterDeclarationExpression> p = new List<ParameterDeclarationExpression>();
			
			if (la.kind == 167) {
				lexer.NextToken();
				Identifier();

#line  694 "VBNET.ATG" 
				delegateDeclr.Name = t.val; 
				TypeParameterList(
#line  695 "VBNET.ATG" 
delegateDeclr.Templates);
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  696 "VBNET.ATG" 
p);
					}
					Expect(24);

#line  696 "VBNET.ATG" 
					delegateDeclr.Parameters = p; 
				}
			} else if (la.kind == 99) {
				lexer.NextToken();
				Identifier();

#line  698 "VBNET.ATG" 
				delegateDeclr.Name = t.val; 
				TypeParameterList(
#line  699 "VBNET.ATG" 
delegateDeclr.Templates);
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  700 "VBNET.ATG" 
p);
					}
					Expect(24);

#line  700 "VBNET.ATG" 
					delegateDeclr.Parameters = p; 
				}
				if (la.kind == 47) {
					lexer.NextToken();

#line  701 "VBNET.ATG" 
					TypeReference type; 
					TypeName(
#line  701 "VBNET.ATG" 
out type);

#line  701 "VBNET.ATG" 
					delegateDeclr.ReturnType = type; 
				}
			} else SynErr(210);

#line  703 "VBNET.ATG" 
			delegateDeclr.EndLocation = t.EndLocation; 
			Expect(1);

#line  706 "VBNET.ATG" 
			compilationUnit.AddChild(delegateDeclr);
			
			break;
		}
		default: SynErr(211); break;
		}
	}

	void TypeParameterList(
#line  542 "VBNET.ATG" 
List<TemplateDefinition> templates) {

#line  544 "VBNET.ATG" 
		TemplateDefinition template;
		
		if (
#line  547 "VBNET.ATG" 
la.kind == Tokens.OpenParenthesis && Peek(1).kind == Tokens.Of) {
			lexer.NextToken();
			Expect(196);
			TypeParameter(
#line  548 "VBNET.ATG" 
out template);

#line  550 "VBNET.ATG" 
			if (template != null) templates.Add(template);
			
			while (la.kind == 12) {
				lexer.NextToken();
				TypeParameter(
#line  553 "VBNET.ATG" 
out template);

#line  555 "VBNET.ATG" 
				if (template != null) templates.Add(template);
				
			}
			Expect(24);
		}
	}

	void TypeParameter(
#line  563 "VBNET.ATG" 
out TemplateDefinition template) {
		Identifier();

#line  565 "VBNET.ATG" 
		template = new TemplateDefinition(t.val, null); 
		if (la.kind == 47) {
			TypeParameterConstraints(
#line  566 "VBNET.ATG" 
template);
		}
	}

	void TypeParameterConstraints(
#line  570 "VBNET.ATG" 
TemplateDefinition template) {

#line  572 "VBNET.ATG" 
		TypeReference constraint;
		
		Expect(47);
		if (la.kind == 21) {
			lexer.NextToken();
			TypeName(
#line  578 "VBNET.ATG" 
out constraint);

#line  578 "VBNET.ATG" 
			if (constraint != null) { template.Bases.Add(constraint); } 
			while (la.kind == 12) {
				lexer.NextToken();
				TypeName(
#line  581 "VBNET.ATG" 
out constraint);

#line  581 "VBNET.ATG" 
				if (constraint != null) { template.Bases.Add(constraint); } 
			}
			Expect(22);
		} else if (StartOf(5)) {
			TypeName(
#line  584 "VBNET.ATG" 
out constraint);

#line  584 "VBNET.ATG" 
			if (constraint != null) { template.Bases.Add(constraint); } 
		} else SynErr(212);
	}

	void TypeName(
#line  1733 "VBNET.ATG" 
out TypeReference typeref) {

#line  1734 "VBNET.ATG" 
		ArrayList rank = null; typeref = null; 
		NonArrayTypeName(
#line  1736 "VBNET.ATG" 
out typeref);
		ArrayTypeModifiers(
#line  1737 "VBNET.ATG" 
out rank);

#line  1739 "VBNET.ATG" 
		if (rank != null && typeref != null) {
		typeref.RankSpecifier = (int[])rank.ToArray(typeof(int));
		}
		
	}

	void ClassBaseType(
#line  883 "VBNET.ATG" 
out TypeReference typeRef) {

#line  885 "VBNET.ATG" 
		typeRef = null;
		
		Expect(109);
		TypeName(
#line  888 "VBNET.ATG" 
out typeRef);
		EndOfStmt();
	}

	void TypeImplementsClause(
#line  1386 "VBNET.ATG" 
out List<TypeReference> baseInterfaces) {

#line  1388 "VBNET.ATG" 
		baseInterfaces = new List<TypeReference>();
		TypeReference type = null;
		
		Expect(106);
		TypeName(
#line  1391 "VBNET.ATG" 
out type);

#line  1393 "VBNET.ATG" 
		baseInterfaces.Add(type);
		
		while (la.kind == 12) {
			lexer.NextToken();
			TypeName(
#line  1396 "VBNET.ATG" 
out type);

#line  1397 "VBNET.ATG" 
			baseInterfaces.Add(type); 
		}
		EndOfStmt();
	}

	void ClassBody(
#line  716 "VBNET.ATG" 
TypeDeclaration newType) {

#line  717 "VBNET.ATG" 
		AttributeSection section; 
		while (StartOf(6)) {

#line  719 "VBNET.ATG" 
			List<AttributeSection> attributes = new List<AttributeSection>();
			Modifiers m = new Modifiers();
			
			while (la.kind == 26) {
				AttributeSection(
#line  722 "VBNET.ATG" 
out section);

#line  722 "VBNET.ATG" 
				attributes.Add(section); 
			}
			while (StartOf(7)) {
				MemberModifier(
#line  723 "VBNET.ATG" 
m);
			}
			ClassMemberDecl(
#line  724 "VBNET.ATG" 
m, attributes);
		}
		Expect(87);
		Expect(66);

#line  726 "VBNET.ATG" 
		newType.EndLocation = t.EndLocation; 
		Expect(1);
	}

	void ModuleBody(
#line  745 "VBNET.ATG" 
TypeDeclaration newType) {

#line  746 "VBNET.ATG" 
		AttributeSection section; 
		while (StartOf(6)) {

#line  748 "VBNET.ATG" 
			List<AttributeSection> attributes = new List<AttributeSection>();
			Modifiers m = new Modifiers();
			
			while (la.kind == 26) {
				AttributeSection(
#line  751 "VBNET.ATG" 
out section);

#line  751 "VBNET.ATG" 
				attributes.Add(section); 
			}
			while (StartOf(7)) {
				MemberModifier(
#line  752 "VBNET.ATG" 
m);
			}
			ClassMemberDecl(
#line  753 "VBNET.ATG" 
m, attributes);
		}
		Expect(87);
		Expect(120);

#line  755 "VBNET.ATG" 
		newType.EndLocation = t.EndLocation; 
		Expect(1);
	}

	void StructureBody(
#line  730 "VBNET.ATG" 
TypeDeclaration newType) {

#line  731 "VBNET.ATG" 
		AttributeSection section; 
		while (StartOf(6)) {

#line  733 "VBNET.ATG" 
			List<AttributeSection> attributes = new List<AttributeSection>();
			Modifiers m = new Modifiers();
			
			while (la.kind == 26) {
				AttributeSection(
#line  736 "VBNET.ATG" 
out section);

#line  736 "VBNET.ATG" 
				attributes.Add(section); 
			}
			while (StartOf(7)) {
				MemberModifier(
#line  737 "VBNET.ATG" 
m);
			}
			StructureMemberDecl(
#line  738 "VBNET.ATG" 
m, attributes);
		}
		Expect(87);
		Expect(166);

#line  740 "VBNET.ATG" 
		newType.EndLocation = t.EndLocation; 
		Expect(1);
	}

	void PrimitiveTypeName(
#line  2719 "VBNET.ATG" 
out string type) {

#line  2720 "VBNET.ATG" 
		type = String.Empty; 
		switch (la.kind) {
		case 51: {
			lexer.NextToken();

#line  2721 "VBNET.ATG" 
			type = "Boolean"; 
			break;
		}
		case 75: {
			lexer.NextToken();

#line  2722 "VBNET.ATG" 
			type = "Date"; 
			break;
		}
		case 64: {
			lexer.NextToken();

#line  2723 "VBNET.ATG" 
			type = "Char"; 
			break;
		}
		case 165: {
			lexer.NextToken();

#line  2724 "VBNET.ATG" 
			type = "String"; 
			break;
		}
		case 76: {
			lexer.NextToken();

#line  2725 "VBNET.ATG" 
			type = "Decimal"; 
			break;
		}
		case 53: {
			lexer.NextToken();

#line  2726 "VBNET.ATG" 
			type = "Byte"; 
			break;
		}
		case 159: {
			lexer.NextToken();

#line  2727 "VBNET.ATG" 
			type = "Short"; 
			break;
		}
		case 110: {
			lexer.NextToken();

#line  2728 "VBNET.ATG" 
			type = "Integer"; 
			break;
		}
		case 116: {
			lexer.NextToken();

#line  2729 "VBNET.ATG" 
			type = "Long"; 
			break;
		}
		case 160: {
			lexer.NextToken();

#line  2730 "VBNET.ATG" 
			type = "Single"; 
			break;
		}
		case 83: {
			lexer.NextToken();

#line  2731 "VBNET.ATG" 
			type = "Double"; 
			break;
		}
		case 191: {
			lexer.NextToken();

#line  2732 "VBNET.ATG" 
			type = "UInteger"; 
			break;
		}
		case 192: {
			lexer.NextToken();

#line  2733 "VBNET.ATG" 
			type = "ULong"; 
			break;
		}
		case 193: {
			lexer.NextToken();

#line  2734 "VBNET.ATG" 
			type = "UShort"; 
			break;
		}
		case 190: {
			lexer.NextToken();

#line  2735 "VBNET.ATG" 
			type = "SByte"; 
			break;
		}
		default: SynErr(213); break;
		}
	}

	void EnumBody(
#line  759 "VBNET.ATG" 
TypeDeclaration newType) {

#line  760 "VBNET.ATG" 
		FieldDeclaration f; 
		while (StartOf(8)) {
			EnumMemberDecl(
#line  762 "VBNET.ATG" 
out f);

#line  762 "VBNET.ATG" 
			compilationUnit.AddChild(f); 
		}
		Expect(87);
		Expect(89);

#line  764 "VBNET.ATG" 
		newType.EndLocation = t.EndLocation; 
		Expect(1);
	}

	void InterfaceBase(
#line  1371 "VBNET.ATG" 
out List<TypeReference> bases) {

#line  1373 "VBNET.ATG" 
		TypeReference type;
		bases = new List<TypeReference>();
		
		Expect(109);
		TypeName(
#line  1377 "VBNET.ATG" 
out type);

#line  1377 "VBNET.ATG" 
		bases.Add(type); 
		while (la.kind == 12) {
			lexer.NextToken();
			TypeName(
#line  1380 "VBNET.ATG" 
out type);

#line  1380 "VBNET.ATG" 
			bases.Add(type); 
		}
		Expect(1);
	}

	void InterfaceBody(
#line  768 "VBNET.ATG" 
TypeDeclaration newType) {
		while (StartOf(9)) {
			InterfaceMemberDecl();
		}
		Expect(87);
		Expect(111);

#line  770 "VBNET.ATG" 
		newType.EndLocation = t.EndLocation; 
		Expect(1);
	}

	void FormalParameterList(
#line  1917 "VBNET.ATG" 
List<ParameterDeclarationExpression> parameter) {

#line  1919 "VBNET.ATG" 
		ParameterDeclarationExpression p;
		AttributeSection section;
		List<AttributeSection> attributes = new List<AttributeSection>();
		
		while (la.kind == 26) {
			AttributeSection(
#line  1923 "VBNET.ATG" 
out section);

#line  1923 "VBNET.ATG" 
			attributes.Add(section); 
		}
		FormalParameter(
#line  1925 "VBNET.ATG" 
out p);

#line  1927 "VBNET.ATG" 
		bool paramsFound = false;
		p.Attributes = attributes;
		parameter.Add(p);
		
		while (la.kind == 12) {
			lexer.NextToken();

#line  1932 "VBNET.ATG" 
			if (paramsFound) Error("params array must be at end of parameter list"); 
			while (la.kind == 26) {
				AttributeSection(
#line  1933 "VBNET.ATG" 
out section);

#line  1933 "VBNET.ATG" 
				attributes.Add(section); 
			}
			FormalParameter(
#line  1935 "VBNET.ATG" 
out p);

#line  1935 "VBNET.ATG" 
			p.Attributes = attributes; parameter.Add(p); 
		}
	}

	void MemberModifier(
#line  2757 "VBNET.ATG" 
Modifiers m) {
		switch (la.kind) {
		case 121: {
			lexer.NextToken();

#line  2758 "VBNET.ATG" 
			m.Add(Modifier.Abstract);
			break;
		}
		case 78: {
			lexer.NextToken();

#line  2759 "VBNET.ATG" 
			m.Add(Modifier.Default);
			break;
		}
		case 98: {
			lexer.NextToken();

#line  2760 "VBNET.ATG" 
			m.Add(Modifier.Internal);
			break;
		}
		case 157: {
			lexer.NextToken();

#line  2761 "VBNET.ATG" 
			m.Add(Modifier.New);
			break;
		}
		case 142: {
			lexer.NextToken();

#line  2762 "VBNET.ATG" 
			m.Add(Modifier.Override);
			break;
		}
		case 122: {
			lexer.NextToken();

#line  2763 "VBNET.ATG" 
			m.Add(Modifier.Abstract);
			break;
		}
		case 145: {
			lexer.NextToken();

#line  2764 "VBNET.ATG" 
			m.Add(Modifier.Private);
			break;
		}
		case 147: {
			lexer.NextToken();

#line  2765 "VBNET.ATG" 
			m.Add(Modifier.Protected);
			break;
		}
		case 148: {
			lexer.NextToken();

#line  2766 "VBNET.ATG" 
			m.Add(Modifier.Public);
			break;
		}
		case 130: {
			lexer.NextToken();

#line  2767 "VBNET.ATG" 
			m.Add(Modifier.Sealed);
			break;
		}
		case 131: {
			lexer.NextToken();

#line  2768 "VBNET.ATG" 
			m.Add(Modifier.Sealed);
			break;
		}
		case 158: {
			lexer.NextToken();

#line  2769 "VBNET.ATG" 
			m.Add(Modifier.Static);
			break;
		}
		case 140: {
			lexer.NextToken();

#line  2770 "VBNET.ATG" 
			m.Add(Modifier.Virtual);
			break;
		}
		case 139: {
			lexer.NextToken();

#line  2771 "VBNET.ATG" 
			m.Add(Modifier.Overloads);
			break;
		}
		case 150: {
			lexer.NextToken();

#line  2772 "VBNET.ATG" 
			
			break;
		}
		case 184: {
			lexer.NextToken();

#line  2773 "VBNET.ATG" 
			
			break;
		}
		case 183: {
			lexer.NextToken();

#line  2774 "VBNET.ATG" 
			m.Add(Modifier.WithEvents);
			break;
		}
		case 80: {
			lexer.NextToken();

#line  2775 "VBNET.ATG" 
			m.Add(Modifier.Dim);
			break;
		}
		default: SynErr(214); break;
		}
	}

	void ClassMemberDecl(
#line  879 "VBNET.ATG" 
Modifiers m, List<AttributeSection> attributes) {
		StructureMemberDecl(
#line  880 "VBNET.ATG" 
m, attributes);
	}

	void StructureMemberDecl(
#line  893 "VBNET.ATG" 
Modifiers m, List<AttributeSection> attributes) {

#line  895 "VBNET.ATG" 
		TypeReference type = null;
		List<ParameterDeclarationExpression> p = new List<ParameterDeclarationExpression>();
		Statement stmt = null;
		List<VariableDeclaration> variableDeclarators = new List<VariableDeclaration>();
		List<TemplateDefinition> templates = new List<TemplateDefinition>();
		
		switch (la.kind) {
		case 66: case 79: case 89: case 111: case 120: case 166: case 199: {
			NonModuleDeclaration(
#line  901 "VBNET.ATG" 
m, attributes);
			break;
		}
		case 167: {
			lexer.NextToken();

#line  905 "VBNET.ATG" 
			Point startPos = t.Location;
			
			if (StartOf(10)) {

#line  909 "VBNET.ATG" 
				string name = String.Empty;
				MethodDeclaration methodDeclaration; ArrayList handlesClause = null; ArrayList implementsClause = null;
				
				Identifier();

#line  914 "VBNET.ATG" 
				name = t.val;
				m.Check(Modifier.VBMethods);
				
				TypeParameterList(
#line  917 "VBNET.ATG" 
templates);
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  918 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				if (la.kind == 104 || la.kind == 106) {
					if (la.kind == 106) {
						ImplementsClause(
#line  921 "VBNET.ATG" 
out implementsClause);
					} else {
						HandlesClause(
#line  923 "VBNET.ATG" 
out handlesClause);
					}
				}

#line  926 "VBNET.ATG" 
				Point endLocation = t.EndLocation; 
				Expect(1);
				if (
#line  930 "VBNET.ATG" 
IsMustOverride(m)) {

#line  932 "VBNET.ATG" 
					methodDeclaration = new MethodDeclaration(name, m.Modifier,  null, p, attributes);
					methodDeclaration.StartLocation = startPos;
					methodDeclaration.EndLocation   = endLocation;
					methodDeclaration.TypeReference = new TypeReference("", "System.Void");
					
					methodDeclaration.Templates = templates;
					methodDeclaration.HandlesClause = handlesClause;
					methodDeclaration.ImplementsClause = implementsClause;
					
					compilationUnit.AddChild(methodDeclaration);
					
				} else if (StartOf(11)) {

#line  945 "VBNET.ATG" 
					methodDeclaration = new MethodDeclaration(name, m.Modifier,  null, p, attributes);
					methodDeclaration.StartLocation = startPos;
					methodDeclaration.EndLocation   = endLocation;
					methodDeclaration.TypeReference = new TypeReference("", "System.Void");
					
					methodDeclaration.Templates = templates;
					methodDeclaration.HandlesClause = handlesClause;
					methodDeclaration.ImplementsClause = implementsClause;
					
					compilationUnit.AddChild(methodDeclaration);
					compilationUnit.BlockStart(methodDeclaration);
					
					Block(
#line  957 "VBNET.ATG" 
out stmt);

#line  959 "VBNET.ATG" 
					compilationUnit.BlockEnd();
					methodDeclaration.Body  = (BlockStatement)stmt;
					
					Expect(87);
					Expect(167);

#line  962 "VBNET.ATG" 
					methodDeclaration.Body.EndLocation = t.EndLocation; 
					Expect(1);
				} else SynErr(215);
			} else if (la.kind == 126) {
				lexer.NextToken();
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  965 "VBNET.ATG" 
p);
					}
					Expect(24);
				}

#line  966 "VBNET.ATG" 
				m.Check(Modifier.Constructors); 

#line  967 "VBNET.ATG" 
				Point constructorEndLocation = t.EndLocation; 
				Expect(1);
				Block(
#line  969 "VBNET.ATG" 
out stmt);
				Expect(87);
				Expect(167);

#line  970 "VBNET.ATG" 
				Point endLocation = t.EndLocation; 
				Expect(1);

#line  972 "VBNET.ATG" 
				ConstructorDeclaration cd = new ConstructorDeclaration("New", m.Modifier, p, attributes); 
				cd.StartLocation = startPos;
				cd.EndLocation   = constructorEndLocation;
				cd.Body = (BlockStatement)stmt;
				cd.Body.EndLocation   = endLocation;
				compilationUnit.AddChild(cd);
				
			} else SynErr(216);
			break;
		}
		case 99: {
			lexer.NextToken();

#line  984 "VBNET.ATG" 
			m.Check(Modifier.VBMethods);
			string name = String.Empty;
			Point startPos = t.Location;
			MethodDeclaration methodDeclaration;ArrayList handlesClause = null;ArrayList implementsClause = null;
			AttributeSection returnTypeAttributeSection = null;
			
			Identifier();

#line  990 "VBNET.ATG" 
			name = t.val; 
			TypeParameterList(
#line  991 "VBNET.ATG" 
templates);
			if (la.kind == 23) {
				lexer.NextToken();
				if (StartOf(4)) {
					FormalParameterList(
#line  992 "VBNET.ATG" 
p);
				}
				Expect(24);
			}
			if (la.kind == 47) {
				lexer.NextToken();
				while (la.kind == 26) {
					AttributeSection(
#line  993 "VBNET.ATG" 
out returnTypeAttributeSection);
				}
				TypeName(
#line  993 "VBNET.ATG" 
out type);
			}

#line  995 "VBNET.ATG" 
			if(type == null) {
			type = new TypeReference("System.Object");
			}
			
			if (la.kind == 104 || la.kind == 106) {
				if (la.kind == 106) {
					ImplementsClause(
#line  1001 "VBNET.ATG" 
out implementsClause);
				} else {
					HandlesClause(
#line  1003 "VBNET.ATG" 
out handlesClause);
				}
			}
			Expect(1);
			if (
#line  1009 "VBNET.ATG" 
IsMustOverride(m)) {

#line  1011 "VBNET.ATG" 
				methodDeclaration = new MethodDeclaration(name, m.Modifier,  type, p, attributes);
				methodDeclaration.StartLocation = startPos;
				methodDeclaration.EndLocation   = t.EndLocation;
				
				methodDeclaration.HandlesClause = handlesClause;
				methodDeclaration.Templates     = templates;
				methodDeclaration.ImplementsClause = implementsClause;
				methodDeclaration.ReturnTypeAttributeSection = returnTypeAttributeSection;
				compilationUnit.AddChild(methodDeclaration);
				
			} else if (StartOf(11)) {

#line  1023 "VBNET.ATG" 
				methodDeclaration = new MethodDeclaration(name, m.Modifier,  type, p, attributes);
				methodDeclaration.StartLocation = startPos;
				methodDeclaration.EndLocation   = t.EndLocation;
				
				methodDeclaration.Templates     = templates;
				methodDeclaration.HandlesClause = handlesClause;
				methodDeclaration.ImplementsClause = implementsClause;
				methodDeclaration.ReturnTypeAttributeSection = returnTypeAttributeSection;
				
				compilationUnit.AddChild(methodDeclaration);
				compilationUnit.BlockStart(methodDeclaration);
				
				Block(
#line  1035 "VBNET.ATG" 
out stmt);

#line  1037 "VBNET.ATG" 
				compilationUnit.BlockEnd();
				methodDeclaration.Body  = (BlockStatement)stmt;
				
				Expect(87);
				Expect(99);

#line  1042 "VBNET.ATG" 
				methodDeclaration.Body.StartLocation = methodDeclaration.EndLocation;
				methodDeclaration.Body.EndLocation   = t.EndLocation;
				
				Expect(1);
			} else SynErr(217);
			break;
		}
		case 77: {
			lexer.NextToken();

#line  1051 "VBNET.ATG" 
			m.Check(Modifier.VBExternalMethods);
			Point startPos = t.Location;
			CharsetModifier charsetModifer = CharsetModifier.None;
			string library = String.Empty;
			string alias = null;
			string name = String.Empty;
			
			if (StartOf(12)) {
				Charset(
#line  1058 "VBNET.ATG" 
out charsetModifer);
			}
			if (la.kind == 167) {
				lexer.NextToken();
				Identifier();

#line  1061 "VBNET.ATG" 
				name = t.val; 
				Expect(114);
				Expect(3);

#line  1062 "VBNET.ATG" 
				library = t.val.ToString(); 
				if (la.kind == 43) {
					lexer.NextToken();
					Expect(3);

#line  1063 "VBNET.ATG" 
					alias = t.val.ToString(); 
				}
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  1064 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				Expect(1);

#line  1067 "VBNET.ATG" 
				DeclareDeclaration declareDeclaration = new DeclareDeclaration(name, m.Modifier, null, p, attributes, library, alias, charsetModifer);
				declareDeclaration.StartLocation = startPos;
				declareDeclaration.EndLocation   = t.EndLocation;
				compilationUnit.AddChild(declareDeclaration);
				
			} else if (la.kind == 99) {
				lexer.NextToken();
				Identifier();

#line  1074 "VBNET.ATG" 
				name = t.val; 
				Expect(114);
				Expect(3);

#line  1075 "VBNET.ATG" 
				library = t.val; 
				if (la.kind == 43) {
					lexer.NextToken();
					Expect(3);

#line  1076 "VBNET.ATG" 
					alias = t.val; 
				}
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  1077 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				if (la.kind == 47) {
					lexer.NextToken();
					TypeName(
#line  1078 "VBNET.ATG" 
out type);
				}
				Expect(1);

#line  1081 "VBNET.ATG" 
				DeclareDeclaration declareDeclaration = new DeclareDeclaration(name, m.Modifier, type, p, attributes, library, alias, charsetModifer);
				declareDeclaration.StartLocation = startPos;
				declareDeclaration.EndLocation   = t.EndLocation;
				compilationUnit.AddChild(declareDeclaration);
				
			} else SynErr(218);
			break;
		}
		case 92: {
			lexer.NextToken();

#line  1091 "VBNET.ATG" 
			m.Check(Modifier.VBEvents);
			Point startPos = t.Location;
			EventDeclaration eventDeclaration;
			string name = String.Empty;ArrayList implementsClause = null;
			
			Identifier();

#line  1096 "VBNET.ATG" 
			name= t.val; 
			if (la.kind == 47) {
				lexer.NextToken();
				TypeName(
#line  1098 "VBNET.ATG" 
out type);
			} else if (la.kind == 1 || la.kind == 23 || la.kind == 106) {
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  1100 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
			} else SynErr(219);
			if (la.kind == 106) {
				ImplementsClause(
#line  1102 "VBNET.ATG" 
out implementsClause);
			}

#line  1104 "VBNET.ATG" 
			eventDeclaration = new EventDeclaration(type, m.Modifier, p, attributes, name, implementsClause);
			eventDeclaration.StartLocation = startPos;
			eventDeclaration.EndLocation = t.EndLocation;
			compilationUnit.AddChild(eventDeclaration);
			
			Expect(1);
			break;
		}
		case 2: case 50: case 69: case 169: {

#line  1111 "VBNET.ATG" 
			Point startPos = t.Location; 

#line  1113 "VBNET.ATG" 
			m.Check(Modifier.Fields);
			FieldDeclaration fd = new FieldDeclaration(attributes, type, m.Modifier);
			fd.StartLocation = startPos; 
			
			VariableDeclarator(
#line  1117 "VBNET.ATG" 
variableDeclarators);
			while (la.kind == 12) {
				lexer.NextToken();
				VariableDeclarator(
#line  1118 "VBNET.ATG" 
variableDeclarators);
			}
			Expect(1);

#line  1121 "VBNET.ATG" 
			fd.EndLocation = t.EndLocation;
			fd.Fields = variableDeclarators;
			compilationUnit.AddChild(fd);
			
			break;
		}
		case 70: {

#line  1126 "VBNET.ATG" 
			m.Check(Modifier.Fields); 
			lexer.NextToken();

#line  1127 "VBNET.ATG" 
			m.Add(Modifier.Const);  

#line  1129 "VBNET.ATG" 
			FieldDeclaration fd = new FieldDeclaration(attributes, type, m.Modifier);
			fd.StartLocation = t.Location;
			List<VariableDeclaration> constantDeclarators = new List<VariableDeclaration>();
			
			ConstantDeclarator(
#line  1133 "VBNET.ATG" 
constantDeclarators);
			while (la.kind == 12) {
				lexer.NextToken();
				ConstantDeclarator(
#line  1134 "VBNET.ATG" 
constantDeclarators);
			}

#line  1136 "VBNET.ATG" 
			fd.Fields = constantDeclarators;
			fd.EndLocation = t.Location;
			
			Expect(1);

#line  1141 "VBNET.ATG" 
			fd.EndLocation = t.EndLocation;
			compilationUnit.AddChild(fd);
			
			break;
		}
		case 146: {
			lexer.NextToken();

#line  1147 "VBNET.ATG" 
			m.Check(Modifier.VBProperties);
			Point startPos = t.Location;
			ArrayList implementsClause = null;
			
			Identifier();

#line  1151 "VBNET.ATG" 
			string propertyName = t.val; 
			if (la.kind == 23) {
				lexer.NextToken();
				if (StartOf(4)) {
					FormalParameterList(
#line  1152 "VBNET.ATG" 
p);
				}
				Expect(24);
			}
			if (la.kind == 47) {
				lexer.NextToken();
				TypeName(
#line  1153 "VBNET.ATG" 
out type);
			}

#line  1155 "VBNET.ATG" 
			if(type == null) {
			type = new TypeReference("System.Object");
			}
			
			if (la.kind == 106) {
				ImplementsClause(
#line  1159 "VBNET.ATG" 
out implementsClause);
			}
			Expect(1);
			if (
#line  1163 "VBNET.ATG" 
IsMustOverride(m)) {

#line  1165 "VBNET.ATG" 
				PropertyDeclaration pDecl = new PropertyDeclaration(propertyName, type, m.Modifier, attributes);
				pDecl.StartLocation = startPos;
				pDecl.EndLocation   = t.Location;
				pDecl.TypeReference = type;
				pDecl.ImplementsClause = implementsClause;
				pDecl.Parameters = p;
				compilationUnit.AddChild(pDecl);
				
			} else if (la.kind == 26 || la.kind == 100 || la.kind == 156) {

#line  1175 "VBNET.ATG" 
				PropertyDeclaration pDecl = new PropertyDeclaration(propertyName, type, m.Modifier, attributes);
				pDecl.StartLocation = startPos;
				pDecl.EndLocation   = t.Location;
				pDecl.BodyStart   = t.Location;
				pDecl.TypeReference = type;
				pDecl.ImplementsClause = implementsClause;
				pDecl.Parameters = p;
				PropertyGetRegion getRegion;
				PropertySetRegion setRegion;
				
				AccessorDecls(
#line  1185 "VBNET.ATG" 
out getRegion, out setRegion);
				Expect(87);
				Expect(146);
				Expect(1);

#line  1189 "VBNET.ATG" 
				pDecl.GetRegion = getRegion;
				pDecl.SetRegion = setRegion;
				pDecl.BodyEnd = t.EndLocation;
				compilationUnit.AddChild(pDecl);
				
			} else SynErr(220);
			break;
		}
		default: SynErr(221); break;
		}
	}

	void EnumMemberDecl(
#line  861 "VBNET.ATG" 
out FieldDeclaration f) {

#line  863 "VBNET.ATG" 
		Expression expr = null;List<AttributeSection> attributes = new List<AttributeSection>();
		AttributeSection section = null;
		VariableDeclaration varDecl = null;
		
		while (la.kind == 26) {
			AttributeSection(
#line  867 "VBNET.ATG" 
out section);

#line  867 "VBNET.ATG" 
			attributes.Add(section); 
		}
		Identifier();

#line  870 "VBNET.ATG" 
		f = new FieldDeclaration(attributes);
		varDecl = new VariableDeclaration(t.val);
		f.Fields.Add(varDecl);
		f.StartLocation = t.Location;
		
		if (la.kind == 11) {
			lexer.NextToken();
			Expr(
#line  875 "VBNET.ATG" 
out expr);

#line  875 "VBNET.ATG" 
			varDecl.Initializer = expr; 
		}
		Expect(1);
	}

	void InterfaceMemberDecl() {

#line  780 "VBNET.ATG" 
		TypeReference type =null;
		List<ParameterDeclarationExpression> p = new List<ParameterDeclarationExpression>();
		List<TemplateDefinition> templates = new List<TemplateDefinition>();
		AttributeSection section, returnTypeAttributeSection = null;
		Modifiers mod = new Modifiers();
		List<AttributeSection> attributes = new List<AttributeSection>();
		string name;
		
		if (StartOf(13)) {
			while (la.kind == 26) {
				AttributeSection(
#line  788 "VBNET.ATG" 
out section);

#line  788 "VBNET.ATG" 
				attributes.Add(section); 
			}
			while (StartOf(7)) {
				MemberModifier(
#line  792 "VBNET.ATG" 
mod);
			}
			if (la.kind == 92) {
				lexer.NextToken();

#line  795 "VBNET.ATG" 
				mod.Check(Modifier.VBInterfaceEvents); 
				Identifier();

#line  796 "VBNET.ATG" 
				name = t.val; 
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  797 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				if (la.kind == 47) {
					lexer.NextToken();
					TypeName(
#line  798 "VBNET.ATG" 
out type);
				}
				Expect(1);

#line  801 "VBNET.ATG" 
				EventDeclaration ed = new EventDeclaration(type, mod.Modifier, p, attributes, name, null);
				compilationUnit.AddChild(ed);
				ed.EndLocation = t.EndLocation;
				
			} else if (la.kind == 167) {
				lexer.NextToken();

#line  807 "VBNET.ATG" 
				mod.Check(Modifier.VBInterfaceMethods); 
				Identifier();

#line  808 "VBNET.ATG" 
				name = t.val; 
				TypeParameterList(
#line  809 "VBNET.ATG" 
templates);
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  810 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				Expect(1);

#line  813 "VBNET.ATG" 
				MethodDeclaration md = new MethodDeclaration(name, mod.Modifier, null, p, attributes);
				md.TypeReference = new TypeReference("", "System.Void");
				md.EndLocation = t.EndLocation;
				md.Templates = templates;
				compilationUnit.AddChild(md);
				
			} else if (la.kind == 99) {
				lexer.NextToken();

#line  821 "VBNET.ATG" 
				mod.Check(Modifier.VBInterfaceMethods); 
				Identifier();

#line  822 "VBNET.ATG" 
				name = t.val; 
				TypeParameterList(
#line  823 "VBNET.ATG" 
templates);
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  824 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				if (la.kind == 47) {
					lexer.NextToken();
					while (la.kind == 26) {
						AttributeSection(
#line  825 "VBNET.ATG" 
out returnTypeAttributeSection);
					}
					TypeName(
#line  825 "VBNET.ATG" 
out type);
				}

#line  827 "VBNET.ATG" 
				if(type == null) {
				type = new TypeReference("System.Object");
				}
				MethodDeclaration md = new MethodDeclaration(name, mod.Modifier, type, p, attributes);
				md.ReturnTypeAttributeSection = returnTypeAttributeSection;
				md.EndLocation = t.EndLocation;
				md.Templates = templates;
				compilationUnit.AddChild(md);
				
				Expect(1);
			} else if (la.kind == 146) {
				lexer.NextToken();

#line  839 "VBNET.ATG" 
				mod.Check(Modifier.VBInterfaceProperties); 
				Identifier();

#line  840 "VBNET.ATG" 
				name = t.val;  
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(4)) {
						FormalParameterList(
#line  841 "VBNET.ATG" 
p);
					}
					Expect(24);
				}
				if (la.kind == 47) {
					lexer.NextToken();
					TypeName(
#line  842 "VBNET.ATG" 
out type);
				}

#line  844 "VBNET.ATG" 
				if(type == null) {
				type = new TypeReference("System.Object");
				}
				
				Expect(1);

#line  850 "VBNET.ATG" 
				PropertyDeclaration pd = new PropertyDeclaration(name, type, mod.Modifier, attributes);
				pd.Parameters = p;
				pd.EndLocation = t.EndLocation;
				compilationUnit.AddChild(pd);
				
			} else SynErr(222);
		} else if (StartOf(14)) {
			NonModuleDeclaration(
#line  857 "VBNET.ATG" 
mod, attributes);
		} else SynErr(223);
	}

	void Expr(
#line  1425 "VBNET.ATG" 
out Expression expr) {
		ConditionalOrExpr(
#line  1427 "VBNET.ATG" 
out expr);
	}

	void ImplementsClause(
#line  1403 "VBNET.ATG" 
out ArrayList baseInterfaces) {

#line  1405 "VBNET.ATG" 
		baseInterfaces = new ArrayList();
		string typename = String.Empty;
		string first;
		
		Expect(106);
		Identifier();

#line  1409 "VBNET.ATG" 
		first = t.val; 
		Expect(10);
		Qualident(
#line  1409 "VBNET.ATG" 
out typename);

#line  1409 "VBNET.ATG" 
		baseInterfaces.Add(first + "." + typename); 
		while (la.kind == 12) {
			lexer.NextToken();
			Identifier();

#line  1410 "VBNET.ATG" 
			first = t.val; 
			Expect(10);
			Qualident(
#line  1410 "VBNET.ATG" 
out typename);

#line  1410 "VBNET.ATG" 
			baseInterfaces.Add(first + "." + typename); 
		}
	}

	void HandlesClause(
#line  1361 "VBNET.ATG" 
out ArrayList handlesClause) {

#line  1363 "VBNET.ATG" 
		handlesClause = new ArrayList();
		string name;
		
		Expect(104);
		EventMemberSpecifier(
#line  1366 "VBNET.ATG" 
out name);

#line  1366 "VBNET.ATG" 
		handlesClause.Add(name); 
		while (la.kind == 12) {
			lexer.NextToken();
			EventMemberSpecifier(
#line  1367 "VBNET.ATG" 
out name);

#line  1367 "VBNET.ATG" 
			handlesClause.Add(name); 
		}
	}

	void Block(
#line  1973 "VBNET.ATG" 
out Statement stmt) {

#line  1976 "VBNET.ATG" 
		BlockStatement blockStmt = new BlockStatement();
		blockStmt.StartLocation = t.Location;
		compilationUnit.BlockStart(blockStmt);
		
		while (StartOf(15) || 
#line  1981 "VBNET.ATG" 
IsEndStmtAhead()) {
			if (
#line  1981 "VBNET.ATG" 
IsEndStmtAhead()) {
				Expect(87);
				EndOfStmt();

#line  1981 "VBNET.ATG" 
				compilationUnit.AddChild(new EndStatement()); 
			} else {
				Statement();
				EndOfStmt();
			}
		}

#line  1987 "VBNET.ATG" 
		stmt = blockStmt;
		blockStmt.EndLocation = t.EndLocation;
		compilationUnit.BlockEnd();
		
	}

	void Charset(
#line  1353 "VBNET.ATG" 
out CharsetModifier charsetModifier) {

#line  1354 "VBNET.ATG" 
		charsetModifier = CharsetModifier.None; 
		if (la.kind == 99 || la.kind == 167) {
		} else if (la.kind == 46) {
			lexer.NextToken();

#line  1355 "VBNET.ATG" 
			charsetModifier = CharsetModifier.ANSI; 
		} else if (la.kind == 49) {
			lexer.NextToken();

#line  1356 "VBNET.ATG" 
			charsetModifier = CharsetModifier.Auto; 
		} else if (la.kind == 176) {
			lexer.NextToken();

#line  1357 "VBNET.ATG" 
			charsetModifier = CharsetModifier.Unicode; 
		} else SynErr(224);
	}

	void VariableDeclarator(
#line  1271 "VBNET.ATG" 
List<VariableDeclaration> fieldDeclaration) {

#line  1273 "VBNET.ATG" 
		Expression expr = null;
		TypeReference type = null;ArrayList rank = null;ArrayList dimension = null;
		
		Identifier();

#line  1276 "VBNET.ATG" 
		string name = t.val; 
		if (
#line  1277 "VBNET.ATG" 
IsDims()) {
			ArrayNameModifier(
#line  1277 "VBNET.ATG" 
out rank);
		}
		if (
#line  1278 "VBNET.ATG" 
IsSize()) {
			ArrayInitializationModifier(
#line  1278 "VBNET.ATG" 
out dimension);
		}
		if (
#line  1280 "VBNET.ATG" 
IsObjectCreation()) {
			Expect(47);
			ObjectCreateExpression(
#line  1280 "VBNET.ATG" 
out expr);

#line  1282 "VBNET.ATG" 
			if (expr is ObjectCreateExpression) {
			type = ((ObjectCreateExpression)expr).CreateType;
			} else {
				type = ((ArrayCreateExpression)expr).CreateType;
			}
			
		} else if (StartOf(16)) {
			if (la.kind == 47) {
				lexer.NextToken();
				TypeName(
#line  1289 "VBNET.ATG" 
out type);
			}

#line  1291 "VBNET.ATG" 
			if (type != null && rank != null) {
			if(type.RankSpecifier != null) {
				Error("array rank only allowed one time");
			} else {
				type.RankSpecifier = (int[])rank.ToArray(typeof(int));
			}
			}
			
			if (la.kind == 11) {
				lexer.NextToken();
				VariableInitializer(
#line  1299 "VBNET.ATG" 
out expr);
			}
		} else SynErr(225);

#line  1301 "VBNET.ATG" 
		fieldDeclaration.Add(new VariableDeclaration(name, expr, type)); 
	}

	void ConstantDeclarator(
#line  1254 "VBNET.ATG" 
List<VariableDeclaration> constantDeclaration) {

#line  1256 "VBNET.ATG" 
		Expression expr = null;
		TypeReference type = null;
		string name = String.Empty;
		
		Identifier();

#line  1260 "VBNET.ATG" 
		name = t.val; 
		if (la.kind == 47) {
			lexer.NextToken();
			TypeName(
#line  1261 "VBNET.ATG" 
out type);
		}
		Expect(11);
		Expr(
#line  1262 "VBNET.ATG" 
out expr);

#line  1264 "VBNET.ATG" 
		VariableDeclaration f = new VariableDeclaration(name, expr);
		f.TypeReference = type;
		constantDeclaration.Add(f);
		
	}

	void AccessorDecls(
#line  1198 "VBNET.ATG" 
out PropertyGetRegion getBlock, out PropertySetRegion setBlock) {

#line  1200 "VBNET.ATG" 
		List<AttributeSection> attributes = new List<AttributeSection>();
		AttributeSection section;
		getBlock = null;
		setBlock = null; 
		
		while (la.kind == 26) {
			AttributeSection(
#line  1205 "VBNET.ATG" 
out section);

#line  1205 "VBNET.ATG" 
			attributes.Add(section); 
		}
		if (la.kind == 100) {
			GetAccessorDecl(
#line  1207 "VBNET.ATG" 
out getBlock, attributes);
			if (la.kind == 26 || la.kind == 156) {

#line  1209 "VBNET.ATG" 
				attributes = new List<AttributeSection>(); 
				while (la.kind == 26) {
					AttributeSection(
#line  1210 "VBNET.ATG" 
out section);

#line  1210 "VBNET.ATG" 
					attributes.Add(section); 
				}
				SetAccessorDecl(
#line  1211 "VBNET.ATG" 
out setBlock, attributes);
			}
		} else if (la.kind == 156) {
			SetAccessorDecl(
#line  1214 "VBNET.ATG" 
out setBlock, attributes);
			if (la.kind == 26 || la.kind == 100) {

#line  1216 "VBNET.ATG" 
				attributes = new List<AttributeSection>(); 
				while (la.kind == 26) {
					AttributeSection(
#line  1217 "VBNET.ATG" 
out section);

#line  1217 "VBNET.ATG" 
					attributes.Add(section); 
				}
				GetAccessorDecl(
#line  1218 "VBNET.ATG" 
out getBlock, attributes);
			}
		} else SynErr(226);
	}

	void GetAccessorDecl(
#line  1224 "VBNET.ATG" 
out PropertyGetRegion getBlock, List<AttributeSection> attributes) {

#line  1225 "VBNET.ATG" 
		Statement stmt = null; 
		Expect(100);
		Expect(1);
		Block(
#line  1228 "VBNET.ATG" 
out stmt);

#line  1230 "VBNET.ATG" 
		getBlock = new PropertyGetRegion((BlockStatement)stmt, attributes);
		
		Expect(87);
		Expect(100);
		Expect(1);
	}

	void SetAccessorDecl(
#line  1237 "VBNET.ATG" 
out PropertySetRegion setBlock, List<AttributeSection> attributes) {

#line  1239 "VBNET.ATG" 
		Statement stmt = null; List<ParameterDeclarationExpression> p = new List<ParameterDeclarationExpression>();
		
		Expect(156);
		if (la.kind == 23) {
			lexer.NextToken();
			if (StartOf(4)) {
				FormalParameterList(
#line  1242 "VBNET.ATG" 
p);
			}
			Expect(24);
		}
		Expect(1);
		Block(
#line  1244 "VBNET.ATG" 
out stmt);

#line  1246 "VBNET.ATG" 
		setBlock = new PropertySetRegion((BlockStatement)stmt, attributes);
		setBlock.Parameters = p;
		
		Expect(87);
		Expect(156);
		Expect(1);
	}

	void ArrayNameModifier(
#line  1765 "VBNET.ATG" 
out ArrayList arrayModifiers) {

#line  1767 "VBNET.ATG" 
		arrayModifiers = null;
		
		ArrayTypeModifiers(
#line  1769 "VBNET.ATG" 
out arrayModifiers);
	}

	void ArrayInitializationModifier(
#line  1305 "VBNET.ATG" 
out ArrayList arrayModifiers) {

#line  1307 "VBNET.ATG" 
		arrayModifiers = null;
		
		Expect(23);
		InitializationRankList(
#line  1309 "VBNET.ATG" 
out arrayModifiers);
		Expect(24);
	}

	void ObjectCreateExpression(
#line  1681 "VBNET.ATG" 
out Expression oce) {

#line  1683 "VBNET.ATG" 
		TypeReference type = null;
		Expression initializer = null;
		ArrayList arguments = null;
		oce = null;
		
		Expect(126);
		NonArrayTypeName(
#line  1688 "VBNET.ATG" 
out type);
		if (la.kind == 23) {
			lexer.NextToken();
			if (StartOf(17)) {
				ArgumentList(
#line  1689 "VBNET.ATG" 
out arguments);
			}
			Expect(24);
		}
		if (la.kind == 21) {
			ArrayInitializer(
#line  1690 "VBNET.ATG" 
out initializer);
		}

#line  1692 "VBNET.ATG" 
		if (initializer == null) {
		oce = new ObjectCreateExpression(type, arguments);
		} else {
			ArrayCreateExpression ace = new ArrayCreateExpression(type, initializer as ArrayInitializerExpression);
			ace.Parameters = arguments;
			oce = ace;
		}
		
	}

	void VariableInitializer(
#line  1325 "VBNET.ATG" 
out Expression initializerExpression) {

#line  1327 "VBNET.ATG" 
		initializerExpression = null;
		
		if (StartOf(18)) {
			Expr(
#line  1329 "VBNET.ATG" 
out initializerExpression);
		} else if (la.kind == 21) {
			ArrayInitializer(
#line  1330 "VBNET.ATG" 
out initializerExpression);
		} else SynErr(227);
	}

	void InitializationRankList(
#line  1313 "VBNET.ATG" 
out ArrayList rank) {

#line  1315 "VBNET.ATG" 
		rank = null;
		Expression expr = null;
		
		Expr(
#line  1318 "VBNET.ATG" 
out expr);

#line  1318 "VBNET.ATG" 
		rank = new ArrayList(); if (expr != null) { rank.Add(expr); } 
		while (la.kind == 12) {
			lexer.NextToken();
			Expr(
#line  1320 "VBNET.ATG" 
out expr);

#line  1320 "VBNET.ATG" 
			if (expr != null) { rank.Add(expr); } 
		}
	}

	void ArrayInitializer(
#line  1334 "VBNET.ATG" 
out Expression outExpr) {

#line  1336 "VBNET.ATG" 
		Expression expr = null;
		ArrayInitializerExpression initializer = new ArrayInitializerExpression();
		
		Expect(21);
		if (StartOf(19)) {
			VariableInitializer(
#line  1341 "VBNET.ATG" 
out expr);

#line  1343 "VBNET.ATG" 
			if (expr != null) { initializer.CreateExpressions.Add(expr); }
			
			while (
#line  1346 "VBNET.ATG" 
NotFinalComma()) {
				Expect(12);
				VariableInitializer(
#line  1346 "VBNET.ATG" 
out expr);

#line  1347 "VBNET.ATG" 
				if (expr != null) { initializer.CreateExpressions.Add(expr); } 
			}
		}
		Expect(22);

#line  1350 "VBNET.ATG" 
		outExpr = initializer; 
	}

	void EventMemberSpecifier(
#line  1413 "VBNET.ATG" 
out string name) {

#line  1414 "VBNET.ATG" 
		string type; name = String.Empty; 
		if (StartOf(10)) {
			Identifier();

#line  1415 "VBNET.ATG" 
			type = t.val; 
			Expect(10);
			Identifier();

#line  1417 "VBNET.ATG" 
			name = type + "." + t.val; 
		} else if (la.kind == 123) {
			lexer.NextToken();
			Expect(10);
			if (StartOf(10)) {
				Identifier();

#line  1420 "VBNET.ATG" 
				name = "MyBase." + t.val; 
			} else if (la.kind == 91) {
				lexer.NextToken();

#line  1421 "VBNET.ATG" 
				name = "MyBase.Error"; 
			} else SynErr(228);
		} else SynErr(229);
	}

	void ConditionalOrExpr(
#line  1560 "VBNET.ATG" 
out Expression outExpr) {

#line  1561 "VBNET.ATG" 
		Expression expr; 
		ConditionalAndExpr(
#line  1562 "VBNET.ATG" 
out outExpr);
		while (la.kind == 138) {
			lexer.NextToken();
			ConditionalAndExpr(
#line  1562 "VBNET.ATG" 
out expr);

#line  1562 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, BinaryOperatorType.LogicalOr, expr);  
		}
	}

	void UnaryExpr(
#line  1434 "VBNET.ATG" 
out Expression uExpr) {

#line  1436 "VBNET.ATG" 
		Expression expr;
		UnaryOperatorType uop = UnaryOperatorType.None;
		bool isUOp = false;
		
		while (la.kind == 14 || la.kind == 15 || la.kind == 16) {
			if (la.kind == 14) {
				lexer.NextToken();

#line  1440 "VBNET.ATG" 
				uop = UnaryOperatorType.Plus; isUOp = true; 
			} else if (la.kind == 15) {
				lexer.NextToken();

#line  1441 "VBNET.ATG" 
				uop = UnaryOperatorType.Minus; isUOp = true; 
			} else {
				lexer.NextToken();

#line  1443 "VBNET.ATG" 
				uop = UnaryOperatorType.Star;  isUOp = true;
			}
		}
		SimpleExpr(
#line  1445 "VBNET.ATG" 
out expr);

#line  1447 "VBNET.ATG" 
		if (isUOp) {
		uExpr = new UnaryOperatorExpression(expr, uop);
		} else {
			uExpr = expr;
		}
		
	}

	void SimpleExpr(
#line  1470 "VBNET.ATG" 
out Expression pexpr) {

#line  1472 "VBNET.ATG" 
		Expression expr;
		TypeReference type = null;
		string name = String.Empty;
		pexpr = null;
		
		if (StartOf(20) || 
#line  1501 "VBNET.ATG" 
la.kind == Tokens.Global) {
			if (la.kind == 3) {
				lexer.NextToken();

#line  1480 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 4) {
				lexer.NextToken();

#line  1481 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 7) {
				lexer.NextToken();

#line  1482 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 6) {
				lexer.NextToken();

#line  1483 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 5) {
				lexer.NextToken();

#line  1484 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 9) {
				lexer.NextToken();

#line  1485 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 8) {
				lexer.NextToken();

#line  1486 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(t.literalValue, t.val);  
			} else if (la.kind == 173) {
				lexer.NextToken();

#line  1488 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(true, "true");  
			} else if (la.kind == 95) {
				lexer.NextToken();

#line  1489 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(false, "false"); 
			} else if (la.kind == 129) {
				lexer.NextToken();

#line  1490 "VBNET.ATG" 
				pexpr = new PrimitiveExpression(null, "null");  
			} else if (la.kind == 23) {
				lexer.NextToken();
				Expr(
#line  1491 "VBNET.ATG" 
out expr);
				Expect(24);

#line  1491 "VBNET.ATG" 
				pexpr = new ParenthesizedExpression(expr); 
			} else if (StartOf(10)) {
				Identifier();

#line  1492 "VBNET.ATG" 
				pexpr = new IdentifierExpression(t.val); 
			} else if (StartOf(21)) {

#line  1493 "VBNET.ATG" 
				string val = String.Empty; 
				PrimitiveTypeName(
#line  1493 "VBNET.ATG" 
out val);
				Expect(10);

#line  1494 "VBNET.ATG" 
				t.val = ""; 
				Identifier();

#line  1494 "VBNET.ATG" 
				pexpr = new FieldReferenceExpression(new TypeReferenceExpression(val), t.val); 
			} else if (la.kind == 118) {
				lexer.NextToken();

#line  1495 "VBNET.ATG" 
				pexpr = new ThisReferenceExpression(); 
			} else if (la.kind == 123 || la.kind == 124) {

#line  1496 "VBNET.ATG" 
				Expression retExpr = null; 
				if (la.kind == 123) {
					lexer.NextToken();

#line  1497 "VBNET.ATG" 
					retExpr = new BaseReferenceExpression(); 
				} else if (la.kind == 124) {
					lexer.NextToken();

#line  1498 "VBNET.ATG" 
					retExpr = new ClassReferenceExpression(); 
				} else SynErr(230);
				Expect(10);
				IdentifierOrKeyword(
#line  1500 "VBNET.ATG" 
out name);

#line  1500 "VBNET.ATG" 
				pexpr = new FieldReferenceExpression(retExpr, name); 
			} else if (
#line  1501 "VBNET.ATG" 
la.kind == Tokens.Global) {
				TypeName(
#line  1501 "VBNET.ATG" 
out type);

#line  1501 "VBNET.ATG" 
				pexpr = new TypeReferenceExpression(type); 
			} else if (la.kind == 126) {
				ObjectCreateExpression(
#line  1502 "VBNET.ATG" 
out expr);

#line  1502 "VBNET.ATG" 
				pexpr = expr; 
			} else if (la.kind == 74 || la.kind == 81) {
				if (la.kind == 81) {
					lexer.NextToken();
				} else if (la.kind == 74) {
					lexer.NextToken();
				} else SynErr(231);
				Expect(23);
				Expr(
#line  1503 "VBNET.ATG" 
out expr);
				Expect(12);
				TypeName(
#line  1503 "VBNET.ATG" 
out type);
				Expect(24);

#line  1503 "VBNET.ATG" 
				pexpr = new CastExpression(type, expr); 
			} else if (la.kind == 195) {
				lexer.NextToken();
				Expect(23);
				Expr(
#line  1504 "VBNET.ATG" 
out expr);
				Expect(12);
				TypeName(
#line  1504 "VBNET.ATG" 
out type);
				Expect(24);

#line  1504 "VBNET.ATG" 
				pexpr = new BinaryOperatorExpression(expr, BinaryOperatorType.AsCast, new TypeReferenceExpression(type)); 
			} else if (StartOf(22)) {
				CastTarget(
#line  1505 "VBNET.ATG" 
out type);
				Expect(23);
				Expr(
#line  1505 "VBNET.ATG" 
out expr);
				Expect(24);

#line  1505 "VBNET.ATG" 
				pexpr = new CastExpression(type, expr, true); 
			} else if (la.kind == 42) {
				lexer.NextToken();
				Expr(
#line  1506 "VBNET.ATG" 
out expr);

#line  1506 "VBNET.ATG" 
				pexpr = new AddressOfExpression(expr); 
			} else if (la.kind == 101) {
				lexer.NextToken();
				Expect(23);
				TypeName(
#line  1507 "VBNET.ATG" 
out type);
				Expect(24);

#line  1507 "VBNET.ATG" 
				pexpr = new TypeOfExpression(type); 
			} else {
				lexer.NextToken();
				SimpleExpr(
#line  1508 "VBNET.ATG" 
out expr);
				Expect(112);
				TypeName(
#line  1508 "VBNET.ATG" 
out type);

#line  1508 "VBNET.ATG" 
				pexpr = new TypeOfIsExpression(expr, type); 
			}
			while (la.kind == 10 || la.kind == 23) {
				if (la.kind == 10) {
					lexer.NextToken();
					IdentifierOrKeyword(
#line  1511 "VBNET.ATG" 
out name);

#line  1511 "VBNET.ATG" 
					pexpr = new FieldReferenceExpression(pexpr, name); 
				} else {
					lexer.NextToken();

#line  1512 "VBNET.ATG" 
					ArrayList parameters = new ArrayList(); 
					if (StartOf(23)) {
						if (StartOf(18)) {
							Argument(
#line  1514 "VBNET.ATG" 
out expr);

#line  1514 "VBNET.ATG" 
							if (expr != null) { parameters.Add(expr); } 
						}
						while (la.kind == 12) {
							lexer.NextToken();
							if (StartOf(18)) {
								Argument(
#line  1517 "VBNET.ATG" 
out expr);

#line  1517 "VBNET.ATG" 
								if (expr != null) { parameters.Add(expr); } 
							}
						}
					}
					Expect(24);

#line  1520 "VBNET.ATG" 
					pexpr = new InvocationExpression(pexpr, parameters); 
				}
			}
		} else if (la.kind == 10) {
			lexer.NextToken();
			IdentifierOrKeyword(
#line  1524 "VBNET.ATG" 
out name);

#line  1524 "VBNET.ATG" 
			pexpr = new FieldReferenceExpression(pexpr, name);
			while (la.kind == 10 || la.kind == 23) {
				if (la.kind == 10) {
					lexer.NextToken();
					IdentifierOrKeyword(
#line  1526 "VBNET.ATG" 
out name);

#line  1526 "VBNET.ATG" 
					pexpr = new FieldReferenceExpression(pexpr, name); 
				} else {
					lexer.NextToken();

#line  1527 "VBNET.ATG" 
					ArrayList parameters = new ArrayList(); 
					if (StartOf(23)) {

#line  1529 "VBNET.ATG" 
						expr = null; 
						if (StartOf(18)) {
							Argument(
#line  1529 "VBNET.ATG" 
out expr);
						}

#line  1529 "VBNET.ATG" 
						if (expr != null) { parameters.Add(expr); } 
						while (la.kind == 12) {
							lexer.NextToken();

#line  1531 "VBNET.ATG" 
							expr = null; 
							if (StartOf(18)) {
								Argument(
#line  1532 "VBNET.ATG" 
out expr);
							}

#line  1532 "VBNET.ATG" 
							if (expr != null) { parameters.Add(expr); } 
						}
					}
					Expect(24);

#line  1535 "VBNET.ATG" 
					pexpr = new InvocationExpression(pexpr, parameters); 
				}
			}
		} else SynErr(232);
	}

	void AssignmentOperator(
#line  1455 "VBNET.ATG" 
out AssignmentOperatorType op) {

#line  1456 "VBNET.ATG" 
		op = AssignmentOperatorType.None; 
		switch (la.kind) {
		case 11: {
			lexer.NextToken();

#line  1457 "VBNET.ATG" 
			op = AssignmentOperatorType.Assign; 
			break;
		}
		case 40: {
			lexer.NextToken();

#line  1458 "VBNET.ATG" 
			op = AssignmentOperatorType.ConcatString; 
			break;
		}
		case 32: {
			lexer.NextToken();

#line  1459 "VBNET.ATG" 
			op = AssignmentOperatorType.Add; 
			break;
		}
		case 34: {
			lexer.NextToken();

#line  1460 "VBNET.ATG" 
			op = AssignmentOperatorType.Subtract; 
			break;
		}
		case 35: {
			lexer.NextToken();

#line  1461 "VBNET.ATG" 
			op = AssignmentOperatorType.Multiply; 
			break;
		}
		case 36: {
			lexer.NextToken();

#line  1462 "VBNET.ATG" 
			op = AssignmentOperatorType.Divide; 
			break;
		}
		case 37: {
			lexer.NextToken();

#line  1463 "VBNET.ATG" 
			op = AssignmentOperatorType.DivideInteger; 
			break;
		}
		case 33: {
			lexer.NextToken();

#line  1464 "VBNET.ATG" 
			op = AssignmentOperatorType.Power; 
			break;
		}
		case 38: {
			lexer.NextToken();

#line  1465 "VBNET.ATG" 
			op = AssignmentOperatorType.ShiftLeft; 
			break;
		}
		case 39: {
			lexer.NextToken();

#line  1466 "VBNET.ATG" 
			op = AssignmentOperatorType.ShiftRight; 
			break;
		}
		default: SynErr(233); break;
		}
	}

	void IdentifierOrKeyword(
#line  2558 "VBNET.ATG" 
out string name) {

#line  2560 "VBNET.ATG" 
		name = String.Empty;
		
		switch (la.kind) {
		case 2: case 50: case 69: case 169: {
			Identifier();

#line  2563 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 41: {
			lexer.NextToken();

#line  2564 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 42: {
			lexer.NextToken();

#line  2565 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 43: {
			lexer.NextToken();

#line  2566 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 44: {
			lexer.NextToken();

#line  2567 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 45: {
			lexer.NextToken();

#line  2568 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 46: {
			lexer.NextToken();

#line  2569 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 47: {
			lexer.NextToken();

#line  2570 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 48: {
			lexer.NextToken();

#line  2571 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 49: {
			lexer.NextToken();

#line  2572 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 51: {
			lexer.NextToken();

#line  2573 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 52: {
			lexer.NextToken();

#line  2574 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 53: {
			lexer.NextToken();

#line  2575 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 54: {
			lexer.NextToken();

#line  2576 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 55: {
			lexer.NextToken();

#line  2577 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 56: {
			lexer.NextToken();

#line  2578 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 57: {
			lexer.NextToken();

#line  2579 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 58: {
			lexer.NextToken();

#line  2580 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 59: {
			lexer.NextToken();

#line  2581 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 60: {
			lexer.NextToken();

#line  2582 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 61: {
			lexer.NextToken();

#line  2583 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 62: {
			lexer.NextToken();

#line  2584 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 63: {
			lexer.NextToken();

#line  2585 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 64: {
			lexer.NextToken();

#line  2586 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 65: {
			lexer.NextToken();

#line  2587 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 66: {
			lexer.NextToken();

#line  2588 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 67: {
			lexer.NextToken();

#line  2589 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 68: {
			lexer.NextToken();

#line  2590 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 70: {
			lexer.NextToken();

#line  2591 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 71: {
			lexer.NextToken();

#line  2592 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 72: {
			lexer.NextToken();

#line  2593 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 73: {
			lexer.NextToken();

#line  2594 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 74: {
			lexer.NextToken();

#line  2595 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 75: {
			lexer.NextToken();

#line  2596 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 76: {
			lexer.NextToken();

#line  2597 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 77: {
			lexer.NextToken();

#line  2598 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 78: {
			lexer.NextToken();

#line  2599 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 79: {
			lexer.NextToken();

#line  2600 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 80: {
			lexer.NextToken();

#line  2601 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 81: {
			lexer.NextToken();

#line  2602 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 82: {
			lexer.NextToken();

#line  2603 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 83: {
			lexer.NextToken();

#line  2604 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 84: {
			lexer.NextToken();

#line  2605 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 85: {
			lexer.NextToken();

#line  2606 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 86: {
			lexer.NextToken();

#line  2607 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 87: {
			lexer.NextToken();

#line  2608 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 88: {
			lexer.NextToken();

#line  2609 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 89: {
			lexer.NextToken();

#line  2610 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 90: {
			lexer.NextToken();

#line  2611 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 91: {
			lexer.NextToken();

#line  2612 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 92: {
			lexer.NextToken();

#line  2613 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 93: {
			lexer.NextToken();

#line  2614 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 94: {
			lexer.NextToken();

#line  2615 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 95: {
			lexer.NextToken();

#line  2616 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 96: {
			lexer.NextToken();

#line  2617 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 97: {
			lexer.NextToken();

#line  2618 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 98: {
			lexer.NextToken();

#line  2619 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 99: {
			lexer.NextToken();

#line  2620 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 100: {
			lexer.NextToken();

#line  2621 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 101: {
			lexer.NextToken();

#line  2622 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 102: {
			lexer.NextToken();

#line  2623 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 103: {
			lexer.NextToken();

#line  2624 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 104: {
			lexer.NextToken();

#line  2625 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 105: {
			lexer.NextToken();

#line  2626 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 106: {
			lexer.NextToken();

#line  2627 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 107: {
			lexer.NextToken();

#line  2628 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 108: {
			lexer.NextToken();

#line  2629 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 109: {
			lexer.NextToken();

#line  2630 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 110: {
			lexer.NextToken();

#line  2631 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 111: {
			lexer.NextToken();

#line  2632 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 112: {
			lexer.NextToken();

#line  2633 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 113: {
			lexer.NextToken();

#line  2634 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 114: {
			lexer.NextToken();

#line  2635 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 115: {
			lexer.NextToken();

#line  2636 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 116: {
			lexer.NextToken();

#line  2637 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 117: {
			lexer.NextToken();

#line  2638 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 118: {
			lexer.NextToken();

#line  2639 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 119: {
			lexer.NextToken();

#line  2640 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 120: {
			lexer.NextToken();

#line  2641 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 121: {
			lexer.NextToken();

#line  2642 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 122: {
			lexer.NextToken();

#line  2643 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 123: {
			lexer.NextToken();

#line  2644 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 124: {
			lexer.NextToken();

#line  2645 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 125: {
			lexer.NextToken();

#line  2646 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 126: {
			lexer.NextToken();

#line  2647 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 127: {
			lexer.NextToken();

#line  2648 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 128: {
			lexer.NextToken();

#line  2649 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 129: {
			lexer.NextToken();

#line  2650 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 130: {
			lexer.NextToken();

#line  2651 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 131: {
			lexer.NextToken();

#line  2652 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 132: {
			lexer.NextToken();

#line  2653 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 134: {
			lexer.NextToken();

#line  2654 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 135: {
			lexer.NextToken();

#line  2655 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 136: {
			lexer.NextToken();

#line  2656 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 137: {
			lexer.NextToken();

#line  2657 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 138: {
			lexer.NextToken();

#line  2658 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 139: {
			lexer.NextToken();

#line  2659 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 140: {
			lexer.NextToken();

#line  2660 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 142: {
			lexer.NextToken();

#line  2661 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 143: {
			lexer.NextToken();

#line  2662 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 144: {
			lexer.NextToken();

#line  2663 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 145: {
			lexer.NextToken();

#line  2664 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 146: {
			lexer.NextToken();

#line  2665 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 147: {
			lexer.NextToken();

#line  2666 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 148: {
			lexer.NextToken();

#line  2667 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 149: {
			lexer.NextToken();

#line  2668 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 150: {
			lexer.NextToken();

#line  2669 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 151: {
			lexer.NextToken();

#line  2670 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 152: {
			lexer.NextToken();

#line  2671 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 153: {
			lexer.NextToken();

#line  2672 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 154: {
			lexer.NextToken();

#line  2673 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 155: {
			lexer.NextToken();

#line  2674 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 156: {
			lexer.NextToken();

#line  2675 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 157: {
			lexer.NextToken();

#line  2676 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 158: {
			lexer.NextToken();

#line  2677 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 159: {
			lexer.NextToken();

#line  2678 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 160: {
			lexer.NextToken();

#line  2679 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 161: {
			lexer.NextToken();

#line  2680 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 162: {
			lexer.NextToken();

#line  2681 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 163: {
			lexer.NextToken();

#line  2682 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 165: {
			lexer.NextToken();

#line  2683 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 166: {
			lexer.NextToken();

#line  2684 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 167: {
			lexer.NextToken();

#line  2685 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 168: {
			lexer.NextToken();

#line  2686 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 170: {
			lexer.NextToken();

#line  2687 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 171: {
			lexer.NextToken();

#line  2688 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 172: {
			lexer.NextToken();

#line  2689 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 173: {
			lexer.NextToken();

#line  2690 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 174: {
			lexer.NextToken();

#line  2691 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 175: {
			lexer.NextToken();

#line  2692 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 176: {
			lexer.NextToken();

#line  2693 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 177: {
			lexer.NextToken();

#line  2694 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 178: {
			lexer.NextToken();

#line  2695 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 179: {
			lexer.NextToken();

#line  2696 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 180: {
			lexer.NextToken();

#line  2697 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 181: {
			lexer.NextToken();

#line  2698 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 182: {
			lexer.NextToken();

#line  2699 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 183: {
			lexer.NextToken();

#line  2700 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 184: {
			lexer.NextToken();

#line  2701 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 185: {
			lexer.NextToken();

#line  2702 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 186: {
			lexer.NextToken();

#line  2703 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 187: {
			lexer.NextToken();

#line  2704 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 188: {
			lexer.NextToken();

#line  2705 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 189: {
			lexer.NextToken();

#line  2706 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 190: {
			lexer.NextToken();

#line  2707 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 191: {
			lexer.NextToken();

#line  2708 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 192: {
			lexer.NextToken();

#line  2709 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 193: {
			lexer.NextToken();

#line  2710 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 196: {
			lexer.NextToken();

#line  2711 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 197: {
			lexer.NextToken();

#line  2712 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 198: {
			lexer.NextToken();

#line  2713 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		case 199: {
			lexer.NextToken();

#line  2714 "VBNET.ATG" 
			name = t.val; 
			break;
		}
		default: SynErr(234); break;
		}
	}

	void CastTarget(
#line  1542 "VBNET.ATG" 
out TypeReference type) {

#line  1544 "VBNET.ATG" 
		type = null;
		
		switch (la.kind) {
		case 58: {
			lexer.NextToken();

#line  1546 "VBNET.ATG" 
			type = new TypeReference("System.Boolean"); 
			break;
		}
		case 59: {
			lexer.NextToken();

#line  1547 "VBNET.ATG" 
			type = new TypeReference("System.Byte"); 
			break;
		}
		case 60: {
			lexer.NextToken();

#line  1548 "VBNET.ATG" 
			type = new TypeReference("System.Char"); 
			break;
		}
		case 61: {
			lexer.NextToken();

#line  1549 "VBNET.ATG" 
			type = new TypeReference("System.DateTime"); 
			break;
		}
		case 63: {
			lexer.NextToken();

#line  1550 "VBNET.ATG" 
			type = new TypeReference("System.Decimal"); 
			break;
		}
		case 62: {
			lexer.NextToken();

#line  1551 "VBNET.ATG" 
			type = new TypeReference("System.Double"); 
			break;
		}
		case 65: {
			lexer.NextToken();

#line  1552 "VBNET.ATG" 
			type = new TypeReference("System.Int32"); 
			break;
		}
		case 67: {
			lexer.NextToken();

#line  1553 "VBNET.ATG" 
			type = new TypeReference("System.Int64"); 
			break;
		}
		case 68: {
			lexer.NextToken();

#line  1554 "VBNET.ATG" 
			type = new TypeReference("System.Object"); 
			break;
		}
		case 71: {
			lexer.NextToken();

#line  1555 "VBNET.ATG" 
			type = new TypeReference("System.Int16"); 
			break;
		}
		case 72: {
			lexer.NextToken();

#line  1556 "VBNET.ATG" 
			type = new TypeReference("System.Single"); 
			break;
		}
		case 73: {
			lexer.NextToken();

#line  1557 "VBNET.ATG" 
			type = new TypeReference("System.String"); 
			break;
		}
		default: SynErr(235); break;
		}
	}

	void Argument(
#line  1718 "VBNET.ATG" 
out Expression argumentexpr) {

#line  1720 "VBNET.ATG" 
		Expression expr;
		argumentexpr = null;
		string name;
		
		if (
#line  1724 "VBNET.ATG" 
IsNamedAssign()) {
			Identifier();

#line  1724 "VBNET.ATG" 
			name = t.val;  
			Expect(13);
			Expect(11);
			Expr(
#line  1724 "VBNET.ATG" 
out expr);

#line  1726 "VBNET.ATG" 
			argumentexpr = new NamedArgumentExpression(name, expr);
			
		} else if (StartOf(18)) {
			Expr(
#line  1729 "VBNET.ATG" 
out argumentexpr);
		} else SynErr(236);
	}

	void ConditionalAndExpr(
#line  1565 "VBNET.ATG" 
out Expression outExpr) {

#line  1566 "VBNET.ATG" 
		Expression expr; 
		InclusiveOrExpr(
#line  1567 "VBNET.ATG" 
out outExpr);
		while (la.kind == 45) {
			lexer.NextToken();
			InclusiveOrExpr(
#line  1567 "VBNET.ATG" 
out expr);

#line  1567 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, BinaryOperatorType.LogicalAnd, expr);  
		}
	}

	void InclusiveOrExpr(
#line  1570 "VBNET.ATG" 
out Expression outExpr) {

#line  1571 "VBNET.ATG" 
		Expression expr; 
		ExclusiveOrExpr(
#line  1572 "VBNET.ATG" 
out outExpr);
		while (la.kind == 185) {
			lexer.NextToken();
			ExclusiveOrExpr(
#line  1572 "VBNET.ATG" 
out expr);

#line  1572 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, BinaryOperatorType.ExclusiveOr, expr);  
		}
	}

	void ExclusiveOrExpr(
#line  1575 "VBNET.ATG" 
out Expression outExpr) {

#line  1576 "VBNET.ATG" 
		Expression expr; 
		AndExpr(
#line  1577 "VBNET.ATG" 
out outExpr);
		while (la.kind == 137) {
			lexer.NextToken();
			AndExpr(
#line  1577 "VBNET.ATG" 
out expr);

#line  1577 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, BinaryOperatorType.BitwiseOr, expr);  
		}
	}

	void AndExpr(
#line  1580 "VBNET.ATG" 
out Expression outExpr) {

#line  1581 "VBNET.ATG" 
		Expression expr; 
		NotExpr(
#line  1582 "VBNET.ATG" 
out outExpr);
		while (la.kind == 44) {
			lexer.NextToken();
			NotExpr(
#line  1582 "VBNET.ATG" 
out expr);

#line  1582 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, BinaryOperatorType.BitwiseAnd, expr);  
		}
	}

	void NotExpr(
#line  1585 "VBNET.ATG" 
out Expression outExpr) {

#line  1586 "VBNET.ATG" 
		UnaryOperatorType uop = UnaryOperatorType.None; 
		while (la.kind == 128) {
			lexer.NextToken();

#line  1587 "VBNET.ATG" 
			uop = UnaryOperatorType.Not; 
		}
		EqualityExpr(
#line  1588 "VBNET.ATG" 
out outExpr);

#line  1589 "VBNET.ATG" 
		if (uop != UnaryOperatorType.None)
		outExpr = new UnaryOperatorExpression(outExpr, uop);
		
	}

	void EqualityExpr(
#line  1594 "VBNET.ATG" 
out Expression outExpr) {

#line  1596 "VBNET.ATG" 
		Expression expr;
		BinaryOperatorType op = BinaryOperatorType.None;
		
		RelationalExpr(
#line  1599 "VBNET.ATG" 
out outExpr);
		while (la.kind == 11 || la.kind == 27 || la.kind == 115) {
			if (la.kind == 27) {
				lexer.NextToken();

#line  1602 "VBNET.ATG" 
				op = BinaryOperatorType.InEquality; 
			} else if (la.kind == 11) {
				lexer.NextToken();

#line  1603 "VBNET.ATG" 
				op = BinaryOperatorType.Equality; 
			} else {
				lexer.NextToken();

#line  1604 "VBNET.ATG" 
				op = BinaryOperatorType.Like; 
			}
			RelationalExpr(
#line  1606 "VBNET.ATG" 
out expr);

#line  1606 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, op, expr);  
		}
	}

	void RelationalExpr(
#line  1610 "VBNET.ATG" 
out Expression outExpr) {

#line  1612 "VBNET.ATG" 
		Expression expr;
		BinaryOperatorType op = BinaryOperatorType.None;
		
		ShiftExpr(
#line  1615 "VBNET.ATG" 
out outExpr);
		while (StartOf(24)) {
			if (StartOf(25)) {
				if (la.kind == 26) {
					lexer.NextToken();

#line  1618 "VBNET.ATG" 
					op = BinaryOperatorType.LessThan; 
				} else if (la.kind == 25) {
					lexer.NextToken();

#line  1619 "VBNET.ATG" 
					op = BinaryOperatorType.GreaterThan; 
				} else if (la.kind == 29) {
					lexer.NextToken();

#line  1620 "VBNET.ATG" 
					op = BinaryOperatorType.LessThanOrEqual; 
				} else if (la.kind == 28) {
					lexer.NextToken();

#line  1621 "VBNET.ATG" 
					op = BinaryOperatorType.GreaterThanOrEqual; 
				} else SynErr(237);
				ShiftExpr(
#line  1623 "VBNET.ATG" 
out expr);

#line  1623 "VBNET.ATG" 
				outExpr = new BinaryOperatorExpression(outExpr, op, expr);  
			} else {
				if (la.kind == 112) {
					lexer.NextToken();

#line  1626 "VBNET.ATG" 
					op = BinaryOperatorType.ReferenceEquality; 
				} else if (la.kind == 189) {
					lexer.NextToken();

#line  1627 "VBNET.ATG" 
					op = BinaryOperatorType.ReferenceInequality; 
				} else SynErr(238);
				Expr(
#line  1628 "VBNET.ATG" 
out expr);

#line  1628 "VBNET.ATG" 
				outExpr = new BinaryOperatorExpression(outExpr, op, expr); 
			}
		}
	}

	void ShiftExpr(
#line  1632 "VBNET.ATG" 
out Expression outExpr) {

#line  1634 "VBNET.ATG" 
		Expression expr;
		BinaryOperatorType op = BinaryOperatorType.None;
		
		AdditiveExpr(
#line  1637 "VBNET.ATG" 
out outExpr);
		while (la.kind == 30 || la.kind == 31) {
			if (la.kind == 30) {
				lexer.NextToken();

#line  1640 "VBNET.ATG" 
				op = BinaryOperatorType.ShiftLeft; 
			} else {
				lexer.NextToken();

#line  1641 "VBNET.ATG" 
				op = BinaryOperatorType.ShiftRight; 
			}
			AdditiveExpr(
#line  1643 "VBNET.ATG" 
out expr);

#line  1643 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, op, expr);  
		}
	}

	void AdditiveExpr(
#line  1647 "VBNET.ATG" 
out Expression outExpr) {

#line  1649 "VBNET.ATG" 
		Expression expr;
		BinaryOperatorType op = BinaryOperatorType.None;
		
		MultiplicativeExpr(
#line  1652 "VBNET.ATG" 
out outExpr);
		while (la.kind == 14 || la.kind == 15 || la.kind == 19) {
			if (la.kind == 14) {
				lexer.NextToken();

#line  1655 "VBNET.ATG" 
				op = BinaryOperatorType.Add; 
			} else if (la.kind == 15) {
				lexer.NextToken();

#line  1656 "VBNET.ATG" 
				op = BinaryOperatorType.Subtract; 
			} else {
				lexer.NextToken();

#line  1657 "VBNET.ATG" 
				op = BinaryOperatorType.Concat; 
			}
			MultiplicativeExpr(
#line  1659 "VBNET.ATG" 
out expr);

#line  1659 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, op, expr);  
		}
	}

	void MultiplicativeExpr(
#line  1663 "VBNET.ATG" 
out Expression outExpr) {

#line  1665 "VBNET.ATG" 
		Expression expr;
		BinaryOperatorType op = BinaryOperatorType.None;
		
		UnaryExpr(
#line  1668 "VBNET.ATG" 
out outExpr);
		while (StartOf(26)) {
			if (la.kind == 16) {
				lexer.NextToken();

#line  1671 "VBNET.ATG" 
				op = BinaryOperatorType.Multiply; 
			} else if (la.kind == 17) {
				lexer.NextToken();

#line  1672 "VBNET.ATG" 
				op = BinaryOperatorType.Divide; 
			} else if (la.kind == 18) {
				lexer.NextToken();

#line  1673 "VBNET.ATG" 
				op = BinaryOperatorType.DivideInteger; 
			} else if (la.kind == 119) {
				lexer.NextToken();

#line  1674 "VBNET.ATG" 
				op = BinaryOperatorType.Modulus; 
			} else {
				lexer.NextToken();

#line  1675 "VBNET.ATG" 
				op = BinaryOperatorType.Power; 
			}
			UnaryExpr(
#line  1677 "VBNET.ATG" 
out expr);

#line  1677 "VBNET.ATG" 
			outExpr = new BinaryOperatorExpression(outExpr, op, expr); 
		}
	}

	void NonArrayTypeName(
#line  1746 "VBNET.ATG" 
out TypeReference typeref) {

#line  1748 "VBNET.ATG" 
		string name;
		typeref = null;
		
		if (StartOf(10)) {
			Qualident(
#line  1751 "VBNET.ATG" 
out name);

#line  1751 "VBNET.ATG" 
			typeref = new TypeReference(name); 
			if (
#line  1752 "VBNET.ATG" 
la.kind == Tokens.OpenParenthesis && Peek(1).kind == Tokens.Of) {
				lexer.NextToken();
				Expect(196);
				TypeArgumentList(
#line  1753 "VBNET.ATG" 
typeref.GenericTypes);
				Expect(24);
			}
		} else if (la.kind == 132) {
			lexer.NextToken();

#line  1755 "VBNET.ATG" 
			typeref = new TypeReference("System.Object"); 
		} else if (la.kind == 194) {
			lexer.NextToken();
			Expect(10);
			Qualident(
#line  1756 "VBNET.ATG" 
out name);

#line  1757 "VBNET.ATG" 
			typeref = new TypeReference(name); typeref.IsGlobal = true; 
			if (
#line  1758 "VBNET.ATG" 
la.kind == Tokens.OpenParenthesis && Peek(1).kind == Tokens.Of) {
				lexer.NextToken();
				Expect(196);
				TypeArgumentList(
#line  1759 "VBNET.ATG" 
typeref.GenericTypes);
				Expect(24);
			}
		} else if (StartOf(21)) {
			PrimitiveTypeName(
#line  1761 "VBNET.ATG" 
out name);

#line  1761 "VBNET.ATG" 
			typeref = new TypeReference(name); 
		} else SynErr(239);
	}

	void ArgumentList(
#line  1703 "VBNET.ATG" 
out ArrayList arguments) {

#line  1705 "VBNET.ATG" 
		arguments = new ArrayList();
		Expression expr = null;
		
		if (StartOf(18)) {
			Argument(
#line  1709 "VBNET.ATG" 
out expr);

#line  1709 "VBNET.ATG" 
			if (expr != null) { arguments.Add(expr); } 
			while (la.kind == 12) {
				lexer.NextToken();
				Argument(
#line  1712 "VBNET.ATG" 
out expr);

#line  1712 "VBNET.ATG" 
				if (expr != null) { arguments.Add(expr); } 
			}
		}
	}

	void ArrayTypeModifiers(
#line  1774 "VBNET.ATG" 
out ArrayList arrayModifiers) {

#line  1776 "VBNET.ATG" 
		arrayModifiers = new ArrayList();
		int i = 0;
		
		while (
#line  1779 "VBNET.ATG" 
IsDims()) {
			Expect(23);
			if (la.kind == 12 || la.kind == 24) {
				RankList(
#line  1781 "VBNET.ATG" 
out i);
			}

#line  1783 "VBNET.ATG" 
			arrayModifiers.Add(i);
			
			Expect(24);
		}

#line  1788 "VBNET.ATG" 
		if(arrayModifiers.Count == 0) {
		 arrayModifiers = null;
		}
		
	}

	void TypeArgumentList(
#line  1801 "VBNET.ATG" 
List<TypeReference> typeArguments) {

#line  1803 "VBNET.ATG" 
		TypeReference typeref;
		
		TypeName(
#line  1805 "VBNET.ATG" 
out typeref);

#line  1805 "VBNET.ATG" 
		if (typeref != null) typeArguments.Add(typeref); 
		while (la.kind == 12) {
			lexer.NextToken();
			TypeName(
#line  1808 "VBNET.ATG" 
out typeref);

#line  1808 "VBNET.ATG" 
			if (typeref != null) typeArguments.Add(typeref); 
		}
	}

	void RankList(
#line  1795 "VBNET.ATG" 
out int i) {

#line  1796 "VBNET.ATG" 
		i = 0; 
		while (la.kind == 12) {
			lexer.NextToken();

#line  1797 "VBNET.ATG" 
			++i; 
		}
	}

	void Attribute(
#line  1833 "VBNET.ATG" 
out ICSharpCode.NRefactory.Parser.AST.Attribute attribute) {

#line  1834 "VBNET.ATG" 
		string name; 
		Qualident(
#line  1835 "VBNET.ATG" 
out name);

#line  1836 "VBNET.ATG" 
		List<Expression> positional = new List<Expression>();
		List<NamedArgumentExpression> named = new List<NamedArgumentExpression>();
		
		if (la.kind == 23) {
			AttributeArguments(
#line  1839 "VBNET.ATG" 
positional, named);
		}

#line  1841 "VBNET.ATG" 
		attribute  = new ICSharpCode.NRefactory.Parser.AST.Attribute(name, positional, named);
		
	}

	void AttributeArguments(
#line  1846 "VBNET.ATG" 
List<Expression> positional, List<NamedArgumentExpression> named) {

#line  1848 "VBNET.ATG" 
		bool nameFound = false;
		string name = "";
		Expression expr;
		
		Expect(23);
		if (
#line  1854 "VBNET.ATG" 
IsNotClosingParenthesis()) {
			if (
#line  1856 "VBNET.ATG" 
IsNamedAssign()) {

#line  1856 "VBNET.ATG" 
				nameFound = true; 
				IdentifierOrKeyword(
#line  1857 "VBNET.ATG" 
out name);
				if (la.kind == 13) {
					lexer.NextToken();
				}
				Expect(11);
			}
			Expr(
#line  1859 "VBNET.ATG" 
out expr);

#line  1861 "VBNET.ATG" 
			if (expr != null) { if(name == "") positional.Add(expr);
			else { named.Add(new NamedArgumentExpression(name, expr)); name = ""; }
			}
			
			while (la.kind == 12) {
				lexer.NextToken();
				if (
#line  1868 "VBNET.ATG" 
IsNamedAssign()) {

#line  1868 "VBNET.ATG" 
					nameFound = true; 
					IdentifierOrKeyword(
#line  1869 "VBNET.ATG" 
out name);
					if (la.kind == 13) {
						lexer.NextToken();
					}
					Expect(11);
				} else if (StartOf(18)) {

#line  1871 "VBNET.ATG" 
					if (nameFound) Error("no positional argument after named argument"); 
				} else SynErr(240);
				Expr(
#line  1872 "VBNET.ATG" 
out expr);

#line  1872 "VBNET.ATG" 
				if (expr != null) { if(name == "") positional.Add(expr);
				else { named.Add(new NamedArgumentExpression(name, expr)); name = ""; }
				}
				
			}
		}
		Expect(24);
	}

	void FormalParameter(
#line  1941 "VBNET.ATG" 
out ParameterDeclarationExpression p) {

#line  1943 "VBNET.ATG" 
		TypeReference type = null;
		ParamModifiers mod = new ParamModifiers(this);
		Expression expr = null;
		p = null;ArrayList arrayModifiers = null;
		
		while (StartOf(27)) {
			ParameterModifier(
#line  1948 "VBNET.ATG" 
mod);
		}
		Identifier();

#line  1949 "VBNET.ATG" 
		string parameterName = t.val; 
		if (
#line  1950 "VBNET.ATG" 
IsDims()) {
			ArrayTypeModifiers(
#line  1950 "VBNET.ATG" 
out arrayModifiers);
		}
		if (la.kind == 47) {
			lexer.NextToken();
			TypeName(
#line  1951 "VBNET.ATG" 
out type);
		}

#line  1953 "VBNET.ATG" 
		if(type != null) {
		if (arrayModifiers != null) {
			if (type.RankSpecifier != null) {
				Error("array rank only allowed one time");
			} else {
				type.RankSpecifier = (int[])arrayModifiers.ToArray(typeof(int));
			}
		}
		} else {
			type = new TypeReference("System.Object", arrayModifiers == null ? null : (int[])arrayModifiers.ToArray(typeof(int)));
		}
		
		if (la.kind == 11) {
			lexer.NextToken();
			Expr(
#line  1965 "VBNET.ATG" 
out expr);
		}

#line  1967 "VBNET.ATG" 
		mod.Check();
		p = new ParameterDeclarationExpression(type, parameterName, mod.Modifier, expr);
		
	}

	void ParameterModifier(
#line  2739 "VBNET.ATG" 
ParamModifiers m) {
		if (la.kind == 54) {
			lexer.NextToken();

#line  2740 "VBNET.ATG" 
			m.Add(ParamModifier.In); 
		} else if (la.kind == 52) {
			lexer.NextToken();

#line  2741 "VBNET.ATG" 
			m.Add(ParamModifier.Ref); 
		} else if (la.kind == 136) {
			lexer.NextToken();

#line  2742 "VBNET.ATG" 
			m.Add(ParamModifier.Optional); 
		} else if (la.kind == 143) {
			lexer.NextToken();

#line  2743 "VBNET.ATG" 
			m.Add(ParamModifier.Params); 
		} else SynErr(241);
	}

	void Statement() {

#line  1995 "VBNET.ATG" 
		Statement stmt = null;
		Point startPos = la.Location;
		string label = String.Empty;
		
		
		if (la.kind == 1 || la.kind == 13) {
		} else if (
#line  2001 "VBNET.ATG" 
IsLabel()) {
			LabelName(
#line  2001 "VBNET.ATG" 
out label);

#line  2003 "VBNET.ATG" 
			compilationUnit.AddChild(new LabelStatement(t.val));
			
			Expect(13);
			Statement();
		} else if (StartOf(28)) {
			EmbeddedStatement(
#line  2006 "VBNET.ATG" 
out stmt);

#line  2006 "VBNET.ATG" 
			compilationUnit.AddChild(stmt); 
		} else if (StartOf(29)) {
			LocalDeclarationStatement(
#line  2007 "VBNET.ATG" 
out stmt);

#line  2007 "VBNET.ATG" 
			compilationUnit.AddChild(stmt); 
		} else SynErr(242);

#line  2010 "VBNET.ATG" 
		if (stmt != null) {
		stmt.StartLocation = startPos;
		stmt.EndLocation = t.Location;
		}
		
	}

	void LabelName(
#line  2391 "VBNET.ATG" 
out string name) {

#line  2393 "VBNET.ATG" 
		name = String.Empty;
		
		if (StartOf(10)) {
			Identifier();

#line  2395 "VBNET.ATG" 
			name = t.val; 
		} else if (la.kind == 5) {
			lexer.NextToken();

#line  2396 "VBNET.ATG" 
			name = t.val; 
		} else SynErr(243);
	}

	void EmbeddedStatement(
#line  2049 "VBNET.ATG" 
out Statement statement) {

#line  2051 "VBNET.ATG" 
		Statement embeddedStatement = null;
		statement = null;
		Expression expr = null;
		string name = String.Empty;ArrayList p = null;
		
		switch (la.kind) {
		case 93: {
			lexer.NextToken();

#line  2056 "VBNET.ATG" 
			ExitType exitType = ExitType.None; 
			switch (la.kind) {
			case 167: {
				lexer.NextToken();

#line  2058 "VBNET.ATG" 
				exitType = ExitType.Sub; 
				break;
			}
			case 99: {
				lexer.NextToken();

#line  2060 "VBNET.ATG" 
				exitType = ExitType.Function; 
				break;
			}
			case 146: {
				lexer.NextToken();

#line  2062 "VBNET.ATG" 
				exitType = ExitType.Property; 
				break;
			}
			case 82: {
				lexer.NextToken();

#line  2064 "VBNET.ATG" 
				exitType = ExitType.Do; 
				break;
			}
			case 97: {
				lexer.NextToken();

#line  2066 "VBNET.ATG" 
				exitType = ExitType.For; 
				break;
			}
			case 174: {
				lexer.NextToken();

#line  2068 "VBNET.ATG" 
				exitType = ExitType.Try; 
				break;
			}
			case 181: {
				lexer.NextToken();

#line  2070 "VBNET.ATG" 
				exitType = ExitType.While; 
				break;
			}
			case 155: {
				lexer.NextToken();

#line  2072 "VBNET.ATG" 
				exitType = ExitType.Select; 
				break;
			}
			default: SynErr(244); break;
			}

#line  2074 "VBNET.ATG" 
			statement = new ExitStatement(exitType); 
			break;
		}
		case 174: {
			TryStatement(
#line  2075 "VBNET.ATG" 
out statement);
			break;
		}
		case 186: {
			lexer.NextToken();

#line  2076 "VBNET.ATG" 
			ContinueType continueType = ContinueType.None; 
			if (la.kind == 82 || la.kind == 97 || la.kind == 181) {
				if (la.kind == 82) {
					lexer.NextToken();

#line  2076 "VBNET.ATG" 
					continueType = ContinueType.Do; 
				} else if (la.kind == 97) {
					lexer.NextToken();

#line  2076 "VBNET.ATG" 
					continueType = ContinueType.For; 
				} else {
					lexer.NextToken();

#line  2076 "VBNET.ATG" 
					continueType = ContinueType.While; 
				}
			}

#line  2076 "VBNET.ATG" 
			statement = new ContinueStatement(continueType); 
			break;
		}
		case 171: {
			lexer.NextToken();
			if (StartOf(18)) {
				Expr(
#line  2078 "VBNET.ATG" 
out expr);
			}

#line  2078 "VBNET.ATG" 
			statement = new ThrowStatement(expr); 
			break;
		}
		case 154: {
			lexer.NextToken();
			if (StartOf(18)) {
				Expr(
#line  2080 "VBNET.ATG" 
out expr);
			}

#line  2080 "VBNET.ATG" 
			statement = new ReturnStatement(expr); 
			break;
		}
		case 168: {
			lexer.NextToken();
			Expr(
#line  2082 "VBNET.ATG" 
out expr);
			EndOfStmt();
			Block(
#line  2082 "VBNET.ATG" 
out embeddedStatement);
			Expect(87);
			Expect(168);

#line  2083 "VBNET.ATG" 
			statement = new LockStatement(expr, embeddedStatement); 
			break;
		}
		case 149: {
			lexer.NextToken();
			Identifier();

#line  2085 "VBNET.ATG" 
			name = t.val; 
			if (la.kind == 23) {
				lexer.NextToken();
				if (StartOf(17)) {
					ArgumentList(
#line  2086 "VBNET.ATG" 
out p);
				}
				Expect(24);
			}

#line  2087 "VBNET.ATG" 
			statement = new RaiseEventStatement(name, p); 
			break;
		}
		case 182: {
			WithStatement(
#line  2089 "VBNET.ATG" 
out statement);
			break;
		}
		case 41: {
			lexer.NextToken();

#line  2091 "VBNET.ATG" 
			Expression handlerExpr = null; 
			Expr(
#line  2092 "VBNET.ATG" 
out expr);
			Expect(12);
			Expr(
#line  2092 "VBNET.ATG" 
out handlerExpr);

#line  2094 "VBNET.ATG" 
			statement = new AddHandlerStatement(expr, handlerExpr);
			
			break;
		}
		case 152: {
			lexer.NextToken();

#line  2097 "VBNET.ATG" 
			Expression handlerExpr = null; 
			Expr(
#line  2098 "VBNET.ATG" 
out expr);
			Expect(12);
			Expr(
#line  2098 "VBNET.ATG" 
out handlerExpr);

#line  2100 "VBNET.ATG" 
			statement = new RemoveHandlerStatement(expr, handlerExpr);
			
			break;
		}
		case 181: {
			lexer.NextToken();
			Expr(
#line  2103 "VBNET.ATG" 
out expr);
			EndOfStmt();
			Block(
#line  2104 "VBNET.ATG" 
out embeddedStatement);
			Expect(87);
			Expect(181);

#line  2106 "VBNET.ATG" 
			statement = new DoLoopStatement(expr, embeddedStatement, ConditionType.While, ConditionPosition.Start);
			
			break;
		}
		case 82: {
			lexer.NextToken();

#line  2111 "VBNET.ATG" 
			ConditionType conditionType = ConditionType.None;
			
			if (la.kind == 177 || la.kind == 181) {
				WhileOrUntil(
#line  2114 "VBNET.ATG" 
out conditionType);
				Expr(
#line  2114 "VBNET.ATG" 
out expr);
				EndOfStmt();
				Block(
#line  2115 "VBNET.ATG" 
out embeddedStatement);
				Expect(117);

#line  2118 "VBNET.ATG" 
				statement = new DoLoopStatement(expr, 
				                               embeddedStatement, 
				                               conditionType == ConditionType.While ? ConditionType.DoWhile : conditionType, 
				                               ConditionPosition.Start);
				
			} else if (la.kind == 1 || la.kind == 13) {
				EndOfStmt();
				Block(
#line  2125 "VBNET.ATG" 
out embeddedStatement);
				Expect(117);
				if (la.kind == 177 || la.kind == 181) {
					WhileOrUntil(
#line  2126 "VBNET.ATG" 
out conditionType);
					Expr(
#line  2126 "VBNET.ATG" 
out expr);
				}

#line  2128 "VBNET.ATG" 
				statement = new DoLoopStatement(expr, embeddedStatement, conditionType, ConditionPosition.End);
				
			} else SynErr(245);
			break;
		}
		case 97: {
			lexer.NextToken();

#line  2133 "VBNET.ATG" 
			Expression group = null;
			TypeReference typeReference;
			string        typeName;
			Point startLocation = t.Location;
			
			if (la.kind == 84) {
				lexer.NextToken();
				LoopControlVariable(
#line  2140 "VBNET.ATG" 
out typeReference, out typeName);
				Expect(108);
				Expr(
#line  2141 "VBNET.ATG" 
out group);
				EndOfStmt();
				Block(
#line  2142 "VBNET.ATG" 
out embeddedStatement);
				Expect(127);
				if (StartOf(18)) {
					Expr(
#line  2143 "VBNET.ATG" 
out expr);
				}

#line  2145 "VBNET.ATG" 
				statement = new ForeachStatement(typeReference, 
				                                typeName,
				                                group, 
				                                embeddedStatement, 
				                                expr);
				statement.StartLocation = startLocation;
				statement.EndLocation   = t.EndLocation;
				
				
			} else if (StartOf(10)) {

#line  2156 "VBNET.ATG" 
				Expression start = null;
				Expression end = null;
				Expression step = null;
				Expression nextExpr = null;ArrayList nextExpressions = null;
				
				LoopControlVariable(
#line  2161 "VBNET.ATG" 
out typeReference, out typeName);
				Expect(11);
				Expr(
#line  2162 "VBNET.ATG" 
out start);
				Expect(172);
				Expr(
#line  2162 "VBNET.ATG" 
out end);
				if (la.kind == 162) {
					lexer.NextToken();
					Expr(
#line  2162 "VBNET.ATG" 
out step);
				}
				EndOfStmt();
				Block(
#line  2163 "VBNET.ATG" 
out embeddedStatement);
				Expect(127);
				if (StartOf(18)) {
					Expr(
#line  2166 "VBNET.ATG" 
out nextExpr);

#line  2166 "VBNET.ATG" 
					nextExpressions = new ArrayList(); nextExpressions.Add(nextExpr); 
					while (la.kind == 12) {
						lexer.NextToken();
						Expr(
#line  2167 "VBNET.ATG" 
out nextExpr);

#line  2167 "VBNET.ATG" 
						nextExpressions.Add(nextExpr); 
					}
				}

#line  2170 "VBNET.ATG" 
				statement = new ForNextStatement(typeReference, typeName, start, end, step, embeddedStatement, nextExpressions);
				
			} else SynErr(246);
			break;
		}
		case 91: {
			lexer.NextToken();
			Expr(
#line  2174 "VBNET.ATG" 
out expr);

#line  2174 "VBNET.ATG" 
			statement = new ErrorStatement(expr); 
			break;
		}
		case 151: {
			lexer.NextToken();

#line  2176 "VBNET.ATG" 
			Expression redimclause = null; bool isPreserve = false; 
			if (la.kind == 144) {
				lexer.NextToken();

#line  2176 "VBNET.ATG" 
				isPreserve = true; 
			}
			Expr(
#line  2177 "VBNET.ATG" 
out redimclause);

#line  2179 "VBNET.ATG" 
			ReDimStatement reDimStatement = new ReDimStatement(isPreserve);
			statement = reDimStatement;
			reDimStatement.ReDimClauses.Add(redimclause as InvocationExpression);
			
			while (la.kind == 12) {
				lexer.NextToken();
				Expr(
#line  2183 "VBNET.ATG" 
out redimclause);

#line  2183 "VBNET.ATG" 
				reDimStatement.ReDimClauses.Add(redimclause as InvocationExpression); 
			}
			break;
		}
		case 90: {
			lexer.NextToken();
			Expr(
#line  2186 "VBNET.ATG" 
out expr);

#line  2187 "VBNET.ATG" 
			ArrayList arrays = new ArrayList();
			if (expr != null) { arrays.Add(expr);}
			EraseStatement eraseStatement = new EraseStatement(arrays);
			
			
			while (la.kind == 12) {
				lexer.NextToken();
				Expr(
#line  2192 "VBNET.ATG" 
out expr);

#line  2192 "VBNET.ATG" 
				if (expr != null) { arrays.Add(expr); }
			}

#line  2193 "VBNET.ATG" 
			statement = eraseStatement; 
			break;
		}
		case 163: {
			lexer.NextToken();

#line  2195 "VBNET.ATG" 
			statement = new StopStatement(); 
			break;
		}
		case 105: {
			lexer.NextToken();
			Expr(
#line  2197 "VBNET.ATG" 
out expr);
			if (la.kind == 170) {
				lexer.NextToken();
			}
			if (
#line  2199 "VBNET.ATG" 
IsEndStmtAhead()) {
				Expect(87);

#line  2199 "VBNET.ATG" 
				statement = new IfElseStatement(expr, new EndStatement()); 
			} else if (la.kind == 1 || la.kind == 13) {
				EndOfStmt();
				Block(
#line  2202 "VBNET.ATG" 
out embeddedStatement);

#line  2204 "VBNET.ATG" 
				IfElseStatement ifStatement = new IfElseStatement(expr, embeddedStatement);
				
				while (la.kind == 86 || 
#line  2208 "VBNET.ATG" 
IsElseIf()) {
					if (
#line  2208 "VBNET.ATG" 
IsElseIf()) {
						Expect(85);
						Expect(105);
					} else {
						lexer.NextToken();
					}

#line  2211 "VBNET.ATG" 
					Expression condition = null; Statement block = null; 
					Expr(
#line  2212 "VBNET.ATG" 
out condition);
					if (la.kind == 170) {
						lexer.NextToken();
					}
					EndOfStmt();
					Block(
#line  2213 "VBNET.ATG" 
out block);

#line  2215 "VBNET.ATG" 
					ifStatement.ElseIfSections.Add(new ElseIfSection(condition, block));
					
				}
				if (la.kind == 85) {
					lexer.NextToken();
					EndOfStmt();
					Block(
#line  2220 "VBNET.ATG" 
out embeddedStatement);

#line  2222 "VBNET.ATG" 
					ifStatement.FalseStatement.Add(embeddedStatement);
					
				}
				Expect(87);
				Expect(105);

#line  2226 "VBNET.ATG" 
				statement = ifStatement;
				
			} else if (StartOf(28)) {
				EmbeddedStatement(
#line  2229 "VBNET.ATG" 
out embeddedStatement);

#line  2231 "VBNET.ATG" 
				IfElseStatement ifStatement = new IfElseStatement(expr, embeddedStatement);
				
				while (la.kind == 13) {
					lexer.NextToken();
					EmbeddedStatement(
#line  2233 "VBNET.ATG" 
out embeddedStatement);

#line  2233 "VBNET.ATG" 
					ifStatement.TrueStatement.Add(embeddedStatement); 
				}
				if (la.kind == 85) {
					lexer.NextToken();
					if (StartOf(28)) {
						EmbeddedStatement(
#line  2235 "VBNET.ATG" 
out embeddedStatement);
					}

#line  2237 "VBNET.ATG" 
					ifStatement.FalseStatement.Add(embeddedStatement);
					
					while (la.kind == 13) {
						lexer.NextToken();
						EmbeddedStatement(
#line  2240 "VBNET.ATG" 
out embeddedStatement);

#line  2241 "VBNET.ATG" 
						ifStatement.FalseStatement.Add(embeddedStatement); 
					}
				}

#line  2244 "VBNET.ATG" 
				statement = ifStatement; 
			} else SynErr(247);
			break;
		}
		case 155: {
			lexer.NextToken();
			if (la.kind == 56) {
				lexer.NextToken();
			}
			Expr(
#line  2247 "VBNET.ATG" 
out expr);
			EndOfStmt();

#line  2248 "VBNET.ATG" 
			ArrayList selectSections = new ArrayList();
			Statement block = null;
			
			while (la.kind == 56) {

#line  2252 "VBNET.ATG" 
				ArrayList caseClauses = null; 
				lexer.NextToken();
				CaseClauses(
#line  2253 "VBNET.ATG" 
out caseClauses);
				if (
#line  2253 "VBNET.ATG" 
IsNotStatementSeparator()) {
					lexer.NextToken();
				}
				EndOfStmt();

#line  2255 "VBNET.ATG" 
				SwitchSection selectSection = new SwitchSection(caseClauses);
				
				Block(
#line  2257 "VBNET.ATG" 
out block);

#line  2259 "VBNET.ATG" 
				selectSection.Children = block.Children;
				selectSections.Add(selectSection);
				
			}

#line  2263 "VBNET.ATG" 
			statement = new SwitchStatement(expr, selectSections); 
			Expect(87);
			Expect(155);
			break;
		}
		case 134: {

#line  2265 "VBNET.ATG" 
			OnErrorStatement onErrorStatement = null; 
			OnErrorStatement(
#line  2266 "VBNET.ATG" 
out onErrorStatement);

#line  2266 "VBNET.ATG" 
			statement = onErrorStatement; 
			break;
		}
		case 103: {

#line  2267 "VBNET.ATG" 
			GotoStatement goToStatement = null; 
			GotoStatement(
#line  2268 "VBNET.ATG" 
out goToStatement);

#line  2268 "VBNET.ATG" 
			statement = goToStatement; 
			break;
		}
		case 153: {

#line  2269 "VBNET.ATG" 
			ResumeStatement resumeStatement = null; 
			ResumeStatement(
#line  2270 "VBNET.ATG" 
out resumeStatement);

#line  2270 "VBNET.ATG" 
			statement = resumeStatement; 
			break;
		}
		case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 14: case 15: case 16: case 23: case 42: case 50: case 51: case 53: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 67: case 68: case 69: case 71: case 72: case 73: case 74: case 75: case 76: case 81: case 83: case 95: case 101: case 110: case 116: case 118: case 123: case 124: case 126: case 129: case 159: case 160: case 165: case 169: case 173: case 175: case 190: case 191: case 192: case 193: case 195: {

#line  2273 "VBNET.ATG" 
			Expression val = null;
			AssignmentOperatorType op;
			
			bool mustBeAssignment = la.kind == Tokens.Plus  || la.kind == Tokens.Minus ||
			                        la.kind == Tokens.Not   || la.kind == Tokens.Times;
			
			UnaryExpr(
#line  2279 "VBNET.ATG" 
out expr);
			if (StartOf(30)) {
				AssignmentOperator(
#line  2281 "VBNET.ATG" 
out op);
				Expr(
#line  2281 "VBNET.ATG" 
out val);

#line  2281 "VBNET.ATG" 
				expr = new AssignmentExpression(expr, op, val); 
			} else if (la.kind == 1 || la.kind == 13 || la.kind == 85) {

#line  2282 "VBNET.ATG" 
				if (mustBeAssignment) Error("error in assignment."); 
			} else SynErr(248);

#line  2285 "VBNET.ATG" 
			// a field reference expression that stands alone is a
			// invocation expression without parantheses and arguments
			if(expr is FieldReferenceExpression || expr is IdentifierExpression) {
				expr = new InvocationExpression(expr);
			}
			statement = new StatementExpression(expr);
			
			break;
		}
		case 55: {
			lexer.NextToken();
			UnaryExpr(
#line  2292 "VBNET.ATG" 
out expr);

#line  2292 "VBNET.ATG" 
			statement = new StatementExpression(expr); 
			break;
		}
		case 188: {
			lexer.NextToken();
			Identifier();

#line  2294 "VBNET.ATG" 
			string resourcename = t.val, typeName; 
			Statement resourceAquisition = null, block = null;
			
			Expect(47);
			if (la.kind == 126) {
				lexer.NextToken();
				Qualident(
#line  2298 "VBNET.ATG" 
out typeName);

#line  2298 "VBNET.ATG" 
				ArrayList initializer = null; 
				if (la.kind == 23) {
					lexer.NextToken();
					if (StartOf(17)) {
						ArgumentList(
#line  2298 "VBNET.ATG" 
out initializer);
					}
					Expect(24);
				}

#line  2300 "VBNET.ATG" 
				resourceAquisition =  new LocalVariableDeclaration(new VariableDeclaration(resourcename, new ArrayInitializerExpression(initializer), new TypeReference(typeName)));
				
				
			} else if (StartOf(10)) {
				Qualident(
#line  2303 "VBNET.ATG" 
out typeName);
				Expect(11);
				Expr(
#line  2303 "VBNET.ATG" 
out expr);

#line  2305 "VBNET.ATG" 
				resourceAquisition =  new LocalVariableDeclaration(new VariableDeclaration(resourcename, expr, new TypeReference(typeName)));
				
			} else SynErr(249);
			Block(
#line  2308 "VBNET.ATG" 
out block);
			Expect(87);
			Expect(188);

#line  2310 "VBNET.ATG" 
			statement = new UsingStatement(resourceAquisition, block); 
			break;
		}
		default: SynErr(250); break;
		}
	}

	void LocalDeclarationStatement(
#line  2018 "VBNET.ATG" 
out Statement statement) {

#line  2020 "VBNET.ATG" 
		Modifiers m = new Modifiers();
		LocalVariableDeclaration localVariableDeclaration;
		bool dimfound = false;
		
		while (la.kind == 70 || la.kind == 80 || la.kind == 161) {
			if (la.kind == 70) {
				lexer.NextToken();

#line  2026 "VBNET.ATG" 
				m.Add(Modifier.Const); 
			} else if (la.kind == 161) {
				lexer.NextToken();

#line  2027 "VBNET.ATG" 
				m.Add(Modifier.Static); 
			} else {
				lexer.NextToken();

#line  2028 "VBNET.ATG" 
				dimfound = true; 
			}
		}

#line  2031 "VBNET.ATG" 
		if(dimfound && (m.Modifier & Modifier.Const) != 0) {
		Error("Dim is not allowed on constants.");
		}
		
		if(m.isNone && dimfound == false) {
			Error("Const, Dim or Static expected");
		}
		
		localVariableDeclaration = new LocalVariableDeclaration(m.Modifier);
		localVariableDeclaration.StartLocation = t.Location;
		
		VariableDeclarator(
#line  2042 "VBNET.ATG" 
localVariableDeclaration.Variables);
		while (la.kind == 12) {
			lexer.NextToken();
			VariableDeclarator(
#line  2043 "VBNET.ATG" 
localVariableDeclaration.Variables);
		}

#line  2045 "VBNET.ATG" 
		statement = localVariableDeclaration;
		
	}

	void TryStatement(
#line  2503 "VBNET.ATG" 
out Statement tryStatement) {

#line  2505 "VBNET.ATG" 
		Statement blockStmt = null, finallyStmt = null;ArrayList catchClauses = null;
		
		Expect(174);
		EndOfStmt();
		Block(
#line  2508 "VBNET.ATG" 
out blockStmt);
		if (la.kind == 57 || la.kind == 87 || la.kind == 96) {
			CatchClauses(
#line  2509 "VBNET.ATG" 
out catchClauses);
		}
		if (la.kind == 96) {
			lexer.NextToken();
			EndOfStmt();
			Block(
#line  2510 "VBNET.ATG" 
out finallyStmt);
		}
		Expect(87);
		Expect(174);

#line  2513 "VBNET.ATG" 
		tryStatement = new TryCatchStatement(blockStmt, catchClauses, finallyStmt);
		
	}

	void WithStatement(
#line  2481 "VBNET.ATG" 
out Statement withStatement) {

#line  2483 "VBNET.ATG" 
		Statement blockStmt = null;
		Expression expr = null;
		
		Expect(182);

#line  2486 "VBNET.ATG" 
		Point start = t.Location; 
		Expr(
#line  2487 "VBNET.ATG" 
out expr);
		EndOfStmt();

#line  2489 "VBNET.ATG" 
		withStatement = new WithStatement(expr);
		withStatement.StartLocation = start;
		withStatements.Push(withStatement);
		
		Block(
#line  2493 "VBNET.ATG" 
out blockStmt);

#line  2495 "VBNET.ATG" 
		((WithStatement)withStatement).Body = (BlockStatement)blockStmt;
		withStatements.Pop();
		
		Expect(87);
		Expect(182);

#line  2499 "VBNET.ATG" 
		withStatement.EndLocation = t.Location; 
	}

	void WhileOrUntil(
#line  2474 "VBNET.ATG" 
out ConditionType conditionType) {

#line  2475 "VBNET.ATG" 
		conditionType = ConditionType.None; 
		if (la.kind == 181) {
			lexer.NextToken();

#line  2476 "VBNET.ATG" 
			conditionType = ConditionType.While; 
		} else if (la.kind == 177) {
			lexer.NextToken();

#line  2477 "VBNET.ATG" 
			conditionType = ConditionType.Until; 
		} else SynErr(251);
	}

	void LoopControlVariable(
#line  2315 "VBNET.ATG" 
out TypeReference type, out string name) {

#line  2316 "VBNET.ATG" 
		ArrayList arrayModifiers = null;
		type = null;
		
		Qualident(
#line  2320 "VBNET.ATG" 
out name);
		if (
#line  2321 "VBNET.ATG" 
IsDims()) {
			ArrayTypeModifiers(
#line  2321 "VBNET.ATG" 
out arrayModifiers);
		}
		if (la.kind == 47) {
			lexer.NextToken();
			TypeName(
#line  2322 "VBNET.ATG" 
out type);

#line  2322 "VBNET.ATG" 
			if (name.IndexOf('.') > 0) { Error("No type def for 'for each' member indexer allowed."); } 
		}

#line  2324 "VBNET.ATG" 
		if (type != null) {
		if(type.RankSpecifier != null && arrayModifiers != null) {
			Error("array rank only allowed one time");
		} else if (arrayModifiers != null) {
			type.RankSpecifier = (int[])arrayModifiers.ToArray(typeof(int));
		}
		} else {
			if (arrayModifiers != null) {
				type = new TypeReference("Integer", (int[])arrayModifiers.ToArray(typeof(int)));
			} else {
				type = new TypeReference("Integer");
			}
		}
		
	}

	void CaseClauses(
#line  2434 "VBNET.ATG" 
out ArrayList caseClauses) {

#line  2436 "VBNET.ATG" 
		caseClauses = new ArrayList();
		CaseLabel caseClause = null;
		
		CaseClause(
#line  2439 "VBNET.ATG" 
out caseClause);

#line  2439 "VBNET.ATG" 
		caseClauses.Add(caseClause); 
		while (la.kind == 12) {
			lexer.NextToken();
			CaseClause(
#line  2440 "VBNET.ATG" 
out caseClause);

#line  2440 "VBNET.ATG" 
			caseClauses.Add(caseClause); 
		}
	}

	void OnErrorStatement(
#line  2341 "VBNET.ATG" 
out OnErrorStatement stmt) {

#line  2343 "VBNET.ATG" 
		stmt = null;
		GotoStatement goToStatement = null;
		
		Expect(134);
		Expect(91);
		if (
#line  2349 "VBNET.ATG" 
IsNegativeLabelName()) {
			Expect(103);
			Expect(15);
			Expect(5);

#line  2351 "VBNET.ATG" 
			long intLabel = Int64.Parse(t.val);
			if(intLabel != 1) {
				Error("invalid label in on error statement.");
			}
			stmt = new OnErrorStatement(new GotoStatement((intLabel * -1).ToString()));
			
		} else if (la.kind == 103) {
			GotoStatement(
#line  2357 "VBNET.ATG" 
out goToStatement);

#line  2359 "VBNET.ATG" 
			string val = goToStatement.Label;
			
			// if value is numeric, make sure that is 0
			try {
				long intLabel = Int64.Parse(val);
				if(intLabel != 0) {
					Error("invalid label in on error statement.");
				}
			} catch {
			}
			stmt = new OnErrorStatement(goToStatement);
			
		} else if (la.kind == 153) {
			lexer.NextToken();
			Expect(127);

#line  2373 "VBNET.ATG" 
			stmt = new OnErrorStatement(new ResumeStatement(true));
			
		} else SynErr(252);
	}

	void GotoStatement(
#line  2379 "VBNET.ATG" 
out ICSharpCode.NRefactory.Parser.AST.GotoStatement goToStatement) {

#line  2381 "VBNET.ATG" 
		string label = String.Empty;
		
		Expect(103);
		LabelName(
#line  2384 "VBNET.ATG" 
out label);

#line  2386 "VBNET.ATG" 
		goToStatement = new ICSharpCode.NRefactory.Parser.AST.GotoStatement(label);
		
	}

	void ResumeStatement(
#line  2423 "VBNET.ATG" 
out ResumeStatement resumeStatement) {

#line  2425 "VBNET.ATG" 
		resumeStatement = null;
		string label = String.Empty;
		
		if (
#line  2428 "VBNET.ATG" 
IsResumeNext()) {
			Expect(153);
			Expect(127);

#line  2429 "VBNET.ATG" 
			resumeStatement = new ResumeStatement(true); 
		} else if (la.kind == 153) {
			lexer.NextToken();
			if (StartOf(31)) {
				LabelName(
#line  2430 "VBNET.ATG" 
out label);
			}

#line  2430 "VBNET.ATG" 
			resumeStatement = new ResumeStatement(label); 
		} else SynErr(253);
	}

	void CaseClause(
#line  2444 "VBNET.ATG" 
out CaseLabel caseClause) {

#line  2446 "VBNET.ATG" 
		Expression expr = null;
		Expression sexpr = null;
		BinaryOperatorType op = BinaryOperatorType.None;
		caseClause = null;
		
		if (la.kind == 85) {
			lexer.NextToken();

#line  2452 "VBNET.ATG" 
			caseClause = new CaseLabel(); 
		} else if (StartOf(32)) {
			if (la.kind == 112) {
				lexer.NextToken();
			}
			switch (la.kind) {
			case 26: {
				lexer.NextToken();

#line  2456 "VBNET.ATG" 
				op = BinaryOperatorType.LessThan; 
				break;
			}
			case 25: {
				lexer.NextToken();

#line  2457 "VBNET.ATG" 
				op = BinaryOperatorType.GreaterThan; 
				break;
			}
			case 29: {
				lexer.NextToken();

#line  2458 "VBNET.ATG" 
				op = BinaryOperatorType.LessThanOrEqual; 
				break;
			}
			case 28: {
				lexer.NextToken();

#line  2459 "VBNET.ATG" 
				op = BinaryOperatorType.GreaterThanOrEqual; 
				break;
			}
			case 11: {
				lexer.NextToken();

#line  2460 "VBNET.ATG" 
				op = BinaryOperatorType.Equality; 
				break;
			}
			case 27: {
				lexer.NextToken();

#line  2461 "VBNET.ATG" 
				op = BinaryOperatorType.InEquality; 
				break;
			}
			default: SynErr(254); break;
			}
			Expr(
#line  2463 "VBNET.ATG" 
out expr);

#line  2465 "VBNET.ATG" 
			caseClause = new CaseLabel(op, expr);
			
		} else if (StartOf(18)) {
			Expr(
#line  2467 "VBNET.ATG" 
out expr);
			if (la.kind == 172) {
				lexer.NextToken();
				Expr(
#line  2467 "VBNET.ATG" 
out sexpr);
			}

#line  2469 "VBNET.ATG" 
			caseClause = new CaseLabel(expr, sexpr);
			
		} else SynErr(255);
	}

	void CatchClauses(
#line  2518 "VBNET.ATG" 
out ArrayList catchClauses) {

#line  2520 "VBNET.ATG" 
		catchClauses = new ArrayList();
		TypeReference type = null;
		Statement blockStmt = null;
		Expression expr = null;
		string name = String.Empty;
		
		while (la.kind == 57) {
			lexer.NextToken();
			if (StartOf(10)) {
				Identifier();

#line  2528 "VBNET.ATG" 
				name = t.val; 
				if (la.kind == 47) {
					lexer.NextToken();
					TypeName(
#line  2528 "VBNET.ATG" 
out type);
				}
			}
			if (la.kind == 180) {
				lexer.NextToken();
				Expr(
#line  2529 "VBNET.ATG" 
out expr);
			}
			EndOfStmt();
			Block(
#line  2531 "VBNET.ATG" 
out blockStmt);

#line  2532 "VBNET.ATG" 
			catchClauses.Add(new CatchClause(type, name, blockStmt, expr)); 
		}
	}


	public Parser(ILexer lexer) : base(lexer)
	{
	}
	
	public override void Parse()
	{
		VBNET();

	}
	
	protected void ExpectWeak(int n, int follow)
	{
		if (lexer.LookAhead.kind == n) {
			lexer.NextToken();
		} else {
			SynErr(n);
			while (!StartOf(follow)) {
				lexer.NextToken();
			}
		}
	}
	
	protected bool WeakSeparator(int n, int syFol, int repFol)
	{
		bool[] s = new bool[maxT + 1];
		
		if (lexer.LookAhead.kind == n) {
			lexer.NextToken();
			return true;
		} else if (StartOf(repFol)) {
			return false;
		} else {
			for (int i = 0; i <= maxT; i++) {
				s[i] = set[syFol, i] || set[repFol, i] || set[0, i];
			}
			SynErr(n);
			while (!s[lexer.LookAhead.kind]) {
				lexer.NextToken();
			}
			return StartOf(syFol);
		}
	}
	
	protected override void SynErr(int line, int col, int errorNumber)
	{
		errors.count++; 
		string s;
		switch (errorNumber) {
			case 0: s = "EOF expected"; break;
			case 1: s = "EOL expected"; break;
			case 2: s = "ident expected"; break;
			case 3: s = "LiteralString expected"; break;
			case 4: s = "LiteralCharacter expected"; break;
			case 5: s = "LiteralInteger expected"; break;
			case 6: s = "LiteralDouble expected"; break;
			case 7: s = "LiteralSingle expected"; break;
			case 8: s = "LiteralDecimal expected"; break;
			case 9: s = "LiteralDate expected"; break;
			case 10: s = "\".\" expected"; break;
			case 11: s = "\"=\" expected"; break;
			case 12: s = "\",\" expected"; break;
			case 13: s = "\":\" expected"; break;
			case 14: s = "\"+\" expected"; break;
			case 15: s = "\"-\" expected"; break;
			case 16: s = "\"*\" expected"; break;
			case 17: s = "\"/\" expected"; break;
			case 18: s = "\"\\\\\" expected"; break;
			case 19: s = "\"&\" expected"; break;
			case 20: s = "\"^\" expected"; break;
			case 21: s = "\"{\" expected"; break;
			case 22: s = "\"}\" expected"; break;
			case 23: s = "\"(\" expected"; break;
			case 24: s = "\")\" expected"; break;
			case 25: s = "\">\" expected"; break;
			case 26: s = "\"<\" expected"; break;
			case 27: s = "\"<>\" expected"; break;
			case 28: s = "\">=\" expected"; break;
			case 29: s = "\"<=\" expected"; break;
			case 30: s = "\"<<\" expected"; break;
			case 31: s = "\">>\" expected"; break;
			case 32: s = "\"+=\" expected"; break;
			case 33: s = "\"^=\" expected"; break;
			case 34: s = "\"-=\" expected"; break;
			case 35: s = "\"*=\" expected"; break;
			case 36: s = "\"/=\" expected"; break;
			case 37: s = "\"\\\\=\" expected"; break;
			case 38: s = "\"<<=\" expected"; break;
			case 39: s = "\">>=\" expected"; break;
			case 40: s = "\"&=\" expected"; break;
			case 41: s = "\"AddHandler\" expected"; break;
			case 42: s = "\"AddressOf\" expected"; break;
			case 43: s = "\"Alias\" expected"; break;
			case 44: s = "\"And\" expected"; break;
			case 45: s = "\"AndAlso\" expected"; break;
			case 46: s = "\"Ansi\" expected"; break;
			case 47: s = "\"As\" expected"; break;
			case 48: s = "\"Assembly\" expected"; break;
			case 49: s = "\"Auto\" expected"; break;
			case 50: s = "\"Binary\" expected"; break;
			case 51: s = "\"Boolean\" expected"; break;
			case 52: s = "\"ByRef\" expected"; break;
			case 53: s = "\"Byte\" expected"; break;
			case 54: s = "\"ByVal\" expected"; break;
			case 55: s = "\"Call\" expected"; break;
			case 56: s = "\"Case\" expected"; break;
			case 57: s = "\"Catch\" expected"; break;
			case 58: s = "\"CBool\" expected"; break;
			case 59: s = "\"CByte\" expected"; break;
			case 60: s = "\"CChar\" expected"; break;
			case 61: s = "\"CDate\" expected"; break;
			case 62: s = "\"CDbl\" expected"; break;
			case 63: s = "\"CDec\" expected"; break;
			case 64: s = "\"Char\" expected"; break;
			case 65: s = "\"CInt\" expected"; break;
			case 66: s = "\"Class\" expected"; break;
			case 67: s = "\"CLng\" expected"; break;
			case 68: s = "\"CObj\" expected"; break;
			case 69: s = "\"Compare\" expected"; break;
			case 70: s = "\"Const\" expected"; break;
			case 71: s = "\"CShort\" expected"; break;
			case 72: s = "\"CSng\" expected"; break;
			case 73: s = "\"CStr\" expected"; break;
			case 74: s = "\"CType\" expected"; break;
			case 75: s = "\"Date\" expected"; break;
			case 76: s = "\"Decimal\" expected"; break;
			case 77: s = "\"Declare\" expected"; break;
			case 78: s = "\"Default\" expected"; break;
			case 79: s = "\"Delegate\" expected"; break;
			case 80: s = "\"Dim\" expected"; break;
			case 81: s = "\"DirectCast\" expected"; break;
			case 82: s = "\"Do\" expected"; break;
			case 83: s = "\"Double\" expected"; break;
			case 84: s = "\"Each\" expected"; break;
			case 85: s = "\"Else\" expected"; break;
			case 86: s = "\"ElseIf\" expected"; break;
			case 87: s = "\"End\" expected"; break;
			case 88: s = "\"EndIf\" expected"; break;
			case 89: s = "\"Enum\" expected"; break;
			case 90: s = "\"Erase\" expected"; break;
			case 91: s = "\"Error\" expected"; break;
			case 92: s = "\"Event\" expected"; break;
			case 93: s = "\"Exit\" expected"; break;
			case 94: s = "\"Explicit\" expected"; break;
			case 95: s = "\"False\" expected"; break;
			case 96: s = "\"Finally\" expected"; break;
			case 97: s = "\"For\" expected"; break;
			case 98: s = "\"Friend\" expected"; break;
			case 99: s = "\"Function\" expected"; break;
			case 100: s = "\"Get\" expected"; break;
			case 101: s = "\"GetType\" expected"; break;
			case 102: s = "\"GoSub\" expected"; break;
			case 103: s = "\"GoTo\" expected"; break;
			case 104: s = "\"Handles\" expected"; break;
			case 105: s = "\"If\" expected"; break;
			case 106: s = "\"Implements\" expected"; break;
			case 107: s = "\"Imports\" expected"; break;
			case 108: s = "\"In\" expected"; break;
			case 109: s = "\"Inherits\" expected"; break;
			case 110: s = "\"Integer\" expected"; break;
			case 111: s = "\"Interface\" expected"; break;
			case 112: s = "\"Is\" expected"; break;
			case 113: s = "\"Let\" expected"; break;
			case 114: s = "\"Lib\" expected"; break;
			case 115: s = "\"Like\" expected"; break;
			case 116: s = "\"Long\" expected"; break;
			case 117: s = "\"Loop\" expected"; break;
			case 118: s = "\"Me\" expected"; break;
			case 119: s = "\"Mod\" expected"; break;
			case 120: s = "\"Module\" expected"; break;
			case 121: s = "\"MustInherit\" expected"; break;
			case 122: s = "\"MustOverride\" expected"; break;
			case 123: s = "\"MyBase\" expected"; break;
			case 124: s = "\"MyClass\" expected"; break;
			case 125: s = "\"Namespace\" expected"; break;
			case 126: s = "\"New\" expected"; break;
			case 127: s = "\"Next\" expected"; break;
			case 128: s = "\"Not\" expected"; break;
			case 129: s = "\"Nothing\" expected"; break;
			case 130: s = "\"NotInheritable\" expected"; break;
			case 131: s = "\"NotOverridable\" expected"; break;
			case 132: s = "\"Object\" expected"; break;
			case 133: s = "\"Off\" expected"; break;
			case 134: s = "\"On\" expected"; break;
			case 135: s = "\"Option\" expected"; break;
			case 136: s = "\"Optional\" expected"; break;
			case 137: s = "\"Or\" expected"; break;
			case 138: s = "\"OrElse\" expected"; break;
			case 139: s = "\"Overloads\" expected"; break;
			case 140: s = "\"Overridable\" expected"; break;
			case 141: s = "\"Override\" expected"; break;
			case 142: s = "\"Overrides\" expected"; break;
			case 143: s = "\"ParamArray\" expected"; break;
			case 144: s = "\"Preserve\" expected"; break;
			case 145: s = "\"Private\" expected"; break;
			case 146: s = "\"Property\" expected"; break;
			case 147: s = "\"Protected\" expected"; break;
			case 148: s = "\"Public\" expected"; break;
			case 149: s = "\"RaiseEvent\" expected"; break;
			case 150: s = "\"ReadOnly\" expected"; break;
			case 151: s = "\"ReDim\" expected"; break;
			case 152: s = "\"RemoveHandler\" expected"; break;
			case 153: s = "\"Resume\" expected"; break;
			case 154: s = "\"Return\" expected"; break;
			case 155: s = "\"Select\" expected"; break;
			case 156: s = "\"Set\" expected"; break;
			case 157: s = "\"Shadows\" expected"; break;
			case 158: s = "\"Shared\" expected"; break;
			case 159: s = "\"Short\" expected"; break;
			case 160: s = "\"Single\" expected"; break;
			case 161: s = "\"Static\" expected"; break;
			case 162: s = "\"Step\" expected"; break;
			case 163: s = "\"Stop\" expected"; break;
			case 164: s = "\"Strict\" expected"; break;
			case 165: s = "\"String\" expected"; break;
			case 166: s = "\"Structure\" expected"; break;
			case 167: s = "\"Sub\" expected"; break;
			case 168: s = "\"SyncLock\" expected"; break;
			case 169: s = "\"Text\" expected"; break;
			case 170: s = "\"Then\" expected"; break;
			case 171: s = "\"Throw\" expected"; break;
			case 172: s = "\"To\" expected"; break;
			case 173: s = "\"True\" expected"; break;
			case 174: s = "\"Try\" expected"; break;
			case 175: s = "\"TypeOf\" expected"; break;
			case 176: s = "\"Unicode\" expected"; break;
			case 177: s = "\"Until\" expected"; break;
			case 178: s = "\"Variant\" expected"; break;
			case 179: s = "\"Wend\" expected"; break;
			case 180: s = "\"When\" expected"; break;
			case 181: s = "\"While\" expected"; break;
			case 182: s = "\"With\" expected"; break;
			case 183: s = "\"WithEvents\" expected"; break;
			case 184: s = "\"WriteOnly\" expected"; break;
			case 185: s = "\"Xor\" expected"; break;
			case 186: s = "\"Continue\" expected"; break;
			case 187: s = "\"Operator\" expected"; break;
			case 188: s = "\"Using\" expected"; break;
			case 189: s = "\"IsNot\" expected"; break;
			case 190: s = "\"SByte\" expected"; break;
			case 191: s = "\"UInteger\" expected"; break;
			case 192: s = "\"ULong\" expected"; break;
			case 193: s = "\"UShort\" expected"; break;
			case 194: s = "\"Global\" expected"; break;
			case 195: s = "\"TryCast\" expected"; break;
			case 196: s = "\"Of\" expected"; break;
			case 197: s = "\"Narrowing\" expected"; break;
			case 198: s = "\"Widening\" expected"; break;
			case 199: s = "\"Partial\" expected"; break;
			case 200: s = "??? expected"; break;
			case 201: s = "invalid OptionStmt"; break;
			case 202: s = "invalid OptionStmt"; break;
			case 203: s = "invalid GlobalAttributeSection"; break;
			case 204: s = "invalid GlobalAttributeSection"; break;
			case 205: s = "invalid NamespaceMemberDecl"; break;
			case 206: s = "invalid OptionValue"; break;
			case 207: s = "invalid EndOfStmt"; break;
			case 208: s = "invalid Identifier"; break;
			case 209: s = "invalid TypeModifier"; break;
			case 210: s = "invalid NonModuleDeclaration"; break;
			case 211: s = "invalid NonModuleDeclaration"; break;
			case 212: s = "invalid TypeParameterConstraints"; break;
			case 213: s = "invalid PrimitiveTypeName"; break;
			case 214: s = "invalid MemberModifier"; break;
			case 215: s = "invalid StructureMemberDecl"; break;
			case 216: s = "invalid StructureMemberDecl"; break;
			case 217: s = "invalid StructureMemberDecl"; break;
			case 218: s = "invalid StructureMemberDecl"; break;
			case 219: s = "invalid StructureMemberDecl"; break;
			case 220: s = "invalid StructureMemberDecl"; break;
			case 221: s = "invalid StructureMemberDecl"; break;
			case 222: s = "invalid InterfaceMemberDecl"; break;
			case 223: s = "invalid InterfaceMemberDecl"; break;
			case 224: s = "invalid Charset"; break;
			case 225: s = "invalid VariableDeclarator"; break;
			case 226: s = "invalid AccessorDecls"; break;
			case 227: s = "invalid VariableInitializer"; break;
			case 228: s = "invalid EventMemberSpecifier"; break;
			case 229: s = "invalid EventMemberSpecifier"; break;
			case 230: s = "invalid SimpleExpr"; break;
			case 231: s = "invalid SimpleExpr"; break;
			case 232: s = "invalid SimpleExpr"; break;
			case 233: s = "invalid AssignmentOperator"; break;
			case 234: s = "invalid IdentifierOrKeyword"; break;
			case 235: s = "invalid CastTarget"; break;
			case 236: s = "invalid Argument"; break;
			case 237: s = "invalid RelationalExpr"; break;
			case 238: s = "invalid RelationalExpr"; break;
			case 239: s = "invalid NonArrayTypeName"; break;
			case 240: s = "invalid AttributeArguments"; break;
			case 241: s = "invalid ParameterModifier"; break;
			case 242: s = "invalid Statement"; break;
			case 243: s = "invalid LabelName"; break;
			case 244: s = "invalid EmbeddedStatement"; break;
			case 245: s = "invalid EmbeddedStatement"; break;
			case 246: s = "invalid EmbeddedStatement"; break;
			case 247: s = "invalid EmbeddedStatement"; break;
			case 248: s = "invalid EmbeddedStatement"; break;
			case 249: s = "invalid EmbeddedStatement"; break;
			case 250: s = "invalid EmbeddedStatement"; break;
			case 251: s = "invalid WhileOrUntil"; break;
			case 252: s = "invalid OnErrorStatement"; break;
			case 253: s = "invalid ResumeStatement"; break;
			case 254: s = "invalid CaseClause"; break;
			case 255: s = "invalid CaseClause"; break;

			default: s = "error " + errorNumber; break;
		}
		errors.Error(line, col, s);
	}
	
	protected bool StartOf(int s)
	{
		return set[s, lexer.LookAhead.kind];
	}
	
	static bool[,] set = {
	{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, T,T,x,x, x,T,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, T,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, T,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,T,x,x, x,x,x,T, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x},
	{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,T,T,x, x,x,x,x, x,T,T,T, T,x,x,x, x,x,x,x, x,T,x,x, T,x,x,x, x,x,T,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, T,T,T,x, x,x,x,x, x,x,T,T, x,x,x,x, x,x,x,T, T,x,T,x, x,T,T,T, T,x,T,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,x,x,x, x,x,x,T, T,x,T,x, x,T,x,T, T,x,T,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,T,T, T,x,x,x, x,x,x,x, x,T,x,x, T,x,x,x, x,x,T,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, T,T,T,x, x,x,x,x, x,x,T,T, x,x,x,x, x,x,x,T, T,x,T,x, x,T,T,T, T,x,T,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x},
	{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,T,T,T, T,T,T,T, T,T,T,x, x,T,T,T, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,T,x,T, x,x,T,T, T,T,T,T, T,T,x,T, T,T,T,T, T,T,T,T, T,x,x,x, T,T,T,T, x,x,x,T, x,x,T,T, x,T,x,T, x,T,x,x, x,T,x,T, x,T,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, x,T,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,T,T,T, x,x,x,T, T,T,x,T, x,T,x,x, T,T,x,T, x,T,T,T, x,x,x,x, x,T,T,x, x,x,T,x, T,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, T,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,T,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,x,x,x, x,x,x,T, T,x,T,x, x,T,T,T, T,x,T,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x},
	{x,T,T,T, T,T,T,T, T,T,T,x, x,T,T,T, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,T,x,T, x,x,T,T, T,T,T,T, T,T,x,T, T,T,T,T, T,T,T,T, T,x,x,x, T,T,T,T, x,x,x,x, x,x,T,T, x,T,x,T, x,T,x,x, x,T,x,T, x,T,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, x,T,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,T,T,T, x,x,x,T, T,T,x,T, x,T,x,x, T,T,x,T, x,T,T,T, x,x,x,x, x,T,T,x, x,x,T,x, T,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,T,x,x, x,x,x,x, x,x,x,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,T, T,T,T,T, T,T,T,x, x,x,T,T, T,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,T,T, T,T,T,T, T,T,x,T, T,T,x,T, T,T,T,T, T,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,T,T, T,T,T,T, T,T,T,x, x,x,T,T, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,T,T, T,T,T,T, T,T,x,T, T,T,x,T, T,T,T,T, T,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,T,T, T,T,T,T, T,T,T,x, x,x,T,T, T,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,T,T, T,T,T,T, T,T,x,T, T,T,x,T, T,T,T,T, T,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,T,T, T,T,T,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,T,T, T,T,T,T, T,T,x,T, T,T,x,T, T,T,T,T, T,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,T, x,T,x,T, T,x,x,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,T, T,T,T,T, T,T,T,x, T,x,T,T, T,x,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,T,T, x,T,x,x, x,x,T,T, T,T,T,T, T,T,x,T, T,T,x,T, T,T,T,T, T,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,T,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x,x, x,T,x,x, x,T,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,T, T,T,T,T, T,T,T,x, x,x,T,T, T,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,T,T, x,T,x,T, x,x,T,T, T,T,T,T, T,T,x,T, T,T,x,T, T,T,T,T, T,x,x,x, x,T,T,T, x,x,x,x, x,x,T,T, x,T,x,T, x,T,x,x, x,T,x,T, x,T,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x,T, T,x,T,x, x,T,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,T,T,T, x,x,x,T, T,x,x,T, x,T,x,x, T,T,x,T, x,T,T,T, x,x,x,x, x,T,T,x, x,x,T,x, T,x,T,T, T,T,x,T, x,x,x,x, x,x},
	{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,T,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
	{x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x}

	};
} // end Parser

}